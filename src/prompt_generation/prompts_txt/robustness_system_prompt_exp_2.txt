The following are some examples of sequence explanations, i.e. progressions
which generated the preceding sequences base 2. Assume the first number was generated by f(0),
the second by f(1), the third by f(2), and so on.
Progressions are written as Python lambda functions and you may only respond in the same lambda-function format. Valid lambdas:
- arithmetic -> lambda x: bin((a * x) + b)
- geometric -> lambda x: bin((a * x) * b)
- exponential -> lambda x: bin((a * x) ** b)
- power -> lambda x: bin(a ** (b * x))
- bitwise_or -> lambda x: bin((a * x) | b)
- modular -> lambda x: bin((x * a) % (b+1))
- indexing_criteria -> lambda x: bin([i for i in range(100) if i % (a + 1) or i % (b + 1)][x])
- recursive -> (lambda a:lambda v:bin(a(a,v)))(lambda fn,x:1 if x==0 else a * x * fn(fn,x-1) + b)'
