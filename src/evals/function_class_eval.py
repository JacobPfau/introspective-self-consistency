"""
This file will evaluate whether a model is able to choose the function which generated a sequence,
where the sequence is generated by a function from a given class.

This allows us to evaluate whether the model is capable of understanding a given function class.
"""
import random
from typing import Tuple

from evals.prompts.choose_function import function_selection_prompt
from evals.utils import choose_function, generate_wrong_functions

# from pipelines.sequence_completions import sequence_functions as all_sequence_functions


def function_class_selection_evaluation(
    model_name: str,
    function_class: str,
    sequence_functions: dict[str, str],
    sequence_length: int,
    temperature: float = 0.0,
    num_shots: int = 4,
    use_cot: bool = False,
    num_samples: int = 50,
    num_functions: int = 5,
) -> Tuple[int, int, int]:
    """
    Given a class of function and a model, produce a number of sequences and ask the model to choose the function which
    generated the sequence. Return the number of correct responses.
    """
    correct = 0
    incorrect = 0
    invalid = 0
    fn_form = sequence_functions[function_class]
    # Generate a prompt
    prompt = function_selection_prompt(
        num_shots=num_shots,
        num_functions=num_functions,
        use_cot=use_cot,
    )
    for i in range(num_samples):
        print("Question: ", i + 1, "/", num_samples, sep="")
        # Generate a function from the class
        target_fn = fn_form.format(random.randint(0, 10), random.randint(0, 10))
        offset = random.randint(0, 10)
        # Generate a sequence
        target_sequence = [eval(target_fn)(j + offset) for j in range(sequence_length)]

        # Generate incorrect functions
        incorrect_functions = generate_wrong_functions(target_sequence, num_functions)

        all_functions = incorrect_functions + [target_fn]
        # Shuffle the functions
        random.shuffle(all_functions)
        # Get the index of the correct function
        correct_function_index = all_functions.index(target_fn)

        # Load the prompt
        # Prompt the model to choose the correct function
        try:
            model_response = choose_function(
                possible_functions=all_functions,
                correct_function_indices=[correct_function_index + 1],
                target_sequence=target_sequence,
                prompt=prompt,
                model_name=model_name,
                temperature=temperature,
            )
        except ValueError:
            invalid += 1
            continue
        if model_response == 1:
            correct += 1
        elif model_response == 0:
            incorrect += 1
    return correct, incorrect, invalid
