# """
# TODO: For Q2.1, we can prompt the model to choose the most likely function from
# different distributions. This should be easiest to do by adding to the DISTRIBUTIONS
# dictionary in this file.
# """
#
# SELF_CONTINUATION_PROMPT = """
# In your opinion, what is the most likely continuation of the following sequence?
# Give your response as a number, with no additional commentary.
# """
# SELF_EXPLANATION_PROMPT = """
# In your opinion, what is the most likely function which generated the following sequence?
# Assume the first number was generated by f(0), the second by f(1), the third by f(2), and so on.
# The function should output the number in decimal form.
# Give your response in the format:
# Explanation: <function>
# """
#
# SELF_CONTINUATION_PROMPT2 = """In your opinion, what is the most likely continuation of the following sequence?
# Only respond with the number (with a base prefix if appropriate).
# Do not include any additional commentary.
# """
#
# SELF_EXPLANATION_PROMPT2 = """In your opinion, what is the most likely function which generated the following sequence?
# Assume the first number was generated by f(0), the second by f(1), the third by f(2), and so on.
# The function should output numbers in the same representation as the sequence.
# Give your response in the format:
# Explanation: <function>
# """
#
# SIMULATION_CONTINUATION_PROMPT = """
# Please choose the continuation of the following sequence which you think is most likely.
# Give your response as a number, with no additional commentary.
# """
#
# SIMULATION_EXPLANATION_PROMPT = """
# Please choose the function which you think is most likely to have generated the following sequence.
# Assume the first number was generated by f(0), the second by f(1), and so on.
# The function should output the number in decimal form.
# Give your response in the format:
# Explanation: <function>
# """
#
# CONSISTENT_CONTINUATION_PROMPT = """
# Choose a continuation of the following sequence.
# You will be separately asked to choose a function which generated the sequence.
# Please choose a continuation which is consistent with the function you will choose.
# Give your response as a number, with no additional commentary.
# """
#
# CONSISTENT_EXPLANATION_PROMPT = """
# Choose a function which generates the following sequence.
# You will be separately asked to choose a continuation of the sequence.
# Please choose a function which is consistent with the continuation you will choose.
# Assume the first number was generated by f(0), the second by f(1), and so on.
# The function should output the number in decimal form.
# Give your response in the format:
# Explanation: <function>
# """
#
# FORCED_CONSISTENT_CONTINUATION_PROMPT = """
# Choose a continuation of the following sequence.
# You will be separately asked to choose a function which generated the sequence.
# Please choose a continuation which is consistent with the function you will choose.
# It is more important that you choose a continuation which is consistent with the function you will choose,
# than that you choose the most likely continuation.
# Please choose a continuation which is consistent with the function you will choose.
# Give your response as a number, with no additional commentary.
# """
#
# FORCED_CONSISTENT_EXPLANATION_PROMPT = """
# Choose a function which generates the following sequence.
# You will be separately asked to choose a continuation of the sequence.
# Please choose a function which is consistent with the continuation you will choose.
# It is more important that you choose a function which is consistent with the continuation you will choose,
# than that you choose the most likely function.
# Assume the first number was generated by f(0), the second by f(1), and so on.
# The function should output the number in decimal form.
# Give your response in the format:
# Explanation: <function>
# """
#
# DISTRIBUTIONS = {}  # to be deprecated
# #     "default": {
# #         "continuation": SELF_CONTINUATION_PROMPT,
# #         "explanation": SELF_EXPLANATION_PROMPT,
# #     },
# #     "default-change": {
# #         "continuation": SELF_CONTINUATION_PROMPT2,
# #         "explanation": SELF_EXPLANATION_PROMPT2,
# #     },
# #     "self-simulation": {
# #         "continuation": SIMULATION_CONTINUATION_PROMPT,
# #         "explanation": SIMULATION_EXPLANATION_PROMPT,
# #     },
# #     "self-consistency": {
# #         "continuation": CONSISTENT_CONTINUATION_PROMPT,
# #         "explanation": CONSISTENT_EXPLANATION_PROMPT,
# #     },
# #     "forced-consistency": {
# #         "continuation": FORCED_CONSISTENT_CONTINUATION_PROMPT,
# #         "explanation": FORCED_CONSISTENT_EXPLANATION_PROMPT,
# #     },
# # }
"""
Create a dictionary of distributions we might use for prompting explanations / continuations.

Read all _task_ prompts from
 - ./<task_prompt>/continuation.txt
 - ./<task_prompt>/explanation.txt

 and store them in a dictionary of the form:
 TASK_PROMPTS = {
        <task_prompt>: {
            "continuation": Path(./<task_prompt>/continuation.txt).read_text(),
            "explanation": Path(./<task_prompt>/explanation.txt).read_text(),
        }
    }
"""
from collections import defaultdict
from pathlib import Path

TASK_PROMPTS = defaultdict(dict)
HERE = Path(__file__).parent

for file in HERE.glob("**/continuation.txt"):
    task_prompt = file.parent.name
    TASK_PROMPTS[task_prompt]["continuation"] = file.read_text()


for file in HERE.glob("**/explanation.txt"):
    task_prompt = file.parent.name
    TASK_PROMPTS[task_prompt]["explanation"] = file.read_text()

TASK_PROMPTS = dict(TASK_PROMPTS)


# todo: same for _role_ prompts
