{"Unknown": {"results": {"lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]": {"correct": 5, "incorrect": 12, "invalid": 3}, "lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]": {"correct": 3, "incorrect": 15, "invalid": 2}, "lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]": {"correct": 9, "incorrect": 10, "invalid": 1}, "lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]": {"correct": 7, "incorrect": 13, "invalid": 0}, "lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]": {"correct": 8, "incorrect": 11, "invalid": 1}, "lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]": {"correct": 4, "incorrect": 13, "invalid": 3}, "lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]": {"correct": 11, "incorrect": 9, "invalid": 0}, "lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]": {"correct": 11, "incorrect": 7, "invalid": 2}, "lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]": {"correct": 1, "incorrect": 4, "invalid": 0}, "lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]": {"correct": 7, "incorrect": 10, "invalid": 3}, "lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]": {"correct": 8, "incorrect": 12, "invalid": 0}, "lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]": {"correct": 8, "incorrect": 12, "invalid": 0}, "lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]": {"correct": 6, "incorrect": 13, "invalid": 1}, "lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]": {"correct": 9, "incorrect": 9, "invalid": 2}, "lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]": {"correct": 2, "incorrect": 11, "invalid": 7}, "lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]": {"correct": 1, "incorrect": 17, "invalid": 2}}, "total": 278, "average accuracy": 0.3597122302158273}, "geometric_progression": {"results": {"lambda x: (2 * x) * 2": {"correct": 3, "incorrect": 14, "invalid": 3}, "lambda x: (4 * x) * 1": {"correct": 5, "incorrect": 14, "invalid": 1}, "lambda x: (3 * x) * 1": {"correct": 3, "incorrect": 16, "invalid": 1}, "lambda x: (1 * x) * 3": {"correct": 3, "incorrect": 13, "invalid": 4}, "lambda x: (1 * x) * 2": {"correct": 9, "incorrect": 11, "invalid": 0}, "lambda x: (2 * x) * 1": {"correct": 4, "incorrect": 15, "invalid": 1}, "lambda x: (1 * x) * 1": {"correct": 11, "incorrect": 7, "invalid": 2}, "lambda x: (3 * x) * 2": {"correct": 4, "incorrect": 15, "invalid": 1}, "lambda x: (2 * x) * 3": {"correct": 6, "incorrect": 11, "invalid": 3}}, "total": 164, "average accuracy": 0.2926829268292683}, "exponential_progression": {"results": {"lambda x: (4 * x) ** 1": {"correct": 3, "incorrect": 17, "invalid": 0}, "lambda x: (3 * x) ** 1": {"correct": 0, "incorrect": 16, "invalid": 4}, "lambda x: (2 * x) ** 1": {"correct": 5, "incorrect": 13, "invalid": 2}, "lambda x: (1 * x) ** 1": {"correct": 3, "incorrect": 15, "invalid": 2}}, "total": 72, "average accuracy": 0.1527777777777778}, "power_progression": {"results": {"lambda x: 4 ** (1 * x)": {"correct": 7, "incorrect": 1, "invalid": 2}, "lambda x: 2 ** (2 * x)": {"correct": 10, "incorrect": 0, "invalid": 0}}, "total": 18, "average accuracy": 0.9444444444444444}, "modular_progression": {"results": {"lambda x: (x * 1) % (3+1)": {"correct": 2, "incorrect": 2, "invalid": 1}, "lambda x: (x * 4) % (2+1)": {"correct": 16, "incorrect": 4, "invalid": 0}, "lambda x: (x * 1) % (2+1)": {"correct": 18, "incorrect": 2, "invalid": 0}, "lambda x: (x * 1) % (1+1)": {"correct": 17, "incorrect": 3, "invalid": 0}, "lambda x: (x * 3) % (1+1)": {"correct": 18, "incorrect": 2, "invalid": 0}}, "total": 84, "average accuracy": 0.8452380952380952}, "bit_or_progression": {"results": {"lambda x: (4 * x) | 0": {"correct": 16, "incorrect": 4, "invalid": 0}, "lambda x: (2 * x) | 1": {"correct": 20, "incorrect": 0, "invalid": 0}, "lambda x: (3 * x) | 0": {"correct": 11, "incorrect": 9, "invalid": 0}, "lambda x: (2 * x) | 0": {"correct": 17, "incorrect": 3, "invalid": 0}, "lambda x: (1 * x) | 0": {"correct": 15, "incorrect": 5, "invalid": 0}, "lambda x: (3 * x) | 3": {"correct": 4, "incorrect": 1, "invalid": 0}, "lambda x: (4 * x) | 3": {"correct": 16, "incorrect": 4, "invalid": 0}, "lambda x: (4 * x) | 1": {"correct": 19, "incorrect": 1, "invalid": 0}, "lambda x: (2 * x) | 3": {"correct": 5, "incorrect": 0, "invalid": 0}, "lambda x: (1 * x) | 3": {"correct": 5, "incorrect": 0, "invalid": 0}, "lambda x: (4 * x) | 2": {"correct": 13, "incorrect": 7, "invalid": 0}}, "total": 175, "average accuracy": 0.8057142857142857}, "arithmetic_progression": {"results": {"lambda x: (4 * x) + 0": {"correct": 8, "incorrect": 10, "invalid": 2}, "lambda x: (2 * x) + 1": {"correct": 13, "incorrect": 6, "invalid": 1}, "lambda x: (2 * x) + 3": {"correct": 6, "incorrect": 7, "invalid": 2}, "lambda x: (3 * x) + 0": {"correct": 5, "incorrect": 13, "invalid": 2}, "lambda x: (3 * x) + 3": {"correct": 5, "incorrect": 8, "invalid": 2}, "lambda x: (2 * x) + 0": {"correct": 8, "incorrect": 11, "invalid": 1}, "lambda x: (2 * x) + 2": {"correct": 9, "incorrect": 4, "invalid": 2}, "lambda x: (1 * x) + 1": {"correct": 11, "incorrect": 6, "invalid": 3}, "lambda x: (1 * x) + 0": {"correct": 9, "incorrect": 10, "invalid": 1}, "lambda x: (1 * x) + 2": {"correct": 9, "incorrect": 10, "invalid": 1}, "lambda x: (1 * x) + 3": {"correct": 3, "incorrect": 9, "invalid": 3}, "lambda x: (4 * x) + 3": {"correct": 14, "incorrect": 6, "invalid": 0}, "lambda x: (4 * x) + 1": {"correct": 16, "incorrect": 4, "invalid": 0}, "lambda x: (4 * x) + 2": {"correct": 9, "incorrect": 10, "invalid": 1}}, "total": 239, "average accuracy": 0.5230125523012552}}
