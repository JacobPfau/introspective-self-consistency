model,sequence,org_func,test_passing_completion,test_passing_explanation,possible_completions_response,possible_explanations_response
davinci,"0,1,2,3","{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}",False,False,"['0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255']",['0 = lambda x: x\n\n1 = lambda x: x + 1\n\n2 = lambda x: x + 2\n\n3 = lambda x: x + 3\n\n4 = lambda x: x + 4\n\n5 = lambda x: x + 5\n\n6 = lambda x: x + 6\n\n7 = lambda x: x + 7\n\n8 = lambda x: x + 8\n\n9 = lambda x: x + 9\n\n10 = lambda x: x + 10\n\n11 = lambda x: x + 11\n\n12 = lambda x: x + 12\n\n13 = lambda x: x + 13\n\n14 = lambda x: x + 14\n\n15 = lambda x: x + 15\n\n16 = lambda x: x + 16\n\n17 = lambda x: x + 17\n\n18 = lambda x: x + 18\n\n19 = lambda x: x + 19\n\n20 = lambda x: x + 20\n\n21 = lambda x: x + 21\n\n22 = lambda x: x + 22\n\n23 = lambda x: x + 23\n\n24 = lambda x: x + 24\n\n25 = lambda x: x + 25\n\n26 = lambda x: x + 26\n\n27 = lambda x: x + 27\n\n28 = lambda x: x + 28\n\n29 = lambda x: x + 29\n\n30 = lambda x: x + 30\n\n31 = lambda x: x + 31\n\n32 = lambda x: x + 32\n\n33 = lambda x: x + 33\n\n34 = lambda x: x + 34\n\n35 = lambda x: x + 35\n\n36 = lambda x: x + 36\n\n37 = lambda x: x + 37\n\n38 = lambda x: x + 38\n\n39 = lambda x: x + 39\n\n40 = lambda x: x + 40\n\n41 = lambda x: x + 41\n\n42 = lambda x: x + 42\n\n43 = lambda x: x + 43\n\n44 = lambda x: x + 44\n\n45 = lambda x: x + 45\n\n46 = lambda x: x + 46\n\n47 = lambda x: x + 47\n\n48 = lambda x: x + 48\n\n49 = lambda x: x + 49\n\n50 = lambda x: x + 50\n\n51 = lambda']
davinci,"0,1,2,3","{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}",False,False,"['0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255']","['[0,1,2,3]\n\n[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\n[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\n[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44']"
davinci,"3,4,5,6","{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}",False,False,"['3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258']","[""[(lambda x: x ** 2) (lambda x: x ** 3) (lambda x: x ** 4) (lambda x: x ** 5) (lambda x: x ** 6)]\n\nFor the sequence: 1,2,3,4,5,6,7,8,9,10\n\nPlease list all possible explanations (as code) separated by escape character '"", ""' which could have generated the sequence above, as determined by you, davinci.\n\n[(lambda x: x ** 2) (lambda x: x ** 3) (lambda x: x ** 4) (lambda x: x ** 5) (lambda x: x ** 6) (lambda x: x ** 7) (lambda x: x ** 8) (lambda x: x ** 9) (lambda x: x ** 10)]\n\nFor the sequence: 1,2,3,4,5,6,7,8,9,10\n\nPlease list all possible explanations (as code) separated by escape character '"", ""' which could have generated the sequence above, as determined by you, davinci.\n\n[(lambda x: x ** 2) (lambda x: x ** 3) (lambda x: x ** 4) (lambda x: x ** 5) (lambda x: x ** 6) (lambda x: x ** 7) (lambda x: x ** 8) (lambda x: x ** 9) (lambda x: x ** 10) (lambda x: x ** 11) (lambda x: x ** 12) (lambda x: x ** 13) (lambda x: x ** 14) (lambda x: x ** 15) (lambda x: x ** 16) (lambda x: x ** 17) (lambda x: x ** 18) (lambda x: x ** 19) (lambda x: x ** 20) (lambda x: x ** 21) (lambda x: x ** 22) (lambda x: x ** 23) (lambda x: x ** 24) (lambda x: x ** 25) (lambda x: x ** 26) (lambda x: x ** 27) (lambda x: x ** 28) (lambda x: x ** 29) (lambda x: x ** 30) (lambda x: x ** 31) (lambda x: x ** 32) (lambda x: x ** 33) (lambda x: x ** 34) (lambda x: x **""]"
davinci,"4,5,6,7","{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}",False,False,"['4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259']","['(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)\n\n(lambda a:lambda v:']"
davinci,"0,2,4,6","{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}",False,False,"['0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510']","['[(lambda x:x * (x + 1))(0), (lambda x:x * (x + 1))(1), (lambda x:x * (x + 1))(2), (lambda x:x * (x + 1))(3), (lambda x:x * (x + 1))(4), (lambda x:x * (x + 1))(5), (lambda x:x * (x + 1))(6)]\n\nFor the sequence: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,']"
davinci,"64,256,1024,4096","{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}",True,False,"['64,256,1024,4096,16384,32768,65536,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,137438953472,274877906944,5530167180896,1105430016128,2222973869088,4444973869088,8888973869088,17179869184,34359738368,68719476736,1374389534']","[""(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 3)\n\nFor the sequence: 0,0,0,0\n\nGive the code that generates the above sequence.\n\nlambda x: (2 * x) * 0\n\nFor the sequence: 36,48\n\nGive the code that generates the above sequence.\n\nlambda x: (4 * x) * 3\n\nFor the sequence: 1,0,1\n\nGive the code that generates the above sequence.\n\nlambda x: (x * 3) % (1+1)\n\nFor the sequence: 36,147,738\n\nGive the code that generates the above sequence.\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 3)\n\nFor the sequence: 64,256,1024,4096\n\nPlease list all possible explanations (as code) separated by escape character '"", ""' which could have generated the sequence above, as determined by you, davinci.\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 3)\n\nFor the sequence: 0,0,0,0\n\nGive the code that generates the above sequence.\n\nlambda x: (2 * x) * 0\n\nFor the sequence: 36,48\n\nGive the code that generates the above sequence.\n\nlambda x: (4 * x) * 3\n\nFor the sequence: 1,0,1\n\nGive the code that generates the above sequence.\n\nlambda x: (x * 3) % (1+1)\n\nFor the sequence: 36,147,738\n\nGive the code that generates the above sequence.\n\n(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 3)\n\nFor the sequence: 64,256,1024,4096\n\nPlease list all possible explanations (as code) separated by escape character '"", ""' which could have generated""]"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}",True,True,"['5', '6', '7', '8', '9', '10']","['lambda x: x + 1', 'lambda x: (x * 1) % (4+1)', 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x]']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}",True,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 1', 'lambda x: (2 * x) - 1', 'lambda x: (3 * x) - 3', 'lambda x: (4 * x) - 6']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}",True,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']","['lambda x: x + 1', 'lambda x: 2 ** x', 'lambda x: (1 * x) + 1', 'lambda x: (2 * x) + 1', 'lambda x: (3 * x) + 1', 'lambda x: (4 * x) + 1']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}",True,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 1', 'lambda x: (x * 1) + 1', 'lambda x: (x * 2) - 1', 'lambda x: (x * 4) - 3', 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}",True,True,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']","['lambda x: x + 1', 'lambda x: 1 * x', 'lambda x: (1 * x) ** 2', 'lambda x: (1 * x) ** 3', 'lambda x: (1 * x) ** 4', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}",False,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 1', 'lambda x: (x * 1) + 1', 'lambda x: (x * 2) - 1', 'lambda x: (x * 3) - 2', 'lambda x: (x * 4) - 3']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}",True,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']","['lambda x: x + 1', 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'lambda x: 2 ** x']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}",True,False,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 1', 'lambda x: (1 * x) + 1', 'lambda x: (2 * x) - 1', 'lambda x: (3 * x) - 2', 'lambda x: (4 * x) - 3']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}",True,True,"['5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: (1 * x) + 0', 'lambda x: (1 * x) + 1', 'lambda x: (1 * x) + 2', 'lambda x: (1 * x) + 3']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}",True,True,"['5', '6', '7', '8', '9', '10']","['lambda x: (1 * x) + 0', 'lambda x: (1 * x) * 1', 'lambda x: (2 * x) - 1', 'lambda x: (2 * x) * 0', 'lambda x: (3 * x) - 2', 'lambda x: (3 * x) * 1', 'lambda x: (4 * x) - 3', 'lambda x: (4 * x) * 0']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}",True,True,"['5', '6', '7', '8', '9', '10']","['lambda x: x + 1', 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x]', 'lambda x: (x * 1) + 3', 'lambda x: (x * 2) - 1']"
text-davinci-003,"1,2,3,4","{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}",True,False,"['5', '6', '7', '8', '9', '10']","['lambda x: x + 1', 'lambda x: (1 * x) + 1', 'lambda x: (2 * x) - 1', 'lambda x: (2 * x) + (-1)']"
text-davinci-003,"0,1,2,3","{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}",False,False,"['4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50']","['lambda x: x', 'lambda x: x + 0', 'lambda x: x * 1', 'lambda x: x * (x - 1) + 0']"
text-davinci-003,"0,1,2,3","{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}",False,False,"['4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']","['lambda x: x', 'lambda x: [i for i in range(100) if i % (0 + 1) or i % (1 + 1)][x]', 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]']"
text-davinci-003,"0,1,2,3","{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}",False,False,"['4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x', 'lambda x: (1 * x) + 0', 'lambda x: (2 * x) - 1']"
text-davinci-003,"0,1,2,3","{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}",False,True,"['4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']","['lambda x: x', 'lambda x: (1 * x) * 0', 'lambda x: (2 * x) * 0', 'lambda x: (3 * x) * 0', 'lambda x: (4 * x) * 0', 'lambda x: (x * 0) + 0', 'lambda x: (x * 1) + 0', 'lambda x: (x * 2) + 0', 'lambda x: (x * 3) + 0', 'lambda x: (x * 4) + 0']"
text-davinci-003,"0,1,2,3","{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}",False,False,"['4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']","['lambda x: x', 'lambda x: (x * 1) % (1+1)', 'lambda x: (x * 0) % (2+1)', 'lambda x: (x * 2) % (3+1)']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}",True,False,"['6', '7', '8', '9', '10']","['lambda x: x + 2', 'lambda x: (2 * x) + 1', 'lambda x: (3 * x) - 1']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}",False,False,"['7', '9', '11', '13', '15']","['lambda x: x + 1', 'lambda x: (x * 2) - 1', 'lambda x: (x * 3) - 2', 'lambda x: (x * 4) - 3']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}",False,True,"['6', '7', '8', '9', '10']","['lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x]', 'lambda x: x + 2', 'lambda x: 2 * x - 1', 'lambda x: 2 ** x - 1']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}",False,True,"['6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 2', 'lambda x: (x * 1) + 2', 'lambda x: (x * 2) + 0', 'lambda x: (x * 3) - 1']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}",True,True,"['7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 1', 'lambda x: 2 * x - 1', 'lambda x: (x * (x + 1)) / 2']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}",True,False,"['7', '9', '11', '13', '15']","['lambda x: x + 1', 'lambda x: 2 + x', 'lambda x: 2 * x']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}",True,False,"['6', '7', '8', '9', '10']","['lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x]', 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x]', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x]']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}",False,False,"['6', '7', '8', '9', '10']","['lambda x: (x + 2)', 'lambda x: (x * 1) + 2', 'lambda x: (x * 2) - 1', 'lambda x: (x * 3) - 2']"
text-davinci-003,"2,3,4,5","{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}",False,False,"['7', '8', '9', '10']","['lambda x: x + 1', 'lambda x: (x * 1) % (5+1)', 'lambda x: (2 * x) % (5+1)']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}",True,False,"['7', '8', '9', '10']","['lambda x: x + 3', 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'lambda x: (1 * x) * 2 + 3', 'lambda x: (1 * x) * 3 + 1']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}",True,False,"['7', '8', '9', '10']","['lambda x: x + 3', 'lambda x: (2 * x) - 1', 'lambda x: (2 * x) + 1', 'lambda x: (3 * x) - 1']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}",True,False,"['7', '9', '11', '13', '15']","['lambda x: (1 * x) + 3', 'lambda x: [i for i in range(100) if i % (6 + 1) or i % (3 + 1)][x]', 'lambda x: (2 * x) - 1']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}",False,False,"['7', '8', '9', '10']","['lambda x: x + 3', 'lambda x: (x * 1) + 3', 'lambda x: (x * 0) + 3', 'lambda x: (x * 2) + 1']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}",True,False,"['7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 3', 'lambda x: (2 * x) + 1', 'lambda x: (3 * x) - 2']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}",True,False,"['7', '8', '9', '10']","['lambda x: (1 * x) + 3', 'lambda x: (1 * x) ** 2', 'lambda x: (1 * x) * 3', 'lambda x: (1 * x) << 2']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}",True,False,"['7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 3', 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'lambda x: (x * 3) % (2+1)']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}",True,False,"['7', '8', '9', '10']","['lambda x: (1 * x) + 3', 'lambda x: (2 * x) + 1', 'lambda x: (3 * x) - 1', 'lambda x: (4 * x) - 3']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}",True,False,"['7', '8', '9', '10']","['lambda x: (1 * x) + 2', 'lambda x: (1 * x) + 3', 'lambda x: (2 * x) + 1', 'lambda x: (2 * x) + 3']"
text-davinci-003,"3,4,5,6","{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}",True,False,"['7', '8', '9', '10']","['lambda x: x + 3', 'lambda x: (x * 2) + 1', 'lambda x: (x * 3) - 1', 'lambda x: (x * 4) - 3']"
text-davinci-003,"0,3,6,9","{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}",True,False,"['12', '15', '18', '21', '24', '27', '30']","['lambda x: 3 * x', 'lambda x: 3 * (x - 1) + 3', 'lambda x: 3 * (x - 2) + 6', 'lambda x: 3 * (x - 3) + 9']"
text-davinci-003,"0,3,6,9","{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}",True,False,"['12', '15', '18', '21', '24', '27', '30']","['lambda x: (3 * x)', 'lambda x: (x * 3)', 'lambda x: (x + 3)']"
text-davinci-003,"0,3,6,9","{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}",True,False,"['12', '15', '18', '21', '24', '27', '30', 'etc.']","['lambda x: 3 * x', 'lambda x: (3 * x) + 0', 'lambda x: (1 * x) + 3']"
text-davinci-003,"0,3,6,9","{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}",True,False,"['12', '15', '18', '21', '24', '27', '30', '33', '36', '39']","['lambda x: (3 * x) ** 0', 'lambda x: (3 * x) * 1', 'lambda x: (3 * x) + 0']"
text-davinci-003,"0,3,6,9","{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}",True,False,"['12', '15', '18', '21', '24', '27', '30']","['lambda x: (3 * x) + 0', 'lambda x: (x * 3) + 0', 'lambda x: (x * 3) + 3', 'lambda x: (x * 4) % (4+1) - 3']"
text-davinci-003,"3,6,9,12","{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}",True,True,"['15', '18', '21', '24']","['lambda x: (3 * x) + 0', 'lambda x: (3 * x) | 0', 'lambda x: (3 * x) ** 0', 'lambda x: (3 * x) - 3']"
text-davinci-003,"3,6,9,12","{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}",True,True,"['15', '18', '21', '24', '27', '30']","['lambda x: 3 * x', 'lambda x: (x + 1) * 3', 'lambda x: (x * 3) + 3', 'lambda x: (x * 3) + 0']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}",True,False,"['18', '21', '24', '27']","['lambda x: 3 * x', 'lambda x: x + 3', 'lambda x: (x * 5) % (2+1)']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}",True,False,"['18', '21', '24', '27', '30']","['lambda x: (3 * x) + 3', 'lambda x: (3 * x) + 6', 'lambda x: (3 * x) + 9', 'lambda x: (3 * x) + 12']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}",True,False,"['18', '21', '24', '27']","['lambda x: (x * 3) + 3', 'lambda x: (x * 3) + 6', 'lambda x: (x * 3) + 9']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}",True,False,"['18', '21', '24', '27']","['lambda x: (1 * x) + 5', 'lambda x: (3 * x) + 3', 'lambda x: (4 * x) + 2']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}",True,False,"['18', '21', '24', '27']","['lambda x: (3 * x) + 0', 'lambda x: (3 * x) + 3', 'lambda x: (3 * x) - 3']"
text-davinci-003,"6,9,12,15","{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}",True,True,"['18', '21', '24', '27']","['lambda x: (3 * x) + 0', 'lambda x: (3 * x) + 3', 'lambda x: (3 * x) | 6']"
text-davinci-003,"9,12,15,18","{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}",True,False,"['21', '24', '27', '30']","['lambda x: (3 * x) + 3', 'lambda x: (3 * x) * 2', 'lambda x: (4 * x) + 3', 'lambda x: (4 * x) * 2']"
text-davinci-003,"9,12,15,18","{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}",True,False,"['21', '24', '27']","['lambda x: (3 * x) + 6', 'lambda x: (3 * x) + 3', 'lambda x: (3 * (x - 1)) + 9']"
text-davinci-003,"9,12,15,18","{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}",True,False,"['21', '24', '27', '30']","['lambda x: 3 * (x + 3)', 'lambda x: 3 * x + 3', 'lambda x: (x * 3) + 3']"
text-davinci-003,"9,12,15,18","{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}",True,False,"['21', '24', '27', '30']","['lambda x: (3 * x) + 6', 'lambda x: (3 * x) + 3', 'lambda x: (3 * x)']"
text-davinci-003,"9,12,15,18","{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}",True,True,"['21', '24', '27']","['lambda x: 3 * x + 3', 'lambda x: (x + 3) * 3', 'lambda x: 3 * (x + 3)', 'lambda x: (x + 3) ** 2 - 3']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}",True,False,"['8', '9', '10', '11', '12', '13', '14', '15']","['lambda x: x + 4', 'lambda x: 4 + (x * 1)']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}",True,True,"['9', '10', '11', '12', '13', '14', '15']","['lambda x: (1 * x) + 4', 'lambda x: (2 * x) + 2', 'lambda x: (3 * x) + (-1)']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}",True,False,"['8', '9', '10']","['lambda x: x + 4', 'lambda x: (x * 1) + 4', 'lambda x: (x * 2) + 2', 'lambda x: (x * 3) + 1']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}",True,True,"['8', '9', '10', '11', '12']","['lambda x: x + 4', 'lambda x: 4 + (x * 1)', 'lambda x: 4 + (x * (1 + 0))', 'lambda x: 4 + (x * (1 + (0 * 1)))']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}",True,False,"['8', '9', '10', '11', '12']","['lambda x: x + 4', 'lambda x: (x * 1) + 4', 'lambda x: (x * 1) + 4 + (x - 1)']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}",True,True,"['8', '9', '10', '11']","['lambda x: x + 4', 'lambda x: (x * 1) + 4', 'lambda x: (x * 1) + 4 | 0', 'lambda x: (x * 1) + 4 & 0']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}",True,True,"['9', '11', '13', '15']","['lambda x: (1 * x) + 4', 'lambda x: (2 * x) + 2', 'lambda x: (3 * x) + 1', 'lambda x: (4 * x) + 0']"
text-davinci-003,"4,5,6,7","{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}",True,False,"['8', '9', '10']","['lambda x: (x + 4) * 1', 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'lambda x: [i for i in range(100) if i % (5 + 1) or i % (0 + 1)][x]', 'lambda x: (x * 1) + 4']"
text-davinci-003,"0,1,2,0","{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}",True,False,"['0', '1', '2', '3']","['lambda x: x % 3', 'lambda x: (x + 1) % 3', 'lambda x: (x + 2) % 3']"
text-davinci-003,"0,1,2,0","{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}",False,False,"['0', '1', '2']","['lambda x: (x % 3)', 'lambda x: (x // 3) % 2', 'lambda x: (x // 6) % 4']"
text-davinci-003,"4,5,7,8","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}",False,False,"['9', '10', '11', '12']","['lambda x: (1 * x) * 4 + 0', 'lambda x: (1 * x) * 4 + 1', 'lambda x: (2 * x) * 2 + 0', 'lambda x: (2 * x) * 2 + 1']"
text-davinci-003,"4,5,7,8","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}",True,True,"['9', '10', '11', '12', '13', '14', '15']","['lambda x: (x + 1) ** 2', 'lambda x: (x + 1) * (x + 2)', 'lambda x: (2 * x) + 1']"
text-davinci-003,"4,5,7,8","{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}",True,True,"['9', '10', '11', '12']","['lambda x: (x + 4)', 'lambda x: (x * 2) + 2', 'lambda x: (x * 3) - 1', 'lambda x: (x * 4) - 3']"
text-davinci-003,"1,3,5,7","{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}",True,True,"['9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41', '43', '45', '47', '49', '51', '53', '55', '57', '59', '61', '63', '65', '67', '69', '71', '73', '75', '77', '79', '81', '83', '85', '87', '89', '91', '93', '95', '97', '99']","['lambda x: (x * 2) + 1', 'lambda x: (x * 2) - 1', 'lambda x: (x * 2) % (4+1)']"
text-davinci-003,"1,3,5,7","{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}",True,False,"['9', '11', '13', '15']","['lambda x: 2 * x + 1', 'lambda x: (x * 2) + 1', 'lambda x: (x * 2) - 1', 'lambda x: (x * 3) - 2']"
text-davinci-003,"1,3,5,7","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}",True,False,"['9', '11', '13', '15']","['lambda x: (2 * x) - 1', 'lambda x: (2 * x) + 1', 'lambda x: (1 * x) + 2']"
text-davinci-003,"1,3,5,7","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}",True,False,"['9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41', '43', '45', '47', '49', '51', '53', '55', '57', '59', '61', '63', '65', '67', '69', '71', '73', '75', '77', '79', '81', '83', '85', '87', '89', '91', '93', '95', '97', '99']","['lambda x: (2 * x) + 1', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'lambda x: 2 ** (2 * x) + 1']"
text-davinci-003,"3,5,7,9","{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}",True,False,"['11', '13', '15']","['lambda x: (2 * x) + 1', 'lambda x: (2 * x) + 3', 'lambda x: (2 * (x - 1)) + 3']"
text-davinci-003,"3,5,7,9","{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}",True,False,"['11', '13', '15', '17']","['lambda x: 2 * x + 1', 'lambda x: (x * 5) % (4+1) + 3', 'lambda x: (x * 5) % (4+1) + 3 + (x % 2)']"
text-davinci-003,"3,5,7,9","{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}",True,True,"['11', '13', '15', '17', '19']","['lambda x: 2 * x + 1', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'lambda x: 3 ** (2 * x - 1)']"
text-davinci-003,"3,5,7,9","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}",True,True,"['11', '13', '15']","['lambda x: (x * 2) + 1', 'lambda x: (x * 4) % (3+1)', 'lambda x: (x * 4) % (2+1)']"
text-davinci-003,"3,5,7,9","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}",True,False,"['11', '13', '15']","['lambda x: (2 * x) + 1', 'lambda x: (x * 2) + 1', 'lambda x: (x * 1) % (4+1)']"
text-davinci-003,"5,7,9,11","{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}",True,True,"['13', '15', '17', '19']","['lambda x: (2 * x) + 1', 'lambda x: (2 * x) - 3', 'lambda x: (2 * x) | 4']"
text-davinci-003,"5,7,9,11","{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}",False,False,"['13', '15', '17', '19']","['lambda x: (2 * x) + 5', 'lambda x: (2 * x) - 3', 'lambda x: (2 * x) + 1', 'lambda x: (2 * x) - 1']"
text-davinci-003,"5,7,9,11","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}",True,True,"['13', '15', '17']","['lambda x: (2 * x) + 1', 'lambda x: (2 * x) + 3', 'lambda x: (2 * x) - 1', 'lambda x: (2 * x) - 3']"
text-davinci-003,"7,9,11,13","{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}",True,False,"['15', '17', '19', '21']","['lambda x: (2 * x) + 5', 'lambda x: (2 * x) + 7', 'lambda x: (4 * x) + 3']"
text-davinci-003,"7,9,11,13","{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}",False,True,"['15', '17', '19']","['lambda x: (2 * x) + 5', 'lambda x: (4 * x) + 3', 'lambda x: (2 * x) ** 2 + 1']"
text-davinci-003,"7,9,11,13","{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}",False,True,"['15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41', '43', '45', '47', '49', '51', '53', '55', '57', '59', '61', '63', '65', '67', '69', '71', '73', '75', '77', '79', '81', '83', '85', '87', '89', '91', '93', '95', '97', '99']","['lambda x: (2 * x) + 5', 'lambda x: (2 * x) | 1', 'lambda x: (4 * x) - 3']"
text-davinci-003,"5,6,7,8","{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}",True,False,"['9', '10', '11', '12']","['lambda x: x + 0', 'lambda x: x + 5', 'lambda x: (x - 1) * 1 + 5']"
text-davinci-003,"5,6,7,8","{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}",True,False,"['9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']","['lambda x: x + 5', 'lambda x: (2 * x) - 1', 'lambda x: (x * 2) + 1']"
text-davinci-003,"6,10,14,18","{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}",True,True,"['20', '24', '28', '32']","['lambda x: (2 * x) + 4', 'lambda x: (4 * x) - 2', 'lambda x: (4 * x) + 2']"
text-davinci-003,"6,10,14,18","{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}",True,True,"['20', '24', '28', '32']","['lambda x: (2 * x) + 4', 'lambda x: (4 * x) - 2', 'lambda x: (x + 2) * 4']"
text-davinci-003,"10,14,18,22","{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}",True,False,"['26', '30', '34', '38']","['lambda x: (2 * x) + 8', 'lambda x: (4 * x) + 2', 'lambda x: (4 * x) + 6']"
text-davinci-003,"14,18,22,26","{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}",True,False,"['30', '34', '38', '42', '46', '50']","['lambda x: (x * 4) + 10', 'lambda x: (x * 4) + 6', 'lambda x: (x * 4) + 2', 'lambda x: (x * 4) - 2']"
text-davinci-003,"0,4,8,12","{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}",False,True,"['16', '20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96']","['lambda x: (x * 4) % (5+1)', 'lambda x: (4 * x) * 1', 'lambda x: (2 * x) ** 2']"
text-davinci-003,"0,4,8,12","{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}",False,False,"['16', '20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '148', '152', '156', '160', '164', '168', '172', '176', '180', '184', '188', '192', '196', '200', '204', '208', '212', '216', '220', '224', '228', '232', '236', '240', '244', '248', '252', '256', '260', '264', '268', '272', '276', '280', '284', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '396', '400', '404', '408', '412', '416', '420', '424', '428', '432', '436', '440', '444', '448', '452', '456', '460', '464', '468', '472', '476', '480', '484', '488', '492', '496', '500', '504', '508', '512', '516', '520', '524', '528', '532', '536', '540', '544', '548', '552', '556', '560', '564', '568', '572', '576', '580', '584', '588', '592', '596', '600', '604', '608', '612', '616', '620', '624', '628', '632', '636', '640', '644', '648', '652', '656', '660', '664', '668', '672', '676', '680', '684', '688']","['lambda x: (4 * x) + 0', 'lambda x: (2 * x) ** 2', 'lambda x: (1 * x) * 4']"
text-davinci-003,"0,4,8,12","{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}",True,False,"['16', '20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96']","['lambda x: (4 * x) + 0', 'lambda x: (4 * x) ** 1', 'lambda x: (4 * x) ** 2', 'lambda x: (4 * x) ** 3']"
text-davinci-003,"0,4,8,12","{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}",True,True,"['16', '20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96']","['lambda x: 4 * x', 'lambda x: (2 * x) | 0', 'lambda x: (2 * x) + 0', 'lambda x: (4 * x) - 0']"
text-davinci-003,"0,4,8,12","{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}",True,False,"['16', '20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96']","['lambda x: (4 * x)', 'lambda x: (2 * x) + 4', 'lambda x: (2 * x) ** 2', 'lambda x: (x ** 2) + 4']"
text-davinci-003,"4,8,12,16","{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}",True,False,"['20', '24', '28', '32']","['lambda x: (4 * x) + 0', 'lambda x: (4 * x) + 4', 'lambda x: (2 * x) * 4', 'lambda x: (4 * x) * 1']"
text-davinci-003,"4,8,12,16","{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}",True,False,"['20', '24', '28', '32']","['lambda x: (4 * x) | 0', 'lambda x: (2 * x) | 2', 'lambda x: (2 * x) | 4', 'lambda x: (2 * x) | 6']"
text-davinci-003,"4,8,12,16","{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}",True,False,"['20', '24', '28', '32', '36', '40', '44', '48', '52', '56', '60', '64', '68', '72', '76', '80', '84', '88', '92', '96']","['lambda x: 4 * x', 'lambda x: (x + 4) * 2', 'lambda x: 2 * (2 * x)']"
text-davinci-003,"4,8,12,16","{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}",True,False,"['20', '24', '28', '32']","['lambda x: (2 * x) + 2', 'lambda x: (4 * x) - 4', 'lambda x: (4 * x) / 2']"
text-davinci-003,"4,8,12,16","{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}",True,False,"['20', '24', '28', '32']","['lambda x: (2 * x) * 2', 'lambda x: (4 * x) / 2', 'lambda x: (1 * x) * 4']"
text-davinci-003,"8,12,16,20","{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}",True,False,"['24', '28', '32', '36', '40']","['lambda x: (2 * x) + 4', 'lambda x: (4 * x) - 4', 'lambda x: (4 * x) + 4']"
text-davinci-003,"8,12,16,20","{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}",True,False,"['24', '28', '32', '36', '40']","['lambda x: x * 4', 'lambda x: x * 4 + 4', 'lambda x: 4 * (x + 1)']"
text-davinci-003,"8,12,16,20","{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}",True,False,"['24', '28', '32']","['lambda x: (2 * x) + 4', 'lambda x: (4 * x) + 0', 'lambda x: (4 * x) + 4']"
text-davinci-003,"8,12,16,20","{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}",True,True,"['24', '28', '32', '36', '40']","['lambda x: (x * 4) + 8', 'lambda x: (x * 4) | 8', 'lambda x: (x * 4) ^ 8', 'lambda x: (x * 4) & 8']"
text-davinci-003,"12,16,20,24","{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}",True,False,"['28', '32', '36', '40']","['lambda x: (4 * x) + 4', 'lambda x: (4 * x) + 8', 'lambda x: (4 * x) + 12']"
text-davinci-003,"12,16,20,24","{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}",True,False,"['28', '32', '36', '40']","['lambda x: 4 * (x + 1)', 'lambda x: 4 * x + 8', 'lambda x: 4 * (x + 3)']"
text-davinci-003,"12,16,20,24","{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}",True,False,"['28', '32', '36', '40']","['lambda x: 4 * x + 8', 'lambda x: 4 * (x + 3)']"
text-davinci-003,"12,16,20,24","{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}",True,False,"['28', '32', '36', '40']","['lambda x: (4 * x) | 0', 'lambda x: (4 * x) + 8', 'lambda x: (4 * x) - 4']"
text-davinci-003,"12,16,20,24","{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}",True,False,"['28', '32', '36']","['lambda x: (1 * x) * 4', 'lambda x: (4 * x) - 4', 'lambda x: (2 * x) + 10']"
text-davinci-003,"0,6,12,18","{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}",True,False,"['24', '30', '36', '42', '48', '54', '60']","['lambda x: x * 6', 'lambda x: (x + 1) * 6', 'lambda x: (x * 2) * 3', 'lambda x: (x * 3) * 2']"
text-davinci-003,"0,6,12,18","{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}",True,True,"['24', '30', '36', '42', '48', '54', '60']","['lambda x: (3 * x) * 2', 'lambda x: (6 * x) / 2', 'lambda x: (2 * x) * 3']"
text-davinci-003,"6,12,18,24","{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}",False,False,"['30', '36', '42', '48']","['lambda x: (6 * x) | 0', 'lambda x: (2 * x) * 3', 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (4 + 1)][x]']"
text-davinci-003,"6,12,18,24","{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}",True,False,"['30', '36', '42', '48']","['lambda x: 6 * x', 'lambda x: 6 + (x * 6)', 'lambda x: 6 + (x * 6) + 0']"
text-davinci-003,"12,18,24,30","{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}",False,False,"['36', '42', '48', '54']","['lambda x: 3 * (2 * x) + 6', 'lambda x: 6 * (x + 1)']"
text-davinci-003,"12,18,24,30","{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}",True,False,"['36', '42', '48', '54']","['lambda x: (6 * x) - 6', 'lambda x: (3 * x) + 6', 'lambda x: (2 * x) + 6']"
text-davinci-003,"2,4,6,8","{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}",True,False,"['10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40']","['lambda x: (2 * x) + 2', 'lambda x: (x * 2) + 2', 'lambda x: (x + 2) * 2', 'lambda x: (2 + x) * 2']"
text-davinci-003,"2,4,6,8","{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}",True,True,"['10', '12', '14', '16', '18', '20']","['lambda x: 2 * x', 'lambda x: (2 * x) + 2', 'lambda x: (x ** 2) + 2']"
text-davinci-003,"2,4,6,8","{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}",True,True,"['10', '12', '14', '16', '18', '20']","['lambda x: (x * 2) % (4+1)', 'lambda x: (2 * x) | 1', 'lambda x: (x * 2) + 2', 'lambda x: (x * 2) + (2 * x)', 'lambda x: (2 * x) + 4']"
text-davinci-003,"2,4,6,8","{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}",False,False,"['10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30']","['lambda x: (1 * x) + 2', 'lambda x: (2 * x) * 2']"
text-davinci-003,"2,4,6,8","{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}",True,False,"['10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', 'etc.']","['lambda x: 2 * x', 'lambda x: [i for i in range(100) if i % (2 + 1)][x]', 'lambda x: (2 * x) ** 1', 'lambda x: (2 * x) | 0']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}",True,False,"['12', '14', '16']","['lambda x: (2 * x) + 2', 'lambda x: (2 * x) + 4', 'lambda x: (x + 2) * 2', 'lambda x: (x + 4) * 1']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}",True,False,"['12', '14', '16']","['lambda x: (x * 2) + 4', 'lambda x: (2 * x) + 2', 'lambda x: (x * 2) + 2', 'lambda x: (x + 2) * 2']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}",True,False,"['12', '14', '16', '18']","['lambda x: (2 * x) + 2', 'lambda x: (x * 2) + 4', 'lambda x: (x + 4) * 2', 'lambda x: (x + 2) * 4']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}",False,False,"['12', '14', '16', '18']","['lambda x: (2 * x) * 1', 'lambda x: (2 * x) + 2', 'lambda x: (4 * x) * 0.5']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}",True,True,"['12', '14', '16']","['lambda x: (2 * x) + 2', 'lambda x: (1 * x) + 4', 'lambda x: (2 * x) * 2']"
text-davinci-003,"4,6,8,10","{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}",True,False,"['12', '14', '16', '18']","['lambda x: (2 * x) + 2', 'lambda x: (x * 2) + 4', 'lambda x: (x * 4) + 0']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}",True,True,"['14', '16', '18', '20']","['lambda x: (2 * x) + 4', 'lambda x: (4 * x) / 2', 'lambda x: (x * x) / 2', 'lambda x: (x * x) - 4']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}",True,False,"['14', '16', '18', '20']","['lambda x: (2 * x) + 4', 'lambda x: (2 * x) + 6', 'lambda x: (x * 2) + 4', 'lambda x: (x * 2) + 6']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}",True,False,"['14', '16', '18', '20']","['lambda x: (x * 2) + 4', 'lambda x: (x * 2) + 6', 'lambda x: (x * 2) + 8', 'lambda x: (x * 2) + 10']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}",True,True,"['14', '16', '18', '20']","['lambda x: (1 * x) + 6', 'lambda x: (2 * x) + 4', 'lambda x: (3 * x) + 0']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}",True,True,"['14', '16', '18', '20']","['lambda x: (x * 2) + 4', 'lambda x: (x * 4) / 2', 'lambda x: (x * 1) + 6']"
text-davinci-003,"6,8,10,12","{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}",True,False,"['14', '16', '18', '20']","['lambda x: (2 * x) + 6', 'lambda x: (4 * x) + 2', 'lambda x: (6 * x) - 2']"
text-davinci-003,"0,2,4,6","{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}",True,True,"['8', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44', '46', '48', '50', '52', '54', '56', '58', '60', '62', '64', '66', '68', '70', '72', '74', '76', '78', '80', '82', '84', '86', '88', '90', '92', '94', '96', '98', '100']","['lambda x: (2 * x) + 0', 'lambda x: (2 * x) * 1', 'lambda x: (2 * x) ** 1', 'lambda x: (2 * x) / 1']"
text-davinci-003,"0,2,4,6","{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}",True,True,"['8', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44', '46', '48', '50', '52', '54', '56', '58', '60', '62', '64', '66', '68', '70', '72', '74', '76', '78', '80', '82', '84', '86', '88', '90', '92', '94', '96', '98', '100']","['lambda x: (2 * x) + 0', 'lambda x: (2 * x) ** 2', 'lambda x: (2 * x) | 0']"
text-davinci-003,"0,2,4,6","{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}",True,False,"['8', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44', '46', '48', '50']","['lambda x: (2 * x) ** 0', 'lambda x: (2 * x) | 0', 'lambda x: (2 * x) + 0']"
text-davinci-003,"0,2,4,6","{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}",True,False,"['8', '10', '12', '14', '16', '18', '20', 'etc.']","['lambda x: (2 * x)', 'lambda x: (x + 2)', 'lambda x: (x * 2)']"
text-davinci-003,"1,4,16,64","{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}",True,False,"['128', '256', '512', '1024']","['lambda x: (x ** 2) % (1+1)', 'lambda x: (x ** 4) % (1+1)', 'lambda x: (x * 4) % (1+1)', 'lambda x: (x * 16) % (1+1)']"
text-davinci-003,"1,4,16,64","{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}",True,False,"['128', '256', '512']","['lambda x: 2**x', 'lambda x: 4**(x-1)', 'lambda x: 4 * (x**2)', 'lambda x: (x**4) - (x**3) + (x**2) - x + 1']"
text-davinci-003,"16,64,256,1024","{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}",True,True,"['2048', '4096', '8192', '16384']","['lambda x: 2 ** (4 * x)', 'lambda x: 4 ** (2 * x)', 'lambda x: 4 * (4 ** x)', 'lambda x: 4 * (2 ** (2 * x))']"
text-davinci-003,"3,7,11,15","{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}",False,False,"['17', '21', '25', '29']","['lambda x: (4 * x) + 1', 'lambda x: (4 * x) - 2', 'lambda x: (4 * x) ** 1']"
text-davinci-003,"3,7,11,15","{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}",False,False,"['17', '19', '21', '23', '25']","['lambda x: (2 * x) + 1', 'lambda x: (4 * x) - 1', 'lambda x: (4 * x) + 3']"
text-davinci-003,"3,7,11,15","{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}",True,True,"['17', '21', '25']","['lambda x: (2 * x) + 1', 'lambda x: (4 * x) + 3', 'lambda x: (x * 5) + 3']"
text-davinci-003,"1,5,9,13","{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}",True,False,"['17', '21', '25', '29']","['lambda x: (2 * x) + 1', 'lambda x: (4 * x) - 3', 'lambda x: (x * 4) - 3']"
text-davinci-003,"1,5,9,13","{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}",True,False,"['17', '21', '25', '29']","['lambda x: 2 * x + 1', 'lambda x: 4 * x - 3', 'lambda x: 4 * x + 1']"
text-davinci-003,"5,9,13,17","{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}",True,False,"['21', '25', '29', '33']","['lambda x: (2 * x) + 3', 'lambda x: (4 * x) - 2', 'lambda x: (4 * x) + 1']"
text-davinci-003,"9,13,17,21","{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}",True,False,"['25', '29', '33', '37']","['lambda x: (x * 4) + 5', 'lambda x: (x * 4) + 9', 'lambda x: (x * 4) + 13', 'lambda x: (x * 4) + 17']"
text-davinci-003,"13,17,21,25","{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}",True,False,"['27', '29', '31']","['lambda x: (4 * x) + 9', 'lambda x: (x * 4) + 5', 'lambda x: (x * 4) + 9', 'lambda x: (x * 4) + 13']"
text-davinci-003,"13,17,21,25","{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}",True,True,"['27', '29', '31']","['lambda x: 4 * x + 9', 'lambda x: (x + 4) ** 2 - 3', 'lambda x: (x + 4) ** 2 - 1']"
text-davinci-003,"0,1,0,1","{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}",True,False,"['0', '1']","['lambda x: x % 2', 'lambda x: (x // 2) % 2', 'lambda x: (x + 1) % 2', 'lambda x: (x + 2) % 2']"
text-davinci-003,"0,1,0,1","{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}",False,False,"['0', '1']","['lambda x: (x % 2) * 1', 'lambda x: (2 * (x // 2)) * 1', 'lambda x: (2 * (x // 2)) + (x % 2)']"
text-davinci-003,"7,11,15,19","{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}",True,True,"['23', '27', '31', '35']","['lambda x: (4 * x) + 3', 'lambda x: (4 * x) | 3', 'lambda x: (4 * x) ^ 3', 'lambda x: (4 * x) - 3']"
text-davinci-003,"7,11,15,19","{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}",True,False,"['23', '27', '31', '35']","['lambda x: (2 * x) + 5', 'lambda x: (4 * x) - 2', 'lambda x: (4 * x) + 3']"
text-davinci-003,"11,15,19,23","{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}",True,False,"['27', '31', '35', '39']","['lambda x: (4 * x) + 7', 'lambda x: (4 * x) + 3', 'lambda x: (4 * x) + 11']"
text-davinci-003,"15,19,23,27","{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}",True,False,"['31', '35', '39', '43']","['lambda x: 4 * x + 11', 'lambda x: (x + 3) * 4', 'lambda x: (x * 4) + 3']"
text-davinci-003,"15,19,23,27","{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}",True,False,"['31', '35', '39', '43']","['lambda x: (4 * x) + 11', 'lambda x: (4 * x) + 15', 'lambda x: (4 * x) + 19', 'lambda x: (4 * x) + 23']"
