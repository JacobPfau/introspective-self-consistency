[2023-05-17 17:03:13,679][src.utils][INFO] - Git sha: fd5e59f5d30e2ae6f6803e7a4226ac79cb0492bd
[2023-05-17 17:03:13,690][src.utils][INFO] - Changed files: ['conf/tasks/compute_dependence_with_base_changes.yaml', 'src/evals/check_self_consistency.py', 'src/evals/evaluate_continuation.py', 'src/evals/evaluate_explanation.py', 'src/evals/sequence_completion_with_base_change.py']
[2023-05-17 17:03:13,702][src.utils][INFO] - Git diff:
diff --git a/conf/tasks/compute_dependence_with_base_changes.yaml b/conf/tasks/compute_dependence_with_base_changes.yaml
index 25bfb79..d2b79eb 100644
--- a/conf/tasks/compute_dependence_with_base_changes.yaml
+++ b/conf/tasks/compute_dependence_with_base_changes.yaml
@@ -1,4 +1,4 @@
-sequence_type: binary
+sequence_type: integer
 model: gpt-3.5-turbo
 num_shots: 4
 on_ambiguous_sequences: true
diff --git a/src/evals/check_self_consistency.py b/src/evals/check_self_consistency.py
index 7f8465e..6759e93 100644
--- a/src/evals/check_self_consistency.py
+++ b/src/evals/check_self_consistency.py
@@ -3,6 +3,7 @@ from typing import List
 from src.evals.evaluate_continuation import generate_continuation, valid_continuation
 from src.evals.evaluate_explanation import (
     generate_explanation,
+    generate_implied_sequence,
     generate_implied_continuation,
     valid_explanation,
 )
@@ -31,6 +32,7 @@ def self_consistency_evaluation(

     consistent_explanations = 0
     inconsistent_explanations = 0
+    incorrect_explanations = 0
     invalid_responses = 0

     # Generate a prompt
@@ -61,12 +63,15 @@ def self_consistency_evaluation(
             temperature=temperature,
         )

-        if not valid_continuation(continuation):
+        if not valid_continuation(continuation, base):
             print("invalid continuation: ", continuation)
             invalid_responses += 1
             continue
         else:
-            int_response = int(continuation)
+            if base == 2:
+                int_response = int(continuation[2:], 2)
+            elif base == 10:
+                int_response = int(continuation)

         # Generate an explanation
         explanation = generate_explanation(
@@ -89,18 +94,32 @@ def self_consistency_evaluation(
             invalid_responses += 1
             continue
         else:
+            # check if the explanation is valid up to the continuation
+            implied_sequence = generate_implied_sequence(
+                fn_form=fn,
+                offset=offset,
+                sequence_length=len(sequence),
+            )
+
             implied_continuation = generate_implied_continuation(
                 fn_form=fn,
                 offset=offset,
                 sequence_length=len(sequence),
             )
+
+        # Check the explanation is accurate
+        if implied_sequence != sequence:
+            print("implied_sequence: ", implied_sequence)
+            print("sequence: ", sequence)
+            incorrect_explanations += 1
+            continue

         # Check consistency
         print("implied_continuation: ", implied_continuation)
         print("continuation: ", continuation)
-        if int(continuation) == int(implied_continuation):
+        if int_response == int(implied_continuation):
             consistent_explanations += 1
         else:
             inconsistent_explanations += 1

-    return consistent_explanations, inconsistent_explanations, invalid_responses
+    return consistent_explanations, inconsistent_explanations, incorrect_explanations, invalid_responses
diff --git a/src/evals/evaluate_continuation.py b/src/evals/evaluate_continuation.py
index 5b0d593..424f864 100644
--- a/src/evals/evaluate_continuation.py
+++ b/src/evals/evaluate_continuation.py
@@ -10,6 +10,7 @@ from src.models.openai_model import (

 def valid_continuation(
     model_continuation: str,
+    base: int,
 ) -> bool:
     """
     Given a continuation as supplied by the model,
@@ -17,7 +18,12 @@ def valid_continuation(
     """
     try:
         # TODO: Work for arbitrary base continuation
-        int(model_continuation)
+        print("base is: ", base)
+        print("model continuation is: ", model_continuation)
+        if base == 10:
+            int(model_continuation)
+        elif base == 2:
+            int(model_continuation[2:], 2)
     except ValueError:
         return False
     else:
diff --git a/src/evals/evaluate_explanation.py b/src/evals/evaluate_explanation.py
index 24be9f8..d2b7ad4 100644
--- a/src/evals/evaluate_explanation.py
+++ b/src/evals/evaluate_explanation.py
@@ -80,6 +80,17 @@ def generate_explanation(

     return model_response

+def generate_implied_sequence(
+    fn_form: str,
+    offset: int,
+    sequence_length: int,
+) -> List[int]:
+    """
+    Given a function form and an offset as supplied by the model,
+    generate the sequence.
+    """
+    return [eval(fn_form)(i + offset) for i in range(sequence_length)]
+

 def generate_implied_continuation(
     fn_form: str,
@@ -91,3 +102,4 @@ def generate_implied_continuation(
     generate the next element of the sequence.
     """
     return eval(fn_form)(offset + sequence_length)
+
diff --git a/src/evals/sequence_completion_with_base_change.py b/src/evals/sequence_completion_with_base_change.py
index f45c82c..519609e 100644
--- a/src/evals/sequence_completion_with_base_change.py
+++ b/src/evals/sequence_completion_with_base_change.py
@@ -43,6 +43,7 @@ def evaluate_compute_dependence_with_base_changes(
                     (
                         consistent_explanations,
                         inconsistent_explanations,
+                        incorrect_explanations,
                         invalid_explanations,
                     ) = self_consistency_evaluation(
                         model_name=model,
@@ -61,11 +62,13 @@ def evaluate_compute_dependence_with_base_changes(
                     if sequence in results:
                         results[sequence]["consistent"] += consistent_explanations
                         results[sequence]["inconsistent"] += inconsistent_explanations
+                        results[sequence]["incorrect"] += incorrect_explanations
                         results[sequence]["invalid"] += invalid_explanations
                     else:
                         results[sequence] = {
                             "consistent": consistent_explanations,
                             "inconsistent": inconsistent_explanations,
+                            "incorrect": incorrect_explanations,
                             "invalid": invalid_explanations,
                         }
                     break
