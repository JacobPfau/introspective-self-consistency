[2023-05-17 16:51:13,469][src.utils][INFO] - Git sha: fd5e59f5d30e2ae6f6803e7a4226ac79cb0492bd
[2023-05-17 16:51:13,479][src.utils][INFO] - Changed files: ['src/evals/check_self_consistency.py', 'src/evals/evaluate_continuation.py']
[2023-05-17 16:51:13,488][src.utils][INFO] - Git diff:
diff --git a/src/evals/check_self_consistency.py b/src/evals/check_self_consistency.py
index 7f8465e..1ac186c 100644
--- a/src/evals/check_self_consistency.py
+++ b/src/evals/check_self_consistency.py
@@ -61,12 +61,15 @@ def self_consistency_evaluation(
             temperature=temperature,
         )

-        if not valid_continuation(continuation):
+        if not valid_continuation(continuation, base):
             print("invalid continuation: ", continuation)
             invalid_responses += 1
             continue
         else:
-            int_response = int(continuation)
+            if base == 2:
+                int_response = int(continuation[2:], 2)
+            elif base == 10:
+                int_response = int(continuation)

         # Generate an explanation
         explanation = generate_explanation(
@@ -98,7 +101,7 @@ def self_consistency_evaluation(
         # Check consistency
         print("implied_continuation: ", implied_continuation)
         print("continuation: ", continuation)
-        if int(continuation) == int(implied_continuation):
+        if int_response == int(implied_continuation):
             consistent_explanations += 1
         else:
             inconsistent_explanations += 1
diff --git a/src/evals/evaluate_continuation.py b/src/evals/evaluate_continuation.py
index 5b0d593..424f864 100644
--- a/src/evals/evaluate_continuation.py
+++ b/src/evals/evaluate_continuation.py
@@ -10,6 +10,7 @@ from src.models.openai_model import (

 def valid_continuation(
     model_continuation: str,
+    base: int,
 ) -> bool:
     """
     Given a continuation as supplied by the model,
@@ -17,7 +18,12 @@ def valid_continuation(
     """
     try:
         # TODO: Work for arbitrary base continuation
-        int(model_continuation)
+        print("base is: ", base)
+        print("model continuation is: ", model_continuation)
+        if base == 10:
+            int(model_continuation)
+        elif base == 2:
+            int(model_continuation[2:], 2)
     except ValueError:
         return False
     else:
