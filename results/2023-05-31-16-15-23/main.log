[2023-05-31 16:15:23,374][src.utils][INFO] - Git sha: e8df89ca92e6810dc51d4081677709fb8546754b
[2023-05-31 16:15:23,385][src.utils][INFO] - Changed files: ['src/evals/sequence_completion_with_base_change.py']
[2023-05-31 16:15:23,394][src.utils][INFO] - Git diff:
diff --git a/src/evals/sequence_completion_with_base_change.py b/src/evals/sequence_completion_with_base_change.py
index 89820f5..0ce0b8e 100644
--- a/src/evals/sequence_completion_with_base_change.py
+++ b/src/evals/sequence_completion_with_base_change.py
@@ -36,14 +36,8 @@ def evaluate_compute_dependence_with_base_changes(
         # Use default parameters for now
         results = {}
         all_data = []
-        ambiguous_sequences = find_ambiguous_integer_sequences(
-            valid_sequence_functions={
-                fn: v
-                for fn, v in sequence_functions.items()
-                if fn
-                != "indexing_criteria_progression"  # does not work with base change
-            },
-        )
+        ambiguous_sequences = find_ambiguous_integer_sequences()
+        breakpoint()      
         for sequence in ambiguous_sequences:
             # turn the sequence from a string into a list of integers
             int_sequence = [int(x) for x in sequence.split(",")]
@@ -105,19 +99,10 @@ def evaluate_compute_dependence_with_base_changes(
         incorrect_inconsistent += (
             1 if (not data["correct"] and not data["consistent"]) else 0
         )
-    
-    logger.info(str(correct_consistent))
-    logger.info(str(correct_inconsistent))
-    logger.info(str(incorrect_consistent))
-    logger.info(str(incorrect_inconsistent))
-    logger.info(str(invalid))
-    valid = correct_consistent + correct_inconsistent + incorrect_consistent + incorrect_inconsistent
-    logger.info("valid: " + str(valid))
-
-    correct_consistent_percent = round(correct_consistent / valid, 2) * 100
-    correct_inconsistent_percent = round(correct_inconsistent / valid, 2) * 100
-    incorrect_consistent_percent = round(incorrect_consistent / valid, 2) * 100
-    incorrect_inconsistent_percent = round(incorrect_inconsistent / valid, 2) * 100
+    correct_consistent_percent = round(correct_consistent / total, 2) * 100
+    correct_inconsistent_percent = round(correct_inconsistent / total, 2) * 100
+    incorrect_consistent_percent = round(incorrect_consistent / total, 2) * 100
+    incorrect_inconsistent_percent = round(incorrect_inconsistent / total, 2) * 100
 
     # Save the results
     results = [
@@ -126,7 +111,7 @@ def evaluate_compute_dependence_with_base_changes(
             "sequence_type": sequence_type,
             "total sequences": total,
             "invalid sequences": invalid,
-            "valid sequences": valid,
+            "valid sequences": total - invalid,
             "correct_consistent": correct_consistent_percent,
             "correct_inconsistent": correct_inconsistent_percent,
             "incorrect_consistent": incorrect_consistent_percent,
[2023-05-31 16:15:23,394][src.utils][INFO] - Changed directory to /Users/olejorgensen/Documents/AISC/introspective-self-consistency/results/2023-05-31-16-15-23/evaluate_compute_dependence_with_base_changes
[2023-05-31 17:08:09,391][__main__][ERROR] - 
Traceback (most recent call last):
  File "/Users/olejorgensen/Documents/AISC/introspective-self-consistency/src/utils.py", line 58, in decorated
    return func(*args, **kwargs)
  File "/Users/olejorgensen/Documents/AISC/introspective-self-consistency/main.py", line 36, in main
    evaluate_compute_dependence_with_base_changes(
  File "/Users/olejorgensen/Documents/AISC/introspective-self-consistency/src/utils.py", line 42, in wrapped
    return func(*args, **kwargs)
  File "/Users/olejorgensen/Documents/AISC/introspective-self-consistency/src/evals/sequence_completion_with_base_change.py", line 41, in evaluate_compute_dependence_with_base_changes
    for sequence in ambiguous_sequences:
  File "/Users/olejorgensen/Documents/AISC/introspective-self-consistency/src/evals/sequence_completion_with_base_change.py", line 41, in evaluate_compute_dependence_with_base_changes
    for sequence in ambiguous_sequences:
  File "/Users/olejorgensen/miniconda3/envs/aisc-env2/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/Users/olejorgensen/miniconda3/envs/aisc-env2/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
