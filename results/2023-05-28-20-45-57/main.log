[2023-05-28 20:45:57,430][src.utils][INFO] - Git sha: a178fc0f18e5c319b2b1ee5acf1047cf2a8842b3
[2023-05-28 20:45:57,458][src.utils][INFO] - Changed files: ['src/evals/sequence_completion_with_base_change.py']
[2023-05-28 20:45:57,472][src.utils][INFO] - Git diff:
diff --git a/src/evals/sequence_completion_with_base_change.py b/src/evals/sequence_completion_with_base_change.py
index 24f2112..2faf54d 100644
--- a/src/evals/sequence_completion_with_base_change.py
+++ b/src/evals/sequence_completion_with_base_change.py
@@ -1,3 +1,6 @@
+import json
+import logging
+
 from src.evals.check_self_consistency import self_consistency_evaluation
 from src.pipelines.sequence_completions import (
     find_ambiguous_integer_sequences,
@@ -5,6 +8,7 @@ from src.pipelines.sequence_completions import (
 )
 from src.utils import reformat_self_consistency_results

+logger = logging.getLogger(__name__)

 def evaluate_compute_dependence_with_base_changes(
     sequence_type: str,
@@ -38,11 +42,11 @@ def evaluate_compute_dependence_with_base_changes(
             # turn the sequence from a string into a list of integers
             int_sequence = [int(x) for x in sequence.split(",")]
             total += 1
-            print("Total: ", total)
-            print(f"Sequence: {sequence}")
+            logger.info("Total: ", total)
+            logger.info(f"Sequence: {sequence}")
             for _ in range(2):
                 try:
-                    print("base be: ", base)
+                    logger.info("base be: ", base)
                     (
                         correct_consistent_explanations,
                         correct_inconsistent_explanations,
@@ -60,8 +64,8 @@ def evaluate_compute_dependence_with_base_changes(
                         samples=num_samples,
                     )
                 except Exception as e:
-                    print("oopies")
-                    print(e)
+                    logger.info("oopies")
+                    logger.info(e)
                 else:
                     if sequence in results:
                         results[sequence][
@@ -90,33 +94,13 @@ def evaluate_compute_dependence_with_base_changes(
             pass
             # TODO: have support for general base sequences here

-    print(total)
+    logger.info(total)

     # Reformat results
     results = reformat_self_consistency_results(results)

     # Save the results
-    import datetime
-    import json
-    import os
-
-    now = datetime.datetime.now()
-    now_str = now.strftime("%Y-%m-%d-%H-%M-%S")
-    results_dir = os.path.join(
-        "../results/q1.1",
-        f"{now_str}",
-    )
-    if not os.path.exists(results_dir):
-        os.makedirs(results_dir)
-    results_path = os.path.join(results_dir, "results.json")
-    with open(results_path, "w") as f:
+    with open("results.json", "w") as f:
         json.dump(results, f)

-    # Save command line arguments
-    # args_path = os.path.join(results_dir, "args.json")
-    # args_dict = vars(args)
-    # args_dict["sequence_functions"] = all_sequence_functions
-    # with open(args_path, "w") as f:
-    #     json.dump(args_dict, f)
-
-    print(f"Results saved to {results_path}")
+    logger.info("Results saved to results.json")
[2023-05-28 20:45:57,473][src.utils][INFO] - Changed directory to /Users/olejorgensen/Documents/AISC/introspective-self-consistency/results/2023-05-28-20-45-57/evaluate_string_transformation_equality
[2023-05-28 20:45:57,473][src.evals.string_transformation][INFO] - Evaluating string transformation equality...
