original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) | 0,5,True,Y,5,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (x * 1) + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (x // 2) * 5 + (x % 2) * 3,10,False,Y,10,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x] + 4,10,False,Y,10,False
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 if x % 2 == 0 else 2) * (x + 3 - (x // 2)),10,False,Y,11,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 2) or i % (2 + 2) or i % (3 + 2)][x],10,False,Y,8,True
"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x * 1) + 2,7,True,Y,7,True
"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (3 + x) ** 1,7,True,Y,7,True
"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (4 - 1) or i % (2 + 1)][x],7,False,Y,7,False
"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x + 0,4,True,Y,4,True
"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 1) % (4+1),4,True,Y,4,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x + 4) * 1,8,True,Y,8,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) + 5,15,True,Y,15,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x] * 2 + 1,9,False,Y,9,False
"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) % (4+1),12,False,Y,12,False
"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x if x > 0 else 0,12,True,Y,12,True
"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 3) % (4*3),12,False,Y,12,False
"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (3 * x) | 0,12,True,Y,12,True
"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) * 1,15,True,Y,15,True
"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x + 1) * 3,15,True,Y,15,True
"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (1 * x) * 3,18,True,Y,18,True
"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (x * 3) + 6,18,True,Y,18,True
"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (x * 3) + 6,21,True,Y,21,True
"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) | 0,10,True,Y,10,True
"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: 2 * x % (8+1),8,True,Y,8,True
"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x),16,True,Y,16,True
"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1.5,16,False,Y,16.0,False
"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) % (1+4),16,False,Y,16,False
"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 4) % (4+1),16,False,N,16,False
"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (x * 4) + 4,20,True,Y,20,True
"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) + 4,20,False,Y,20,False
"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x * 4) + 0,20,True,Y,20,True
"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (6 * x) + 0,30,True,Y,30,True
"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (x * 3) + 6,36,False,Y,36,False
"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (x + 1) * 6,36,True,N,36,True
"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: 6 * (x + 2),42,True,Y,42,True
"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: 6 * (x + 2),42,True,Y,42,True
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: x + (x // 2),7,False,Y,7,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (1 if x < 2 else 2 if x < 3 else 4 if x < 4 else 5),7,False,Y,There is no next number in the sequence as the function is defined only for x values up to 4.,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * fn(fn,x-1) + (x % 2) + 1)",8,False,Y,11,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (x + 1) ^ 3 % 11,8,False,N,10,False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (3 + 1) and i % (2 + 1) and i % (1 + 1)][x] + 5,11,False,Y,"12 (Note: this function is generating the sequence of numbers that are not divisible by 2, 3, or 4, and then adding 5 to each number in the sequence.)",False
"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (x ** 2 + 3) // 2 if x % 2 == 1 else (x ** 2 + 4) // 2,11,False,Y,14,False
"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,Y,256,True
"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 4 * fn(fn,x-1))",256,True,Y,256,True
"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,Y,4096,True
"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** x,4096,True,Y,4096,True
"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2),0,True,Y,0,True
"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % 2,0,True,Y,0,True
"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,Y,0,False
"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 or x==2 else 0)",1,False,Y,1,False
"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: 7 if x % 2 else 3,11,False,Y,3,False
"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2 if x % 2 == 0 else None,18,False,Y,18,False
"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (x * 4) + 2,18,True,Y,18,True
"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (x * 4) + 2,22,True,Y,22,True
"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2),8,False,Y,8,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) and i % (5 + 1) != 0][x],8,False,Y,7,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1) or i % (6 + 1)][x],8,False,Y,7,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 if x % 2 == 0 else 2) * x + (0 if x < 2 else -1),8,False,Y,7,False
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x+1] + x//2,8,False,Y,8,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (1 * x) + 2 if x < 3 else (1 * x) + 3,8,False,N,8,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (1 * x) + (x > 2),8,False,Y,8,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x ** 2 + 1) // 2 if x < 3 else x + 4,8,False,N,11,False
"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + (4 if x == 3 else 0),12,False,Y,10,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 3 else x + 6,12,False,N,10,True
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,False,Y,10,False
"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x ** 2) + 5,12,False,N,11,False
"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (1 * x) * 4 + 1,21,True,Y,21,True
"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,Y,25,True
"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,Y,25,True
"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 13,29,True,Y,29,True
"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: 4 * x + 9,29,True,Y,29,True
"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x ** 2 - x) % 3,-1,False,Y,1,False
"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:0 if x==0 or x==3 else x-1)",-1,False,Y,1,False
"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:0 if x==0 or x==3 else x-1)",-3,False,Y,1,False
"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 if x==1 else 0 if x==2 else 1 if x==3 else fn(fn,x-4))",-2,False,Y,2,False
"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (x + 5) ** 1,9,True,Y,9,True
"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
