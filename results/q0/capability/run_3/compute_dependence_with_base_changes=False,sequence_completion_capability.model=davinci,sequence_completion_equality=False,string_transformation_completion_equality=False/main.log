[2023-06-07 15:46:48,142][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
[2023-06-07 15:46:48,209][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/multirun.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/multirun.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/multirun.yaml', 'src/evals/sequence_completion.py']
[2023-06-07 15:46:48,264][src.utils][INFO] - Git diff:
diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
index bf17cfe..fe33871 100644
--- a/results/q0/analyze_q0_results.ipynb
+++ b/results/q0/analyze_q0_results.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 12,
    "id": "514d264c",
    "metadata": {},
    "outputs": [
@@ -165,7 +165,13 @@
       "                - 0.9056603773584906 precision\n",
       "                - 0.9230769230769231 recall\n",
       "                - 0.9142857142857143 f1\n",
-      "                \n",
+      "                \n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "\n",
       "                For run_1 run davinci including all answers\n",
       "                Evaluated 222 ambiguous sequences of 225 total.\n",
@@ -178,13 +184,7 @@
       "                - 0.05687203791469194 precision\n",
       "                - 1.0 recall\n",
       "                - 0.10762331838565023 f1\n",
-      "                \n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
+      "                \n",
       "\n",
       "                For run_2 run davinci including all answers\n",
       "                Evaluated 220 ambiguous sequences of 225 total.\n",
@@ -335,126 +335,14 @@
     "import numpy as np\n",
     "from sklearn import metrics\n",
     "import pandas as pd\n",
+    "\n",
     "models = [\n",
     "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
     "]\n",
     "runs = [\n",
     "    'run_1', 'run_2', 'run_3'\n",
     "]\n",
-    "total_sequences = 225\n",
-    "results = []\n",
-    "for answer_validity in ['valid', 'all']:\n",
-    "    for model in models:\n",
-    "        for run in runs:\n",
-    "            df = pd.read_csv(\n",
-    "                    f'./{run}/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
-    "            )\n",
-    "            \n",
-    "            match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (\n",
-    "                [],\n",
-    "                [],\n",
-    "                [],\n",
-    "                [],\n",
-    "                []\n",
-    "            )\n",
-    "            match_accs_self_consistent = []\n",
-    "            \n",
-    "\n",
-    "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and  data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False:\n",
-    "                    continue\n",
-    "                match_accs.append(1 if data[\"generated_completion_matches\"] == True else 0)\n",
-    "                match_accs_self_consistent.append(1\n",
-    "                        if data[\"model_self_consistency_evaluation\"].strip() == \"Y\"\n",
-    "                        else 0)\n",
-    "\n",
-    "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and data[\"model_completion_matches\"] is not True and data[\"model_completion_matches\"] is not False:\n",
-    "                    continue\n",
-    "                model_match_accs.append(1 if data[\"model_completion_matches\"] == True else 0)\n",
-    "\n",
-    "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and data[\"model_self_consistency_evaluation\"].strip() != \"Y\" and data[\"model_self_consistency_evaluation\"].strip() != \"N\":\n",
-    "                    continue\n",
-    "                model_consistency_accs.append(\n",
-    "                    1 if data[\"model_self_consistency_evaluation\"].strip() == \"Y\" else 0\n",
-    "                )\n",
-    "\n",
-    "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and data[\"model_self_consistency_evaluation\"].strip() != \"Y\" and data[\"model_self_consistency_evaluation\"].strip() != \"N\":\n",
-    "                    continue\n",
-    "                if answer_validity == 'valid' and  data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False:\n",
-    "                    continue\n",
-    "                if data[\"generated_completion_matches\"]:\n",
-    "                    consistent_and_matched_positive.append(\n",
-    "                        1\n",
-    "                        if data[\"model_self_consistency_evaluation\"].strip() == \"Y\"\n",
-    "                        else 0\n",
-    "                    )\n",
-    "                else:\n",
-    "                    consistent_and_matched_negative.append(\n",
-    "                        1\n",
-    "                        if data[\"model_self_consistency_evaluation\"].strip() == \"N\"\n",
-    "                        else 0\n",
-    "                    )\n",
-    "                    \n",
-    "\n",
-    "\n",
-    "            ground_truth_consistent = np.mean(match_accs)\n",
-    "            self_rule_following_consistency = np.mean(model_match_accs)\n",
-    "            self_comparison_consistency = np.mean(model_consistency_accs)\n",
-    "            consistent_and_matched_positive_acc = np.mean(consistent_and_matched_positive)\n",
-    "            consistent_and_matched_negative_acc = np.mean(consistent_and_matched_negative)\n",
-    "            self_consistency_precision = metrics.precision_score(match_accs, match_accs_self_consistent)\n",
-    "            self_consistency_recall = metrics.recall_score(match_accs, match_accs_self_consistent)\n",
-    "            self_consistency_f1 = metrics.f1_score(match_accs, match_accs_self_consistent)\n",
-    "            print(\n",
-    "                f\"\"\"\n",
-    "                For {run} run {model} including {answer_validity} answers\n",
-    "                Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-    "                Resulting in:\n",
-    "                - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-    "                - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-    "                - {self_comparison_consistency}% self-comparison-consistency (using {len(model_consistency_accs)})\n",
-    "                - {consistent_and_matched_positive_acc}% self-comparison-consistency==Y and ground-truth-consistent. (using {len(consistent_and_matched_positive)})\n",
-    "                - {consistent_and_matched_negative_acc}% self-comparison-consistency==N and not ground-truth-consistent. (using {len(consistent_and_matched_negative)})\n",
-    "                - {self_consistency_precision} precision\n",
-    "                - {self_consistency_recall} recall\n",
-    "                - {self_consistency_f1} f1\n",
-    "                \"\"\"\n",
-    "            )\n",
-    "            \n",
     "\n",
-    "\n",
-    "            results.append({\n",
-    "                \"model\": model,\n",
-    "                \"run\": run,\n",
-    "                \"answer_validity\": answer_validity,\n",
-    "                \"ground_truth_consistent\": round(ground_truth_consistent * 100, 2),\n",
-    "                \"ground_truth_consistent_num\": len(match_accs),\n",
-    "                \"self_rule_following_consistency\":  round(self_rule_following_consistency * 100, 2), \n",
-    "                \"self_rule_following_consistency_len\": len(model_match_accs),\n",
-    "                \"self_comparison_consistency\": round(self_comparison_consistency * 100, 2),\n",
-    "                \"self_comparison_consistency_len\": len(model_consistency_accs),\n",
-    "                \"consistent_and_matched_positive\": round(consistent_and_matched_positive_acc * 100, 2),\n",
-    "                \"consistent_and_matched_positive_len\": len(consistent_and_matched_positive),\n",
-    "                \"consistent_and_matched_negative\": round(consistent_and_matched_negative_acc * 100, 2),\n",
-    "                \"consistent_and_matched_negative_len\": len(consistent_and_matched_negative),\n",
-    "                \"self_consistency_precision\": self_consistency_precision,\n",
-    "                \"self_consistency_recall\": self_consistency_recall,\n",
-    "                \"self_consistency_f1\": self_consistency_f1,\n",
-    "            })\n",
-    "\n",
-    "pd.DataFrame(results).to_csv('./q0_results.csv')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "c2e8e06f",
-   "metadata": {},
-   "outputs": [],
-   "source": [
     "consistent_functions = []\n",
     "for model in models:\n",
     "    df = pd.read_csv(\n",
@@ -471,34 +359,112 @@
     "    consistent_functions\n",
     ").to_csv('./consistent_functions_by_model.csv')\n",
     "            \n",
-    "    "
+    "   "
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
-   "id": "97c37b8e",
+   "execution_count": null,
+   "id": "cecb5232",
    "metadata": {},
    "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "c2e8e06f",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "id": "0b316fb2",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'model': 'davinci', 'run': 'run_1', 'rule_matches_sequence': 8.53, 'completion_is_correct': 34.88, 'len_completed': 129}\n",
+      "{'model': 'davinci', 'run': 'run_2', 'rule_matches_sequence': 14.29, 'completion_is_correct': 37.59, 'len_completed': 133}\n",
+      "{'model': 'gpt-3.5-turbo', 'run': 'run_1', 'rule_matches_sequence': 40.77, 'completion_is_correct': 80.0, 'len_completed': 130}\n",
+      "{'model': 'gpt-3.5-turbo', 'run': 'run_2', 'rule_matches_sequence': 53.28, 'completion_is_correct': 83.61, 'len_completed': 122}\n",
+      "{'model': 'gpt-4-0314', 'run': 'run_1', 'rule_matches_sequence': 61.11, 'completion_is_correct': 85.71, 'len_completed': 126}\n",
+      "{'model': 'gpt-4-0314', 'run': 'run_2', 'rule_matches_sequence': 64.29, 'completion_is_correct': 81.75, 'len_completed': 126}\n",
+      "{'model': 'text-davinci-003', 'run': 'run_1', 'rule_matches_sequence': 47.06, 'completion_is_correct': 67.65, 'len_completed': 136}\n",
+      "{'model': 'text-davinci-003', 'run': 'run_2', 'rule_matches_sequence': 37.31, 'completion_is_correct': 71.64, 'len_completed': 134}\n"
+     ]
+    }
+   ],
    "source": [
-    "consistent_functions = []\n",
+    "import numpy as np\n",
+    "from sklearn import metrics\n",
+    "import pandas as pd\n",
+    "models = [\n",
+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
+    "]\n",
+    "runs = [\n",
+    "    'run_1', 'run_2'\n",
+    "]\n",
+    "total_sequences = 139\n",
+    "results = []\n",
     "for model in models:\n",
-    "    df = pd.read_csv(\n",
-    "            f'./run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
-    "    )\n",
-    "    for i, data in df.iterrows():\n",
-    "        if data[\"generated_completion_matches\"] is True:\n",
-    "            consistent_functions.append({\n",
-    "                \"fn\": data['original_function'],\n",
-    "                \"model\": model\n",
-    "            })\n",
-    "            \n",
-    "pd.DataFrame(\n",
-    "    consistent_functions\n",
-    ").to_csv('./consistent_functions_by_model.csv')\n",
-    "            \n",
-    "    "
+    "    for run in runs:\n",
+    "        df = pd.read_csv(\n",
+    "                f'./capability/{run}/compute_dependence_with_base_changes=False,sequence_completion_capability.model={model},sequence_completion_equality=False,string_transformation_completion_equality=False/evaluate_sequence_completion_capability/sequence_completion_capability_evaluation_{model}.csv'\n",
+    "        )\n",
+    "\n",
+    "        rule_accs, completion_accs = [], []\n",
+    "\n",
+    "\n",
+    "        for i, data in df.iterrows():\n",
+    "            rule_accs.append(1 if data[\"generated_rule_matches\"] == True else 0)\n",
+    "            completion_accs.append(1\n",
+    "                    if data[\"generated_completion_matches\"] == True\n",
+    "                    else 0)\n",
+    "\n",
+    "        result = {\n",
+    "            \"model\": model,\n",
+    "            \"run\": run,\n",
+    "            \"rule_matches_sequence\": round(np.mean(rule_accs) * 100, 2),\n",
+    "            \"completion_is_correct\": round(np.mean(completion_accs) * 100, 2),\n",
+    "            \"len_completed\": len(df)\n",
+    "        }\n",
+    "        print(result)\n",
+    "        results.append(result)\n",
+    "\n",
+    "pd.DataFrame(results).to_csv('./q0_capability_results.csv')"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "id": "aa00df76",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\u001b[1m\u001b[36mevaluate_sequence_completion_capability\u001b[m\u001b[m/\r\n",
+      "main.log\r\n"
+     ]
+    }
+   ],
+   "source": [
+    "ls ./capability/run_1/compute_dependence_with_base_changes=False,sequence_completion_capability.model=davinci,sequence_completion_equality=False,string_transformation_completion_equality=False"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "030b95ec",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 6e83134..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index cba553a..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),5,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) | (2 * x) | (3 * x) | (4 * x),5,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) ** (1 + x),6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),6,,Y,3,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x * 2) % (3+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (4 + 1)][x],5,False,Y,5,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],6,False,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (x * 2) + 1,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) * (x + 1),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (3 * x) | (2 * x),6,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) * (2 + 1),7,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + (1 * x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (3 * x) * 1,10,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (2 * x) + 2,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 0,7,False,Y,3,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (1+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) ** 0,6,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) + (x * 3),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) | (x * 3),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1+1),6,,Y,8,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 0)",7,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (3 * x) | (4 * x) | (5 * x) | (6 * x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) + (1 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + (2 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (4 * x) ** 2,10,,Y,27,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],7,True,Y,8,False
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],7,True,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (2 * x) | 3,10,,Y,8,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 2) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (x * 2) % (1+1),6,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (2 * x) * 0,4,,N,0,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],5,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) | 1,10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (1 * x) | (3 * x),11,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),11,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (3 * x) | 3,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (1 * x) ** 2,12,,Y,16,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (3 * x) + (3 * x),12,,Y,15,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (1 * x) | 1,15,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (4 * x) + 1,15,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,17,False,Y,14,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) | 0,13,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) * (2 * x),15,,Y,22,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + (3 * x),14,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) | (2 * x),21,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (x * 2) % (3+1),21,,Y,15,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 1)",17,,Y,42,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (5 * x) + 1,21,,Y,17,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) | (x * 3),17,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + (x * 2),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (x * 2) % (7+1),9,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (5 * x) * (1 + x),8,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],12,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) % (1+1),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (2 * x) ** 3,11,,Y,24,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (1 * x) ** 2,10,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (1 * x) | 0,8,False,Y,8,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x * 2) % (2+1),16,,Y,4,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) | (2 * x),10,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: [i for i in range(100) if i % (8 + 1) or i % (4 + 1)][x],14,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + (4 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) ** 2,10,,Y,16,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + (x * 1),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 1,12,True,Y,16,False
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (1 * x) + (2 * x),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + (1 + x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (3 * x) + 1,12,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) | 4,14,,Y,14,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) | (2 * x + 1),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + (x * 2),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 1,18,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) * (2 * x),14,,Y,24,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),16,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (3 * x) | 3,15,,N,10,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],11,,Y,3,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) + 1,16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (2 * x) * (2 * x),16,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) | 0,20,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (1 * x) * (2 + 1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + (8 * x) + (12 * x) + (16 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) * 2,32,False,Y,32,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (1 * x) * (1 + x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x * 2) | (x * 3),20,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) * (2 * x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) * (2 + 1),24,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | (x * 2),24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (2 * x) + (3 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) ** (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) | (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),48,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) * 2,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),36,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (1 * x) + (2 * x),32,,Y,28,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (1 * x) ** (1 + (1 * x)),128,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (3 * x) + (2 * x),128,,Y,128,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,512,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 * x) ** (1 / 3),2048,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 * x) ** 2,2048,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",16384,,Y,8192,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (x * 2) | 1,8192,,Y,8192,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,N,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 0 * x * fn(fn,x-1) + 1)",0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (1 * x) | 0,1,,N,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (5 * x) ** 0,0,,N,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (1+1),2,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 4) % (4+1),0,,Y,1,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (x * 2) | (x * 3),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],8,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (2 * x) | 1,3,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) + 1,8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (1 * x) * (1 + x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) * (1+1),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (2 * x) + (1 * x),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],11,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (2 * x) ** 2,10,,Y,19,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) | (2 * x),15,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) | 1,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) % (9+1),10,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 2) % (0+1),12,,Y,7,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 3) % (2+1),12,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 2) % (2+1),0,,Y,3,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) | (2 * x),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 3) % (3+1),12,,Y,0,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * (2 * x),15,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) * (1 + 1),18,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (4 * x) | 3,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (2 * x) * 4,18,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * (1 + (1 * x)),18,,Y,24,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),18,,Y,15,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * (1 + x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (1 * x) * (1 + (x % 2)),21,,Y,18,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (2 * x) + 3,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (2 * x) | (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) | 0,30,False,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) | 2,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (x * 2) % (3+1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (1 * x) | (2 * x),21,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (x * 5) % (3+1),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) | 0,27,False,Y,24,False
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (2 * x) + 0,21,,Y,27,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],27,,Y,27,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x),27,,Y,27,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) * 0,1,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 1) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (2 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x * 2) % (1+1),2,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (1 * x) * (1 + x),0,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",0,,Y,4,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) % (1 + 1),0,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (2 * x) | 0,9,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,,Y,9,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) | (1 + x),20,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 2) + (x * 3),18,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (3 * x) + 1,28,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (2 * x) + (x * 2),33,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) | 0,33,,Y,27,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (x * 2) ** (1/2),33,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (3 * x) ** 2,36,,Y,49,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (x * 2) % (2+1),30,,Y,29,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 + x) * (1 + x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) | (2 * x) | (3 * x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],10,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (1 * x) | 4,9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (2 * x) | 3,6,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 2) | (x * 3),10,,Y,10,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],22,,Y,23,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + (1 if x % 2 else 0),22,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (1 * x) * 1,19,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (x * 3) + 1,36,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,29,False,Y,26,False
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (3 * x) * 1,29,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (1 * x) ** 1,37,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (2 * x) | (1 * x),30,,Y,31,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (1 * x) + (2 * x),31,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (3 * x),18,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) | 1,22,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],26,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + (3 * x),22,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (5 * x) + (1 * x),30,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) | (1 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) * (2 * x),30,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) + (3 * x),32,,Y,30,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) % (1+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 1) % (2+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (1 * x) * (1 + x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (4 * x) | (2 * x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x * 7) % (7+1),15,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + (3 * x),12,,Y,15,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) + 0,24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (x * 2) + (x * 3),24,,Y,30,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,36,False,Y,36,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) * (2 + 1),36,False,Y,36,False
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (3 * x) * 2,36,True,Y,60,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (1 * x) | (2 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 2)",42,,Y,60,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (x * 2) | (x * 3),42,,Y,42,
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 394c1ef..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,336 +0,0 @@
-[2023-06-01 13:29:14,971][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 13:29:14,994][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 13:29:15,015][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 13:29:15,020][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 13:29:15,020][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 14:18:40,061][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 104, in sequence_completion_equality
-    explanation_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 14:18:40,079][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 15:12:01,571][src.evals.sequence_completion][ERROR] - '(' was never closed (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    lambda x: (2 * x) ** (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 +
-                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
-SyntaxError: '(' was never closed
-[2023-06-01 15:12:01,572][src.evals.sequence_completion][WARNING] - '(' was never closed (<string>, line 1)
-[2023-06-01 15:44:04,455][src.evals.sequence_completion][ERROR] - unsupported operand type(s) for *: 'int' and 'function'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: unsupported operand type(s) for *: 'int' and 'function'
-[2023-06-01 15:44:04,456][src.evals.sequence_completion][WARNING] - unsupported operand type(s) for *: 'int' and 'function'
-[2023-06-01 16:14:00,546][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 5.0% ground-truth-consistent
-        - 5.0% self-rule-following-consistency
-        - 95.0% self-comparison-consistency
-        - 5.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 5.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index e5b2f0f..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index a0548fc..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,218 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 + x) | 0,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1) or i % (5 + 1) or i % (6 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x * 1) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x * 1,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x + 0,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: 2 * x + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: 3 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (x * 2) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) % (0+3),8,,N,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x + 1) * 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (x + 2) * 2 if x >= 0 else None,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: 4 if x > 1 else 3,11,,Y,4,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 4) % (0+1),16,,N,"0 (since the function is always returning 0, the sequence will repeat indefinitely)",
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (1 * x) * 4 + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (1 * x) * 4 + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (x * 4) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** x * 1,1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (x + 1),4096,True,N,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x % 2),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x & 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 0 if x==1 else (fn(fn,x-1) + fn(fn,x-2)) % 2)",1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + x)",8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2),8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: x + (x // 2),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (1 * x) + 2 if x % 2 == 0 else (1 * x) + 1,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (x ** 2 + 1) // 2 if x < 3 else x + 4,8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x ** 2 + 1) // 2 if x < 3 else x + 4,8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 3,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1) or i % (0 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (1 + 5) or i % (2 + 5) or i % (3 + 5) or i % (4 + 5)][x] + 5,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 4 if x < 3 else (2 * x) + 3,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 2 else x + 7,10,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x] + 4,12,False,"Y (Note: this function is quite complex and difficult to understand, but it does generate the given sequence.)",10,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x % (9+1),12,False,Y,12,False
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3 * 1,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3 if x < 3 else (x-1) % 3,-1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x % 3) % (2+1),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) % 3,-1,False,N,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else (x+1)%3)",-1,False,Y,2,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 or x==1 or x==3 else (x-1)%3)",-3,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x ** 2 - 3 * x + 2) % 3,0,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1 + 4,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (2 * x) + (x // 2) + 2,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) + (x // 2) + 4,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]","lambda x: [3, 4, 5, 7][x] if x < 4 else 2 * x - 3",10,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else x + 2,11,,N,9,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: 4 * x + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) + 10,26,False,Y,26,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: 4 * x + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: 2 ** (x % 3) + (x // 3),7,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x] + (x // 2),7,True,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x] + [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x] + 2,8,,"Y (Note: This function is very convoluted and difficult to understand, but if you plug in the values of x from the sequence, you will get the corresponding values.)",It is impossible to determine the next number in the sequence as the lambda function is too complex and does not follow a clear pattern.,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + x // 2,8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1)][x] + 5,11,,Y,"12 (Note: this function is quite complex and not easily predictable, so it may be difficult to determine the next number without calculating it directly using the function.)",
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (1 * x) + 5 if x % 2 != 0 else (2 * x) + 4,11,,Y,13,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6 * 2,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (x * 3) + 6,36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 869f897..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,315 +0,0 @@
-[2023-06-01 16:21:30,711][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:21:30,732][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:21:30,749][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:21:30,754][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:21:30,754][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:24:18,663][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:24:18,663][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:24:53,068][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:24:53,068][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:26,282][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:25:26,283][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:29,931][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences. The first three terms form an arithmetic sequence with a common difference of 1, and the fourth term is the sum of the second and third terms. Here's the code:
-                                                                                                                                                                                                                 ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:25:29,931][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:25:32,798][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:25:32,798][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:40,091][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences: {2,3} and {5,6}.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:25:40,092][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:26:47,239][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:26:47,240][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:26:54,513][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:26:54,513][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:28:28,018][src.evals.sequence_completion][INFO] -
-        Evaluated 217 ambiguous sequences of 225 total.
-        Resulting in:
-        - 83.0% ground-truth-consistent
-        - 84.0% self-rule-following-consistency
-        - 94.0% self-comparison-consistency
-        - 81.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index bb08b1c..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index d547c5c..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,211 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: 1 * x,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x + 4) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 2,12,,Y,12,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 4 + (2 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) + 1 if x % 2 == 0 else (2 * x) - 1,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x),16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4 | 4,20,,N,20,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (2 ** x) ** 2,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (x + 1),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,N,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,N,4096,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 2 ** (4 * (x + 1)),4096,,N,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 2 ** (6 + 2 * x),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 ** x) * 16,16384,True,N,16384,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (1+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 5) % (1+1),1,,Y,1,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x] + 2,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],8,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) | 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * (x + 1)),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: 3 * (x + 2),18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 9 + (3 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 4,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x * 1) % (3),3,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,N,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 4 * x + 5,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 1,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 9,29,,N,29,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x + 1],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x] + 3,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,Y,9,False
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 1,27,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: 4 * x + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: 4 * x + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: x + (x // 2) + 1,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: x + (x // 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + 1,11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (1 * x) | 2,11,,N,11,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) * 3,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (6 * x) ** 1,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: 12 + (x * 6),36,True,N,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: 6 * (x + 2),36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: 6 * x + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 0117933..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,416 +0,0 @@
-[2023-06-01 16:28:28,230][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:28:28,250][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:28:28,270][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:28:28,275][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:28:28,275][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:44:15,767][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-01 16:44:15,767][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-01 16:46:01,353][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:46:01,353][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:46:23,863][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:46:23,863][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:46:48,680][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:46:48,680][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:47:17,020][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5 based on the Fibonacci sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:47:17,021][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:47:26,943][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:47:26,944][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:48:30,214][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion earlier. The given sequence does not follow a simple arithmetic or geometric pattern. However, you can generate the sequence using a list or an array. Here's a Python code example:
-                                                                                                                                                                                             ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:48:30,215][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:48:40,811][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion earlier. The given sequence is not an arithmetic or geometric sequence, so it cannot be generated by a simple mathematical formula. However, if you have a specific pattern or rule in mind, please let me know, and I can help you create a code for that.
-      ^^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:48:40,811][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:48:47,202][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:48:47,202][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:48:58,873][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion in my previous response. Here's the correct code for the sequence 5, 6, 7, 9:
-                                                               ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:48:58,873][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:49:14,246][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    The given sequence does not follow a simple arithmetic or geometric pattern. However, we can generate the sequence using a custom function:
-        ^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:49:14,247][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:50:56,504][openai][INFO] - error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
-[2023-06-01 16:50:56,504][src.evals.sequence_completion][ERROR] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 118, in sequence_completion_equality
-    consistency_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 151, in generate_response_with_turns
-    return generate_chat_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 108, in generate_chat_completion
-    response = openai.ChatCompletion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 226, in request
-    resp, got_stream = self._interpret_response(result, stream)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 619, in _interpret_response
-    self._interpret_response_line(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 682, in _interpret_response_line
-    raise self.handle_error_response(
-openai.error.RateLimitError: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-[2023-06-01 16:50:56,506][src.evals.sequence_completion][WARNING] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-[2023-06-01 16:58:04,858][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:58:04,859][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:59:20,480][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a piecewise function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:59:20,480][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:59:59,983][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:59:59,985][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 17:02:06,750][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 17:02:06,750][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 17:02:59,461][src.evals.sequence_completion][INFO] -
-        Evaluated 210 ambiguous sequences of 225 total.
-        Resulting in:
-        - 88.0% ground-truth-consistent
-        - 88.0% self-rule-following-consistency
-        - 81.0% self-comparison-consistency
-        - 71.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index e974e62..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index 6c10467..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x * 1) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x + 1) ** 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | 0,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],5,,N,5,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (x * 1) % (4+1),5,False,Y,0,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (2 * x) + 1,6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,7,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 1) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (1 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x + 3) | 0,7,True,N,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) % (4+1),7,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x * 1,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) * 2,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],11,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 0,13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (2 + 1)][x] + 4,13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: [i for i in range(100) if i % (2 + 1) and i % (3 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (x + 4) % (4+1),8,,Y,0,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) ** 1,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 2,10,,Y,10,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) | 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 2,12,,N,12,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,N,12,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (4 * x) % (4+1),7,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) | 3,3,False,Y,11,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 4),16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) ** 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) * 2,20,,Y,20,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (x * 4) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** (1 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 * x) ** 3,256,,Y,512,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (x * 1),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (2 * x),16384,,Y,16384,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (2 * x),16384,,Y,16384,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (1 * x) % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 4) % 2,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) * 1,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 5) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1) or i % (0 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (x + 1) * (x - 1) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (4 + 1)][x],7,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) * 1 + 1,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x * 3) | 2,8,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + x,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 1) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) | 0,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (3 * x) % (1+1),12,,N,12,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) % (3+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) % (4+1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * (x + 1),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: 3 * (1 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x],1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % (3+1),1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x + 1) % 3,2,True,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],3,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],0,,N,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) * 2 + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (2 * x) + 3,21,False,Y,21,False
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 13,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],10,False,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (5 + 1)][x],10,False,N,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 3) | 1,9,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],9,False,N,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 2) + 1,9,,Y,9,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + 1,19,False,Y,19,False
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + 1,19,False,Y,19,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: 4 * x + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (4 * (x - 1)),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (4 * (x - 1)),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 4 * (x + 1) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (x * 4) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1) or i % (4 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: 2 ** (x - 1) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x * 3) + 1,9,,N,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (x * 2) | 1,9,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) + 5,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 5,11,,Y,12,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) ** 0,24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (6 * x) | 0,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index acb250d..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,266 +0,0 @@
-[2023-06-01 16:14:00,763][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:14:00,786][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:14:00,810][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:14:00,813][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:14:00,814][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:18:02,357][src.evals.sequence_completion][ERROR] - 0.0 cannot be raised to a negative power
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-ZeroDivisionError: 0.0 cannot be raised to a negative power
-[2023-06-01 16:18:02,358][src.evals.sequence_completion][WARNING] - 0.0 cannot be raised to a negative power
-[2023-06-01 16:18:29,789][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:18:29,790][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:19:52,425][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:19:52,425][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:21:30,463][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 69.0% ground-truth-consistent
-        - 71.0% self-rule-following-consistency
-        - 88.0% self-comparison-consistency
-        - 66.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 9.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/multirun.yaml b/results/q0/run_1/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_1/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 864aaeb..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index 73191d6..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,221 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + (2 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) + 1,12,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 2)",10,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x * 2) % (1+1),16,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * (2 * x),10,,Y,16,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | (4 * x),12,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (1 * x) | (2 * x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (1 * x) + (1 * x),12,True,Y,14,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 2,16,,Y,16,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (1 * x) + (2 * x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (1 * x) + (x * 2),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (6 + 1)][x],18,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) ** (1 + 1),14,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) | (x + 1),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) ** (1 + x),18,,Y,24,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 * x) | 0,128,,Y,128,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 2 ** (1 * x),512,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (x * 4) % (4+1),512,,Y,512,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 5 * x * fn(fn,x-1) + 2)",8192,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (2 * x) | 0,16384,,Y,8192,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 2,8192,,Y,16384,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],8,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (2 * x) | 1,8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) % (1+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (1 * x) | (2 * x) | (3 * x) | (5 * x),6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x * 2) | (x * 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) | (2 * x) | (3 * x) | (4 * x),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) * 1,11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (1 + x) * (1 + x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 2) % (3+1),10,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) + (x * 3),12,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) * (1 + x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 2) | (x * 3),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (2 * x) + (3 * x),10,,Y,14,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 2)",7,,Y,24,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + (2 * x),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (3 * x) + (1 * x),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) | 1,6,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + (1 * x),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (2 * x) | (1 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) * (1 + x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 1,10,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (2 * x) ** 1,9,,Y,16,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (4 * x) + (5 * x),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 1,9,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (2 * x) | 3,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) | (x * 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) * (1 + x),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 2,5,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (4 * x) + (1 * x),5,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (3 * x) + 2,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],0,False,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) + (1 * x),4,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 1,5,True,Y,8,False
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1)][x],5,True,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),5,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) * (1 + x),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) * (1 + x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),0,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | (2 * x),5,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) * (2 + 1),5,,Y,6,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) | 1,7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + (1 * x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (x * 2) % (2+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) % (3+1),7,,Y,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (4+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) * (2 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) | 0,6,True,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (x * x) | 1,8,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (x * 2) + (x * 3) + (x * 4),3,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) | (2 * x),6,,Y,6,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 3) % (2+1),21,,Y,3,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],21,,Y,19,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (x * 2) ** (3 * x),26,,Y,35,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (1 * x) * 2,24,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)",33,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) ** 2,33,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 1,36,False,Y,36,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (2 * x) | (1 * x),27,,Y,28,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (5 * x) + (x * 2),9,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x * 2) | (x * 3),10,,Y,10,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (0+1),3,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (0+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (1 * x) | (2 * x),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 2) | (x * 2),2,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (2 * x) | (1 * x),3,,Y,3,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) % (1+1),3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (1+1),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) | 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 5) % (1+1),0,True,N,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) + 1,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 0)",1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 3) % (2+1),0,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 6) % (5+1),0,,N,1,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) | 0,12,,Y,3,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 2) | 0,12,,Y,3,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 2) % (1+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 2) % (0+1),12,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (4+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + (6 * x) + (9 * x) + (12 * x),18,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,18,False
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),18,,Y,15,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) + (2 * x),18,False,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (2 * x) | 1,18,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) ** 2,18,,Y,36,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (2 * x) * (1 + x),18,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) | (2 * x),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (6 * x) + (9 * x) + (12 * x) + (15 * x),18,,Y,30,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) % (4+1),18,,Y,18,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (2 * x) + (3 * x),18,,Y,21,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) ** 2,27,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + (2 * x),21,,Y,27,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],24,,Y,27,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 4)",21,,Y,36,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + (2 * x),24,,Y,27,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (1 * x) ** 2,27,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + (1 * x),12,,Y,12,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,15,False,Y,12,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (x * 2) | (x * 3),12,,Y,11,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (1 * x) | (2 * x),12,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x],11,False,Y,100,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (5 * x) | (x+1),19,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,15,False,Y,14,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) | (3 * x),15,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) % (2+1),15,,Y,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | (3 * x),13,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) + 1,16,False,Y,17,False
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (7 * x) + (9 * x) + (11 * x) + (13 * x),16,,Y,28,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) | 3,16,,Y,15,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) + (2 * x) + 3,16,,Y,17,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) | 2,16,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x],2,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (3 * x) | 1,11,,Y,8,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) ** 2,11,,Y,16,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,11,False,Y,8,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) * (2 * x),18,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) | (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (x * 2) % (1+1),26,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (5 * x) + 3,22,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) | (2 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) + 3,30,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (3 * x) ** 2,42,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (3 * x) + (2 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) ** 2,22,,Y,34,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + (7 * x),21,,Y,22,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + 1,22,,Y,20,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (7 + 1)][x],27,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],26,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (2 * x) * (2 + 1),42,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + (1 + x),33,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (x * 2) ** (1 + 1),30,,Y,45,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (15 * x) * 1,36,,Y,81,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) + 2,4,,Y,4,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 1) % (3+1),4,False,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 3) % (4+1),4,,Y,1,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) | 1,3,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (2 * x) * 0,4,,N,0,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (1 * x) | 3,11,,N,10,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) | (1 + x),11,,Y,10,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (x * 2) | (x * 3),24,,Y,24,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (x * 2) % (0+1),24,,Y,18,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) | (3 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) + 1,30,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) * (3 * x),36,,Y,60,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],42,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (2 * x) * (1 + x),54,,Y,54,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (2 * x) + (3 * x),48,,Y,42,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (2 * x) * (2 * x),10,,Y,16,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (1 * x) + (2 * x) + (3 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 2,9,True,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (3 * x) * (x + 1),10,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x * 2) % (8+1),11,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (2 * x) | (3 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | (x * 2),8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 1,8,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (1 * x) * 0,8,,N,0,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (x * 2) % (0+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (1 * x) * 2,10,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 1) % (2+1),10,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (x * 2) + 1,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x * 2) | 0,11,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) ** 2,12,,Y,25,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) | 1,15,,Y,13,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (5 * x) * 2,16,,Y,20,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (x * 2) % (4+1),20,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) ** 1,16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (x * 2) % (4+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,32,False,Y,32,False
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) + 1,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) * (3 * x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) * (1 + (x % 2)),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) * (2 * x),24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (2 * x) | 4,28,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | 1,32,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (5 * x) | 1,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | 8,32,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (x * 2) % (3+1),36,,Y,28,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) * (2+1),36,,Y,48,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) * 4,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) | (2 * x),36,,Y,28,
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 1f53a35..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,485 +0,0 @@
-[2023-06-01 17:03:03,287][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 17:03:03,308][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 17:03:03,332][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 17:03:03,335][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 17:03:03,335][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 17:54:01,338][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 104, in sequence_completion_equality
-    explanation_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 17:54:01,359][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 18:25:22,590][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 118, in sequence_completion_equality
-    consistency_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 18:25:22,593][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 19:22:59,301][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 129, in sequence_completion_equality
-    model_completion_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 19:22:59,303][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 20:01:38,384][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 20:01:38,386][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 20:07:12,094][src.evals.sequence_completion][ERROR] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-TypeError: <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-[2023-06-01 20:07:12,095][src.evals.sequence_completion][WARNING] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-[2023-06-01 21:12:32,662][src.evals.sequence_completion][INFO] -
-        Evaluated 220 ambiguous sequences of 225 total.
-        Resulting in:
-        - 5.0% ground-truth-consistent
-        - 6.0% self-rule-following-consistency
-        - 97.0% self-comparison-consistency
-        - 4.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 406d739..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index 77a1f8a..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,214 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** (1 * x // 2) if x % 2 == 0 else 0,256,False,Y,256,False
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x - 1),4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x<=1 else fn(fn,x-1) + fn(fn,x-2))",8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2) + (x % 2),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:3 if x==0 else x + fn(fn,x-1) + 0)",8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (1 * x) + 2 if x < 3 else (1 * x) + 3,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1) or i % (2 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 2,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 2 else x + 6,10,,N,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5 if x < 3 else (2 * x) + 3,10,False,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 4 if x < 3 else (2 * x) + 3,12,,Y,12,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x + 3) * 1,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x + 2],7,,Y,7,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 + x),7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (x * 1) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x+1],6,False,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 4 * x + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 13,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x ** 2 - x) % 3,-3,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (2+1),-3,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: [i % 3 for i in range(100)][x],-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 3) % (2+1) if x < 2 else (x - 2) % (2+1),-1,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x ** 2 - 3 * x + 2) % 3,0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]","lambda x: [0, 1][x % 2]",0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:0 if x==0 or x==2 else 1)",0,False,"Y (This is a recursive function that alternates between returning 0 and 1 based on the value of x, and the sequence matches this pattern.)",1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 if x % 2 == 0 else 0),1,True,Y,1,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0 if x >= 0 else None,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x + 1) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) * 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * (x + 1)),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3 * (x - 1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 3 * x + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6 if x >= 0 else None,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (1 * x) * 2 + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3 + 4,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 6) + 6,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x ** 2) + 3 if x % 2 == 0 else (x ** 2) + 1,9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (2 * x) + (x // 2) + 1 if x % 2 else (2 * x) + (x // 2) - 2,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (x // 2) ** 2 + 3 * (x % 2) + 1,10,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x ** 2 - 5 * x + 13) // 2 if x > 2 else x + 2,11,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else (x + 4 if x == 2 else x + 6),8,,N,9,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (4+1),8,,Y,8,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0 if x > 0 else 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (x * 2) + 0 if x > 0 else 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x: x if x < 2 else fn(fn,x-2) + 2)",8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x + 1) + (x // 2),7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + (x // 2) + (x % 2),8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (1 * x) + (x // 2) + (x % 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1) or i % (1 + 1)][x],11,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x // 2) * 3 + 5 + x % 2,11,,Y,12,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) % (100 + 1),16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) % (5+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0 if x <= 3 else None,20,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (x + 1) * 4,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 2947438..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,347 +0,0 @@
-[2023-06-01 21:21:06,121][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:21:06,143][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:21:06,161][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:21:06,165][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:21:06,166][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:22:06,305][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be the Fibonacci sequence with an offset of 1. The code to generate this sequence is:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:06,306][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:22:11,503][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It seems to be a sequence of prime numbers with the exception of the number 1. Therefore, there is no mathematical formula to generate this sequence.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:11,504][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:22:13,870][src.evals.sequence_completion][ERROR] - can only concatenate list (not "int") to list
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-TypeError: can only concatenate list (not "int") to list
-[2023-06-01 21:22:13,870][src.evals.sequence_completion][WARNING] - can only concatenate list (not "int") to list
-[2023-06-01 21:22:30,744][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It does not follow a clear pattern.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:30,745][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:23:57,676][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:23:57,676][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:24:03,029][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:03,029][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:09,840][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:09,840][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-[2023-06-01 21:25:37,924][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:37,924][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:40,685][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:40,685][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:45,184][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-[2023-06-01 21:25:45,184][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-[2023-06-01 21:25:47,139][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:25:47,140][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:25:59,619][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-[2023-06-01 21:25:59,619][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-[2023-06-01 21:26:55,913][src.evals.sequence_completion][INFO] -
-        Evaluated 213 ambiguous sequences of 225 total.
-        Resulting in:
-        - 83.0% ground-truth-consistent
-        - 85.0% self-rule-following-consistency
-        - 96.0% self-comparison-consistency
-        - 82.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index be16d53..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index 2586d88..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,212 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 4 + 2 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 ** x) ** 2,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (4 ** x) * 4,1024,True,N,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 ** x) ** 4,4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 ** (2 * x + 2)) ** 2,4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 64 * (4 ** x),16384,True,N,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (2 * x + 4),16384,True,Y,16384,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if (i % 2 == 0) or (i % 3 == 0)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: x + 2 if x % 2 == 0 else x + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (x * x) - (2 * x) + 3,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],8,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (9 + 1) or i % (5 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (6 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) | 2,7,,N,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) | 4,8,False,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: 3 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | 1,5,,N,5,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: 1 + 4 * x,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) | 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: 4 * x + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: 13 + (4 * x),29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,N,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) | 4,9,,N,9,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 4,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: x % 3,0,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2 == 0,1,True,N,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2 == 0,1,True,N,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: x * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: 3 * (x + 2),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) * 3 + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) | 9,21,,N,21,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: 3 + (2 * x),13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: 2 * x + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: 2 * x - 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,N,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: 4 * x + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: 14 + (4 * x),30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,N,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 1) % (3+1),4,False,Y,0,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 1) % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * (x // 2)) | 3,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: 3 + 4 * (x // 2),11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (1 * x) * 6,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) * 3,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: 6 * (x + 2),36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (1 * x) * 6 + 12,42,True,N,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: 4 + x + (x // 2),10,True,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else x + 2,9,,Y,9,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: x * 2,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: x + (x // 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) | 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x + 1],11,True,Y,11,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) | 4,24,,N,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,N,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 1b2b48f..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,407 +0,0 @@
-[2023-06-01 21:26:56,107][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:26:56,126][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:26:56,142][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:26:56,145][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:26:56,145][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:29:20,828][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a list or a custom function. Here's one way to do it:
-                                                                                                                                                ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:29:20,828][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:29:37,617][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:29:37,618][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:29:54,225][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, if you meant the Fibonacci sequence, which starts with 1, 1, 2, 3, 5, ... then the code would be:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:29:54,226][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:30:09,143][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:30:09,143][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:30:29,292][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:30:29,293][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:30:56,361][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 5, 6, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:30:56,361][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:31:06,167][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a piecewise function that generates the given sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:31:06,167][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:31:32,269][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:31:32,269][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:42:32,985][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:42:32,985][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:42:46,718][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code that generates the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:42:46,718][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:43:01,514][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:43:01,514][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:43:32,713][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a piecewise function that generates the sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:43:32,713][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:44:03,855][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    The given sequence is not an arithmetic or geometric sequence. However, you can generate the sequence using a custom function:
-        ^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:44:03,855][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:46:38,562][openai][INFO] - error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
-[2023-06-01 21:46:38,562][src.evals.sequence_completion][ERROR] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 101, in sequence_completion_equality
-    completion_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 151, in generate_response_with_turns
-    return generate_chat_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 108, in generate_chat_completion
-    response = openai.ChatCompletion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 226, in request
-    resp, got_stream = self._interpret_response(result, stream)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 619, in _interpret_response
-    self._interpret_response_line(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 682, in _interpret_response_line
-    raise self.handle_error_response(
-openai.error.RateLimitError: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-[2023-06-01 21:46:38,564][src.evals.sequence_completion][WARNING] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-[2023-06-01 21:46:50,889][src.evals.sequence_completion][INFO] -
-        Evaluated 211 ambiguous sequences of 225 total.
-        Resulting in:
-        - 87.0% ground-truth-consistent
-        - 87.0% self-rule-following-consistency
-        - 79.0% self-comparison-consistency
-        - 69.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index dcab5ab..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index 94f2129..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) ** 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) and i % (4 + 1)][x],12,,N,12,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * (x + 2),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * (x + 2),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** (x * 2),256,,N,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 4 * x * fn(fn,x-1) + 0)",4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 ** x) * 4,4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 4,16384,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 4,16384,,Y,65536,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],7,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) + 1,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: (x * 1) % (3+1) + 1,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (x + 1) * (x + 2) // 2,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,False,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + 3,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (1 * x) + 2,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],11,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (x * 1) + 4,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)",11,,N,11,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x * 1) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (x + 3) ** 1,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1) or i % (1 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (6 + 1)][x],7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (x + 1) | 4,8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (8 + 1) or i % (3 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x + 1) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (x + 1),5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x + 1) * 2 - 1,6,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 1) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) + 2,6,,Y,6,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 1,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) * 1 + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x + 5) | 0,9,True,N,9,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % (3+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % 3,1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % (3+1),1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 3) ** 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x + 2) % (3 + 1),4,False,Y,0,False
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x + 2) % (3 + 1),3,True,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (1+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) | 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],1,,Y,0,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) ** 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * 3,15,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) ** 1,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) * 3 + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],21,,N,21,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (9 + 1) or i % (7 + 1) or i % (5 + 1) or i % (3 + 1)][x],11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) | 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],9,False,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: 2 * x + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 6,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) | 10,30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],19,,Y,19,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (2 * x) + 13,31,False,Y,31,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],4,,Y,4,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * x + 3) % (2 + 1),11,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],7,,N,11,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) % (0+1),24,,N,24,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) | 0,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (6 * x) * 1,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (6 * x) + 0,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (3 * x) * 2,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (x * 6) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (x * 1) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],9,True,N,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],9,False,N,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 1) + 2,9,False,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (1 * x) | 1,8,,N,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + (x - 1),9,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (2 * x) + (1 * (x - 1)),9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x * 3) % (2 + 1) + 2,12,,Y,11,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (x * 4) % (4+1),16,,N,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) ** 0,16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (x * 4) % (12+1),16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (x * 4) % (4+1),20,,N,20,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) + 4,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 4,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 4 * (x + 1),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 8273241..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,266 +0,0 @@
-[2023-06-01 21:12:32,890][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:12:32,912][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:12:32,933][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:12:32,936][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:12:32,937][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:13:40,724][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:13:40,724][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:16:32,242][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:16:32,242][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:16:34,327][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:16:34,328][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:21:05,813][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 70.0% ground-truth-consistent
-        - 70.0% self-rule-following-consistency
-        - 86.0% self-comparison-consistency
-        - 66.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 9.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/multirun.yaml b/results/q0/run_2/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_2/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index a67bd61..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index 993d350..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,222 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) * (2 * x),24,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 4)",24,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) + 1,36,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) + (2 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (4 * x) * 2,36,,Y,60,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) ** 1,36,,Y,60,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (2 * x) + (1 * x),42,,Y,42,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (5 * x) + (x * 2),54,,Y,42,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) | 0,5,,Y,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (2 * x) * (2 * x),5,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),5,,Y,5,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 3,5,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: 1 ** (2 * x),5,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,5,,Y,5,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),10,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) | (3 * x),5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,6,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x * 3) % (1+1),5,,Y,2,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],6,False,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) + 1,6,,Y,7,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (3+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (3 * x) ** 2,6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (5 * x) ** (1 + x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1 * x),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) + 2,6,,Y,7,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (2 * x) | 1,8,,Y,6,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1 + x),7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (3 * x) | (4 * x),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) | 0,6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (x * 2) | 0,8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (5 * x) * 1,7,,Y,10,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) * (1+1),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (x * 2) % (7+1),8,,Y,4,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (x * 2) % (1+1),7,,Y,4,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (3 * x) + (1 * x),11,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) | (3 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (2 * x) + 1,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 * x) | 3,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (2 * x) ** (1 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (2 * x) + (3 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (2 * x) ** (1/2),12,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) * (x + 1),10,,Y,14,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) | (1 * x),8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x * 2) + 1,9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (2 * x) * 2,11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (2 * x) * (1 + x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],10,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + (2 * x),13,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) % (1+1),9,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (1 + 1)][x],10,False,Y,9,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (2 * x) | 0,1,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (2 * x) * (1 + x),2,,Y,3,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 3) % (2+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) | (x * 3),0,,N,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 2) % (0+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 2) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) * (2 * x),4,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + (2 * x),4,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (1 * x) | 0,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (2 * x) | (x + 1),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (5 + 1)][x],8,False,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (2 * x) * (1 + x),7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (1 * x) + (2 * x),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) * (2 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (2 * x) | (3 * x) | (5 * x) | (6 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) | (3 * x) | (5 * x) | (6 * x),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,0,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (3 * x) ** 2,10,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (3 * x) * 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) | 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) % (1+1),15,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (x * 2) + 1,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) | 0,12,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (3+1),15,,Y,0,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 2) % (1+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 3) | 0,12,True,Y,3,False
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,6,False
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (2 * x) | 3,12,,Y,12,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 2) + 1,18,,Y,15,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) % (2+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (1+1),15,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (1 * x) + (2 * x),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (1 * x) * (1 + (x % 2)),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) * (2 * x),18,,Y,30,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],21,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) | (2 * x),27,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (2 * x) + (3 * x),24,,Y,27,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) * 3,21,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (2 * x) | 3,21,,Y,24,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (x * 2) % (3+1),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (2 * x) + (3 * x),27,,Y,27,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) + (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 2) % (1+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | 0,16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) | (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | (4 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x * 2) % (3+1),24,,Y,8,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (2 * x) * (1 + x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) | 4,20,,Y,20,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) + (1 * x),20,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (1 * x) * (1 + x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (1 + x) * (1 + x),24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (1 * x) + 2,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",32,,Y,256,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | (4 * x),24,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) | 0,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) + (2 * x),28,True,Y,32,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (2 * x) * (2 * x),32,,Y,48,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) | (2 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) ** 2,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (3 * x) * 2,36,,Y,48,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) ** (1 * x),9,,Y,1,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) + (3 * x) + (5 * x) + (7 * x),8,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",11,,Y,21,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (x * 2) % (1+1),11,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (x * 1) % (2+1),11,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (1 * x) ** 3,11,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (4 * x) | (2 * x),9,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) | 3,13,,Y,12,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (3 * x) ** 1,11,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | 0,15,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],14,False,Y,99,False
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) | (x * 3),13,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) | (x * 2),14,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (3 * x) * (2 * x),15,,Y,27,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) | (1 * x),21,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + 3)",16,,Y,20,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (3 * x) | 1,16,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (3 * x) * (1 + x),16,,Y,20,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (0+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (4+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (x * 2) % (1+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (1 * x) ** 2,10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (1 * x) * (1 + (x % 2)),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | (1 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 2,10,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) | 1,10,,Y,10,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x * 2) % (3+1),12,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,14,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (1 * x) * 2,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,12,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + 2)",14,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 2,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (1 * x) + 2,14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) * 3,18,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (1 * x) + (2 * x),22,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],21,,Y,23,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + (7 * x),21,,Y,22,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (2 * x) | (3 * x),26,,Y,26,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (3 * x) * (3 * x),27,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],27,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (5 * x) | (3 * x),29,,Y,29,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],36,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (3 * x) + 2,36,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) * 2,22,,Y,28,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) + (2 * x),22,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + (2 * x),22,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (3 * x) | 2,22,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) ** 2,26,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) * (2 * x),30,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) | (x + 1),42,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) | (1 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (1 + x) | 0,21,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 3) % (4+1),21,,Y,3,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,34,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (3 * x) ** 2,21,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) ** 2,36,,Y,36,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (2 * x) | (3 * x),28,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (3 * x) ** 2,36,,Y,49,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + (x * 1) % (0+1),30,,Y,36,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (2 * x) | 0,10,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 2) % (2+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) % (1+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],11,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 3)",11,,Y,17,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (x * 2) % (5+1),12,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (1 * x) + (2 * x),12,,Y,13,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (7 + 1)][x],11,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (3 * x) + (2 * x),15,,Y,10,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (1+1),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (2 * x) * (1 + x),2,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (0+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) + 1,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (x * 2) | (x * 2 + 1),256,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (1 * x),128,True,Y,256,False
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (4 * x) ** 2,512,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (x * 4) * 0,512,,N,0,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 ** (1 * x)) % (2+1),2048,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 * x) | 2,2048,,Y,2048,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 2 ** (x * 2),8192,False,Y,8192,False
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (3 * x),16384,,Y,8192,
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 071e982..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,279 +0,0 @@
-[2023-06-01 21:46:54,737][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:46:54,757][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:46:54,777][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:46:54,780][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:46:54,780][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 22:12:34,349][src.evals.sequence_completion][ERROR] - '(' was never closed (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    lambda x: (2 * x) ** (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 +
-                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
-SyntaxError: '(' was never closed
-[2023-06-01 22:12:34,353][src.evals.sequence_completion][WARNING] - '(' was never closed (<string>, line 1)
-[2023-06-01 22:22:47,717][src.evals.sequence_completion][ERROR] - integer division or modulo by zero
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-ZeroDivisionError: integer division or modulo by zero
-[2023-06-01 22:22:47,718][src.evals.sequence_completion][WARNING] - integer division or modulo by zero
-[2023-06-01 22:25:05,008][src.evals.sequence_completion][ERROR] - 'int' object is not callable
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: 'int' object is not callable
-[2023-06-01 22:25:05,009][src.evals.sequence_completion][WARNING] - 'int' object is not callable
-[2023-06-01 23:48:30,597][src.evals.sequence_completion][ERROR] - 'int' object is not callable
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: 'int' object is not callable
-[2023-06-01 23:48:30,598][src.evals.sequence_completion][WARNING] - 'int' object is not callable
-[2023-06-01 23:55:05,653][src.evals.sequence_completion][INFO] -
-        Evaluated 221 ambiguous sequences of 225 total.
-        Resulting in:
-        - 6.0% ground-truth-consistent
-        - 5.0% self-rule-following-consistency
-        - 97.0% self-comparison-consistency
-        - 6.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 523b291..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index bec98f0..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,213 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) % (1+1) + (6 * x) % (2+1),24,,N,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 2) + 6,30,,Y,30,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x * 6) + 0,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) | 6,36,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: 6 * (x + 1),36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x + 2),6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],6,,Y,6,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (x + 2),6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (x + 3),7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 3) or i % (2 + 3)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x - 3) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (x + 3) * 1,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 3) or i % (0 + 4)][x],11,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x + 2) if x >= 2 else (x + 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: x + (x // 2) + (x % 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]","(lambda a:lambda v:a(a,v))(lambda fn,x:5 if x==0 or x==1 else fn(fn,x-2) + fn(fn,x-1))",10,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (x * 3) - 4 if x < 3 else (x * 2) + 1,10,,Y,11,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,-1,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 1) % (3+1),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 3),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: ((x + 1) % 3) % 2,2,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else (2 * fn(fn,x-1) + (x % 3)))",4,,Y,4,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]","(lambda a:lambda v:a(a,v))(lambda fn,x:2 if x==0 else 1 if x==2 else (x-1) % 3)",0,True,Y,0,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (x * 2) - (x // 2) ** 1,8,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x<=2 else fn(fn,x-1) + fn(fn,x-2) + fn(fn,x-3) - fn(fn,x-4))",8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 if x==1 else fn(fn,x-1) + fn(fn,x-2) - 1)",8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (2 + 1)][x],8,False,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2),8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x] + 2,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 1) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (1 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (1 * x) + 3 if x < 2 else (1 * x) + 4,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 5,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],10,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (4*3),12,False,Y,12,False
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) ** 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x + 1) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 3 * (x + 2 + 1),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1 if x > 0 else 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) + 8,24,False,Y,24,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 2) + 8,24,False,Y,24,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (x * 4) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (1 * x) * 4 + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: 2 * x + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],11,False,Y,11,False
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 1 if x >= 0 else None,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: 2 * x + 1 + (x > 1),13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (x * 2) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (1 * x) * 2 + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (x * 2) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 5,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) * 4 + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x + 5) * 1,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 3) % (5+1) + (x // 3),8,,N,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) if x < 3 else (x + 1),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (1 * x) + 2 if x % 3 != 2 else (2 * (x // 3)) + 5,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x + 1) ^ 2 + 1 if x % 2 else (x + 1) ^ 2 - 3,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (3 + 1)][x] + 5,11,,Y (assuming the lambda function is correct and returns the expected output for each input),12 (Note: this function is not a simple arithmetic sequence and is difficult to predict without computing the next value using the given function.),
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x + 1) ** 2 if x % 2 == 1 else (x + 1) ** 1,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]","lambda x: [3, 3, 7, 7][x] if x < 4 else 0",11,False,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ^ 1 if x > 0 else 0,0,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2 if x % 4 < 2 else (x + 1) % 2,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) if x < 4 else (x % 2) ^ (x % 4 == 0),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (2+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x if x > 0 else 1,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x if x > 0 else 1,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 + x),4096,True,Y,4096,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** (x-1)),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 5536054..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,361 +0,0 @@
-[2023-06-02 00:02:54,323][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-02 00:02:54,342][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-02 00:02:54,359][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-02 00:02:54,363][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-02 00:02:54,363][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:03:42,043][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:03:42,044][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:03:55,764][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:03:55,764][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:10,033][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize, I have already provided a code for this sequence which was incorrect. Here's the correct code:
-                                                                                           ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:04:10,034][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:04:36,110][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:04:36,110][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:43,584][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-[2023-06-02 00:04:43,585][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-[2023-06-02 00:04:49,114][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:04:49,115][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:56,174][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-02 00:04:56,174][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-02 00:04:59,149][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-[2023-06-02 00:04:59,149][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-[2023-06-02 00:05:05,600][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences: the first three terms form an arithmetic sequence with a common difference of 1, and the fourth term is the sum of the second and third terms. Here's the code:
-                                                                                                                                                                                                                 ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:05:05,601][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:05:25,237][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:05:25,238][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:05:27,324][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It does not follow a constant difference or ratio between terms. Therefore, it cannot be generated by a simple formula.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:05:27,325][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:07:33,071][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence has already been asked before. Here's the code again:
-                                                     ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:07:33,071][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:08:34,804][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:08:34,805][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:09:02,151][src.evals.sequence_completion][INFO] -
-        Evaluated 212 ambiguous sequences of 225 total.
-        Resulting in:
-        - 81.0% ground-truth-consistent
-        - 83.0% self-rule-following-consistency
-        - 96.0% self-comparison-consistency
-        - 79.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 0108b53..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index 86b652c..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,211 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 12,36,True,N,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: 6 * x + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: 6 * (x + 3),42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,7,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: 3 + x,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) + 4 if x % 2 == 0 else (x * 2) + 3,10,,Y,10,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,-1,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: x % 3,1,,Y,0,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: 1 * x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x % 2) + (2 * x),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: x + 5 if x != 2 else 7,12,False,N,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 3 else x + 6,12,False,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) | 3,15,,Y,15,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 9 + (3 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (1 * x) * 4,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (1 * x) * 4,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 4 * x + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | 5,13,,N,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 4 + (2 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) | 6,14,,N,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: 4 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: 4 * x + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: 4 * x + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: 11 + 4 * x,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) | 11,31,,N,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 10 + (4 * x),26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 10 + (4 * x),26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: 4 * x + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 1,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 5,29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (x + 1),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,1024,,N,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 2 ** (4 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,N,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (2 * x) ** 6,16384,,N,16384,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (6 + 2 * x),16384,True,Y,16384,True
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index f9d24b3..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,406 +0,0 @@
-[2023-06-02 00:09:02,348][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-02 00:09:02,367][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-02 00:09:02,383][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-02 00:09:02,386][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-02 00:09:02,386][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:13:41,306][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion in my previous responses. Here's the correct code for the sequence 3, 4, 5, 7:
-                                                                ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:13:41,306][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:13:57,347][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:13:57,347][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:14:33,837][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:14:33,838][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:14:43,572][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    There is no simple arithmetic or geometric rule that generates the given sequence. However, you can use a piecewise function to generate the sequence:
-                ^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:14:43,573][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:15:54,223][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5 based on the index:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:15:54,223][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:16:09,377][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence appears to be the Fibonacci sequence starting from the second term. Here's the code to generate it:
-                                                                                          ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:16:09,377][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:16:20,847][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, it can be generated using a recursive function that adds the previous two terms:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:16:20,847][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:16:38,254][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, if you are looking for a code that generates the first four terms of the Fibonacci sequence, you can use the following code:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:16:38,255][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:16:54,945][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 3, 5, 6:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:16:54,945][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:17:13,992][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:17:13,992][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:17:42,767][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:17:42,767][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:17:58,536][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 3, 5, 6, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:17:58,536][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:24:36,027][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-02 00:24:36,027][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-02 00:33:05,804][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-02 00:33:05,804][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-02 00:38:08,117][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:38:08,117][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:38:29,517][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:38:29,517][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:38:45,287][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:38:45,287][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:40:16,225][src.evals.sequence_completion][INFO] -
-        Evaluated 210 ambiguous sequences of 225 total.
-        Resulting in:
-        - 87.0% ground-truth-consistent
-        - 87.0% self-rule-following-consistency
-        - 85.0% self-comparison-consistency
-        - 75.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index da527de..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index c94954c..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,226 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (x * 6) % (18+1),24,False,Y,24,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (3 * x) * 2,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 6) * 2,30,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (3 * x) * 4,36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) | 6,42,,Y,42,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],5,,N,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 1) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (x * 1) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (4 + 1) or i % (3 + 1) or i % (2 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) + 2,6,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) | 3,7,,N,7,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) | 3,7,,N,7,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x + 1) * 3,7,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (x + 3),7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (7 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (6 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x + 4),8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,False,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (1 * x) + 2,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 3,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % (3+1),3,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 4) ** 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (2+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 1) % (2+1),2,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x + 1) % (2+1),2,True,Y,0,False
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],3,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],3,,N,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (x * 1) % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) + (2 * (x // 2)),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 1) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (2 * x) + 3,11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (2 * x) + 3,11,,Y,11,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) % (3+1),12,,Y,12,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) | 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * x,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) * 1,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * (x + 1),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) | 3,18,,N,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 3 * (x + 1) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) ** 0,16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) | 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) | 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 3,16,,Y,16,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) | 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * x,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) % (20+1),24,False,Y,24,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) + 4,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) | 1,11,True,N,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (2 + 1)][x],13,,Y,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) % (7+1),8,False,Y,0,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (x * 4) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,23,True,N,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 4,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 4,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 4 * x + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 5 + (4 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 13,29,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 1,29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + 1,9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,N,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (4 * x) % (2+1),3,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],7,,N,3,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 4) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],1,,N,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (2 * x) ** 4,256,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 3,1024,,Y,2048,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (4 * x) ** 2,4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (4 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (4 * x),16384,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 2,16384,,Y,16384,
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 2847996..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,239 +0,0 @@
-[2023-06-01 23:55:05,893][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 23:55:05,919][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 23:55:05,940][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 23:55:05,943][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 23:55:05,944][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:02:54,079][src.evals.sequence_completion][INFO] -
-        Evaluated 225 ambiguous sequences of 225 total.
-        Resulting in:
-        - 69.0% ground-truth-consistent
-        - 69.0% self-rule-following-consistency
-        - 88.0% self-comparison-consistency
-        - 64.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 7.000000000000001% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/multirun.yaml b/results/q0/run_3/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_3/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
index a44cbe6..27c3ac5 100644
--- a/src/evals/sequence_completion.py
+++ b/src/evals/sequence_completion.py
@@ -149,10 +149,10 @@ def sequence_completion_equality(
             "sequence": sequence,
             "generated_completion_rule": explanation,
             "generated_completion": actual_completion,
-            "generated_completion_matches": None,
+            "generated_completion_matches": False,
             "model_self_consistency_evaluation": consistency_resp,
             "model_completion": model_completion_resp,
-            "model_completion_matches": None,
+            "model_completion_matches": False,
         }

     last_completion = eval(explanation)(last_completion_step + 1)
[2023-06-07 15:46:48,720][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-07-15-41-04/compute_dependence_with_base_changes=False,sequence_completion_capability.model=davinci,sequence_completion_equality=False,string_transformation_completion_equality=False/evaluate_sequence_completion_capability
[2023-06-07 15:46:48,721][src.evals.sequence_completion_capability][INFO] - Evaluating sequence completion capability...
[2023-06-07 15:49:40,764][src.evals.sequence_completion_capability][ERROR] - '(' was never closed (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (lambda y: (lambda z: (lambda a: (lambda b: (lambda c: (lambda d: (lambda e: (lambda f: (lambda g: (lambda h: (lambda i: (lambda j: (lambda k: (lambda l: (lambda m: (lambda n: (lambda o: (lambda p: (lambda q: (lambda r: (lambda s: (lambda t: (lambda u: (lambda v: (lambda w: (lambda x: (lambda y: (lambda z: (lambda a: (lambda b: (lambda c: (lambda d: (lambda e: (lambda f: (lambda g: (lambda h: (lambda i: (lambda j: (lambda k: (lambda l: (lambda m: (lambda n: (lambda o: (lambda p: (lambda q: (lambda r: (lambda s: (lambda t: (lambda u: (lambda v: (lambda w: (lambda x: (lambda y: (lambda z: (lambda a: (lambda b: (lambda c: (lambda d: (lambda e: (lambda f: (lambda g: (lambda h: (lambda i:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^
SyntaxError: '(' was never closed
[2023-06-07 15:49:40,765][src.evals.sequence_completion_capability][WARNING] - '(' was never closed (<string>, line 1)
[2023-06-07 15:49:57,506][src.evals.sequence_completion_capability][ERROR] - '(' was never closed (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x * (1 + (x *
                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
SyntaxError: '(' was never closed
[2023-06-07 15:49:57,506][src.evals.sequence_completion_capability][WARNING] - '(' was never closed (<string>, line 1)
[2023-06-07 15:51:57,792][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) | (1 * x) |
SyntaxError: invalid syntax
[2023-06-07 15:51:57,792][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 15:52:50,151][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) +
SyntaxError: invalid syntax
[2023-06-07 15:52:50,152][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 15:57:00,938][src.evals.sequence_completion_capability][ERROR] - list index out of range
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
IndexError: list index out of range
[2023-06-07 15:57:00,938][src.evals.sequence_completion_capability][WARNING] - list index out of range
[2023-06-07 16:01:01,514][src.evals.sequence_completion_capability][ERROR] - list index out of range
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
IndexError: list index out of range
[2023-06-07 16:01:01,515][src.evals.sequence_completion_capability][WARNING] - list index out of range
[2023-06-07 16:03:02,449][src.evals.sequence_completion_capability][ERROR] - '(' was never closed (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (lambda y: (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x % 2 else (x + y) + (x + y) if x %
              ^
SyntaxError: '(' was never closed
[2023-06-07 16:03:02,449][src.evals.sequence_completion_capability][WARNING] - '(' was never closed (<string>, line 1)
[2023-06-07 16:03:55,408][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) +
SyntaxError: invalid syntax
[2023-06-07 16:03:55,408][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:09:03,215][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) +
SyntaxError: invalid syntax
[2023-06-07 16:09:03,216][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:14:10,827][src.evals.sequence_completion_capability][ERROR] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 5 were given
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
TypeError: <lambda>.<locals>.<lambda>() takes 1 positional argument but 5 were given
[2023-06-07 16:14:10,827][src.evals.sequence_completion_capability][WARNING] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 5 were given
[2023-06-07 16:18:50,167][src.evals.sequence_completion_capability][ERROR] - list index out of range
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
IndexError: list index out of range
[2023-06-07 16:18:50,168][src.evals.sequence_completion_capability][WARNING] - list index out of range
[2023-06-07 16:26:55,436][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) + (1 * x) +
SyntaxError: invalid syntax
[2023-06-07 16:26:55,436][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:26:55,441][src.evals.sequence_completion_capability][INFO] -
        Evaluated 127 ambiguous sequences of 139 total.
        Resulting in:
        - 9.0% rules_matches_sequence
        - 31.0% completion_is_correct
