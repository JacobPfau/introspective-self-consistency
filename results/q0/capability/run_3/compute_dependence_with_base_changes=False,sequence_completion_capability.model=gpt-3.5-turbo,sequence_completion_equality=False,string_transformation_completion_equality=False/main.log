[2023-06-07 16:26:55,644][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
[2023-06-07 16:26:55,710][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_1/multirun.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_2/multirun.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv', 'results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log', 'results/q0/run_3/multirun.yaml', 'src/evals/sequence_completion.py']
[2023-06-07 16:26:55,752][src.utils][INFO] - Git diff:
diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
index bf17cfe..d119c82 100644
--- a/results/q0/analyze_q0_results.ipynb
+++ b/results/q0/analyze_q0_results.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 12,
    "id": "514d264c",
    "metadata": {},
    "outputs": [
@@ -165,7 +165,13 @@
       "                - 0.9056603773584906 precision\n",
       "                - 0.9230769230769231 recall\n",
       "                - 0.9142857142857143 f1\n",
-      "                \n",
+      "                \n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "\n",
       "                For run_1 run davinci including all answers\n",
       "                Evaluated 222 ambiguous sequences of 225 total.\n",
@@ -178,13 +184,7 @@
       "                - 0.05687203791469194 precision\n",
       "                - 1.0 recall\n",
       "                - 0.10762331838565023 f1\n",
-      "                \n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
+      "                \n",
       "\n",
       "                For run_2 run davinci including all answers\n",
       "                Evaluated 220 ambiguous sequences of 225 total.\n",
@@ -335,19 +335,379 @@
     "import numpy as np\n",
     "from sklearn import metrics\n",
     "import pandas as pd\n",
+    "\n",
     "models = [\n",
     "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
     "]\n",
     "runs = [\n",
     "    'run_1', 'run_2', 'run_3'\n",
     "]\n",
+    "\n",
+    "consistent_functions = []\n",
+    "for model in models:\n",
+    "    df = pd.read_csv(\n",
+    "            f'./run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
+    "    )\n",
+    "    for i, data in df.iterrows():\n",
+    "        if data[\"generated_completion_matches\"] is True:\n",
+    "            consistent_functions.append({\n",
+    "                \"fn\": data['original_function'],\n",
+    "                \"model\": model\n",
+    "            })\n",
+    "            \n",
+    "pd.DataFrame(\n",
+    "    consistent_functions\n",
+    ").to_csv('./consistent_functions_by_model.csv')\n",
+    "            \n",
+    "   "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "id": "b8ed0f42",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "                For run_1 run davinci including valid answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.36363636363636365% ground-truth-consistent (using 33)\n",
+      "                - 0.3333333333333333% self-rule-following-consistency (using 33)\n",
+      "                - 0.9504504504504504% self-comparison-consistency (using 222)\n",
+      "                - 1.0% self-comparison-consistency==Y and ground-truth-consistent. (using 12)\n",
+      "                - 0.047619047619047616% self-comparison-consistency==N and not ground-truth-consistent. (using 21)\n",
+      "                - 0.375 precision\n",
+      "                - 1.0 recall\n",
+      "                - 0.5454545454545454 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run davinci including valid answers\n",
+      "                Evaluated 220 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.29411764705882354% ground-truth-consistent (using 34)\n",
+      "                - 0.4117647058823529% self-rule-following-consistency (using 34)\n",
+      "                - 0.9681818181818181% self-comparison-consistency (using 220)\n",
+      "                - 0.9% self-comparison-consistency==Y and ground-truth-consistent. (using 10)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 24)\n",
+      "                - 0.2727272727272727 precision\n",
+      "                - 0.9 recall\n",
+      "                - 0.41860465116279066 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run davinci including valid answers\n",
+      "                Evaluated 221 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.4642857142857143% ground-truth-consistent (using 28)\n",
+      "                - 0.35714285714285715% self-rule-following-consistency (using 28)\n",
+      "                - 0.9728506787330317% self-comparison-consistency (using 221)\n",
+      "                - 1.0% self-comparison-consistency==Y and ground-truth-consistent. (using 13)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 15)\n",
+      "                - 0.4642857142857143 precision\n",
+      "                - 1.0 recall\n",
+      "                - 0.6341463414634146 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run gpt-3.5-turbo including valid answers\n",
+      "                Evaluated 217 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9424083769633508% ground-truth-consistent (using 191)\n",
+      "                - 0.9581151832460733% self-rule-following-consistency (using 191)\n",
+      "                - 0.9534883720930233% self-comparison-consistency (using 215)\n",
+      "                - 0.9777777777777777% self-comparison-consistency==Y and ground-truth-consistent. (using 180)\n",
+      "                - 0.1% self-comparison-consistency==N and not ground-truth-consistent. (using 10)\n",
+      "                - 0.9513513513513514 precision\n",
+      "                - 0.9777777777777777 recall\n",
+      "                - 0.9643835616438355 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run gpt-3.5-turbo including valid answers\n",
+      "                Evaluated 213 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9516129032258065% ground-truth-consistent (using 186)\n",
+      "                - 0.9731182795698925% self-rule-following-consistency (using 186)\n",
+      "                - 0.9669811320754716% self-comparison-consistency (using 212)\n",
+      "                - 0.9830508474576272% self-comparison-consistency==Y and ground-truth-consistent. (using 177)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 8)\n",
+      "                - 0.9560439560439561 precision\n",
+      "                - 0.9830508474576272 recall\n",
+      "                - 0.9693593314763231 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run gpt-3.5-turbo including valid answers\n",
+      "                Evaluated 212 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9447513812154696% ground-truth-consistent (using 181)\n",
+      "                - 0.9723756906077348% self-rule-following-consistency (using 181)\n",
+      "                - 0.9620853080568721% self-comparison-consistency (using 211)\n",
+      "                - 0.9824561403508771% self-comparison-consistency==Y and ground-truth-consistent. (using 171)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 10)\n",
+      "                - 0.9438202247191011 precision\n",
+      "                - 0.9824561403508771 recall\n",
+      "                - 0.9627507163323781 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run gpt-4-0314 including valid answers\n",
+      "                Evaluated 210 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9787234042553191% ground-truth-consistent (using 188)\n",
+      "                - 0.9787234042553191% self-rule-following-consistency (using 188)\n",
+      "                - 0.8095238095238095% self-comparison-consistency (using 210)\n",
+      "                - 0.8097826086956522% self-comparison-consistency==Y and ground-truth-consistent. (using 184)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 4)\n",
+      "                - 0.9738562091503268 precision\n",
+      "                - 0.8097826086956522 recall\n",
+      "                - 0.8842729970326411 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run gpt-4-0314 including valid answers\n",
+      "                Evaluated 211 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9786096256684492% ground-truth-consistent (using 187)\n",
+      "                - 0.983957219251337% self-rule-following-consistency (using 187)\n",
+      "                - 0.7867298578199052% self-comparison-consistency (using 211)\n",
+      "                - 0.7923497267759563% self-comparison-consistency==Y and ground-truth-consistent. (using 183)\n",
+      "                - 0.25% self-comparison-consistency==N and not ground-truth-consistent. (using 4)\n",
+      "                - 0.9797297297297297 precision\n",
+      "                - 0.7923497267759563 recall\n",
+      "                - 0.8761329305135952 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run gpt-4-0314 including valid answers\n",
+      "                Evaluated 210 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9680851063829787% ground-truth-consistent (using 188)\n",
+      "                - 0.9680851063829787% self-rule-following-consistency (using 188)\n",
+      "                - 0.8523809523809524% self-comparison-consistency (using 210)\n",
+      "                - 0.8626373626373627% self-comparison-consistency==Y and ground-truth-consistent. (using 182)\n",
+      "                - 0.16666666666666666% self-comparison-consistency==N and not ground-truth-consistent. (using 6)\n",
+      "                - 0.9691358024691358 precision\n",
+      "                - 0.8626373626373627 recall\n",
+      "                - 0.9127906976744187 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run text-davinci-003 including valid answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8895348837209303% ground-truth-consistent (using 172)\n",
+      "                - 0.9127906976744186% self-rule-following-consistency (using 172)\n",
+      "                - 0.8783783783783784% self-comparison-consistency (using 222)\n",
+      "                - 0.9607843137254902% self-comparison-consistency==Y and ground-truth-consistent. (using 153)\n",
+      "                - 0.2631578947368421% self-comparison-consistency==N and not ground-truth-consistent. (using 19)\n",
+      "                - 0.9130434782608695 precision\n",
+      "                - 0.9607843137254902 recall\n",
+      "                - 0.9363057324840764 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run text-davinci-003 including valid answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.9017341040462428% ground-truth-consistent (using 173)\n",
+      "                - 0.8959537572254336% self-rule-following-consistency (using 173)\n",
+      "                - 0.8648648648648649% self-comparison-consistency (using 222)\n",
+      "                - 0.9423076923076923% self-comparison-consistency==Y and ground-truth-consistent. (using 156)\n",
+      "                - 0.23529411764705882% self-comparison-consistency==N and not ground-truth-consistent. (using 17)\n",
+      "                - 0.91875 precision\n",
+      "                - 0.9423076923076923 recall\n",
+      "                - 0.930379746835443 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run text-davinci-003 including valid answers\n",
+      "                Evaluated 225 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.896551724137931% ground-truth-consistent (using 174)\n",
+      "                - 0.8908045977011494% self-rule-following-consistency (using 174)\n",
+      "                - 0.8755555555555555% self-comparison-consistency (using 225)\n",
+      "                - 0.9230769230769231% self-comparison-consistency==Y and ground-truth-consistent. (using 156)\n",
+      "                - 0.16666666666666666% self-comparison-consistency==N and not ground-truth-consistent. (using 18)\n",
+      "                - 0.9056603773584906 precision\n",
+      "                - 0.9230769230769231 recall\n",
+      "                - 0.9142857142857143 f1\n",
+      "                \n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "                For run_1 run davinci including all answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.05405405405405406% ground-truth-consistent (using 222)\n",
+      "                - 0.04954954954954955% self-rule-following-consistency (using 222)\n",
+      "                - 0.9504504504504504% self-comparison-consistency (using 222)\n",
+      "                - 0.9502487562189055% self-comparison-consistency==Y and ground-truth-consistent. (using 201)\n",
+      "                - 0.047619047619047616% self-comparison-consistency==N and not ground-truth-consistent. (using 21)\n",
+      "                - 0.05687203791469194 precision\n",
+      "                - 1.0 recall\n",
+      "                - 0.10762331838565023 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run davinci including all answers\n",
+      "                Evaluated 220 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.045454545454545456% ground-truth-consistent (using 220)\n",
+      "                - 0.06363636363636363% self-rule-following-consistency (using 220)\n",
+      "                - 0.9681818181818181% self-comparison-consistency (using 220)\n",
+      "                - 0.9642857142857143% self-comparison-consistency==Y and ground-truth-consistent. (using 196)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 24)\n",
+      "                - 0.04225352112676056 precision\n",
+      "                - 0.9 recall\n",
+      "                - 0.08071748878923765 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run davinci including all answers\n",
+      "                Evaluated 221 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.058823529411764705% ground-truth-consistent (using 221)\n",
+      "                - 0.04524886877828054% self-rule-following-consistency (using 221)\n",
+      "                - 0.9728506787330317% self-comparison-consistency (using 221)\n",
+      "                - 0.970873786407767% self-comparison-consistency==Y and ground-truth-consistent. (using 206)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 15)\n",
+      "                - 0.06046511627906977 precision\n",
+      "                - 1.0 recall\n",
+      "                - 0.11403508771929825 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run gpt-3.5-turbo including all answers\n",
+      "                Evaluated 217 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8294930875576036% ground-truth-consistent (using 217)\n",
+      "                - 0.8433179723502304% self-rule-following-consistency (using 217)\n",
+      "                - 0.9447004608294931% self-comparison-consistency (using 217)\n",
+      "                - 0.9514563106796117% self-comparison-consistency==Y and ground-truth-consistent. (using 206)\n",
+      "                - 0.09090909090909091% self-comparison-consistency==N and not ground-truth-consistent. (using 11)\n",
+      "                - 0.8585365853658536 precision\n",
+      "                - 0.9777777777777777 recall\n",
+      "                - 0.9142857142857143 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run gpt-3.5-turbo including all answers\n",
+      "                Evaluated 213 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8309859154929577% ground-truth-consistent (using 213)\n",
+      "                - 0.8497652582159625% self-rule-following-consistency (using 213)\n",
+      "                - 0.9624413145539906% self-comparison-consistency (using 213)\n",
+      "                - 0.9656862745098039% self-comparison-consistency==Y and ground-truth-consistent. (using 204)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 9)\n",
+      "                - 0.848780487804878 precision\n",
+      "                - 0.9830508474576272 recall\n",
+      "                - 0.9109947643979057 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run gpt-3.5-turbo including all answers\n",
+      "                Evaluated 212 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8066037735849056% ground-truth-consistent (using 212)\n",
+      "                - 0.8301886792452831% self-rule-following-consistency (using 212)\n",
+      "                - 0.9575471698113207% self-comparison-consistency (using 212)\n",
+      "                - 0.9554455445544554% self-comparison-consistency==Y and ground-truth-consistent. (using 202)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 10)\n",
+      "                - 0.8275862068965517 precision\n",
+      "                - 0.9824561403508771 recall\n",
+      "                - 0.8983957219251337 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run gpt-4-0314 including all answers\n",
+      "                Evaluated 210 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8761904761904762% ground-truth-consistent (using 210)\n",
+      "                - 0.8761904761904762% self-rule-following-consistency (using 210)\n",
+      "                - 0.8095238095238095% self-comparison-consistency (using 210)\n",
+      "                - 0.8058252427184466% self-comparison-consistency==Y and ground-truth-consistent. (using 206)\n",
+      "                - 0.0% self-comparison-consistency==N and not ground-truth-consistent. (using 4)\n",
+      "                - 0.8764705882352941 precision\n",
+      "                - 0.8097826086956522 recall\n",
+      "                - 0.8418079096045198 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run gpt-4-0314 including all answers\n",
+      "                Evaluated 211 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8672985781990521% ground-truth-consistent (using 211)\n",
+      "                - 0.8720379146919431% self-rule-following-consistency (using 211)\n",
+      "                - 0.7867298578199052% self-comparison-consistency (using 211)\n",
+      "                - 0.7874396135265701% self-comparison-consistency==Y and ground-truth-consistent. (using 207)\n",
+      "                - 0.25% self-comparison-consistency==N and not ground-truth-consistent. (using 4)\n",
+      "                - 0.8734939759036144 precision\n",
+      "                - 0.7923497267759563 recall\n",
+      "                - 0.830945558739255 f1\n",
+      "                \n",
+      "\n",
+      "                For run_3 run gpt-4-0314 including all answers\n",
+      "                Evaluated 210 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.8666666666666667% ground-truth-consistent (using 210)\n",
+      "                - 0.8666666666666667% self-rule-following-consistency (using 210)\n",
+      "                - 0.8523809523809524% self-comparison-consistency (using 210)\n",
+      "                - 0.8529411764705882% self-comparison-consistency==Y and ground-truth-consistent. (using 204)\n",
+      "                - 0.16666666666666666% self-comparison-consistency==N and not ground-truth-consistent. (using 6)\n",
+      "                - 0.8770949720670391 precision\n",
+      "                - 0.8626373626373627 recall\n",
+      "                - 0.8698060941828255 f1\n",
+      "                \n",
+      "\n",
+      "                For run_1 run text-davinci-003 including all answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.6891891891891891% ground-truth-consistent (using 222)\n",
+      "                - 0.7072072072072072% self-rule-following-consistency (using 222)\n",
+      "                - 0.8783783783783784% self-comparison-consistency (using 222)\n",
+      "                - 0.8916256157635468% self-comparison-consistency==Y and ground-truth-consistent. (using 203)\n",
+      "                - 0.2631578947368421% self-comparison-consistency==N and not ground-truth-consistent. (using 19)\n",
+      "                - 0.7538461538461538 precision\n",
+      "                - 0.9607843137254902 recall\n",
+      "                - 0.8448275862068965 f1\n",
+      "                \n",
+      "\n",
+      "                For run_2 run text-davinci-003 including all answers\n",
+      "                Evaluated 222 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.7027027027027027% ground-truth-consistent (using 222)\n",
+      "                - 0.6981981981981982% self-rule-following-consistency (using 222)\n",
+      "                - 0.8648648648648649% self-comparison-consistency (using 222)\n",
+      "                - 0.8731707317073171% self-comparison-consistency==Y and ground-truth-consistent. (using 205)\n",
+      "                - 0.23529411764705882% self-comparison-consistency==N and not ground-truth-consistent. (using 17)\n",
+      "                - 0.765625 precision\n",
+      "                - 0.9423076923076923 recall\n",
+      "                - 0.8448275862068965 f1\n",
+      "                \n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "                For run_3 run text-davinci-003 including all answers\n",
+      "                Evaluated 225 ambiguous sequences of 225 total.\n",
+      "                Resulting in:\n",
+      "                - 0.6933333333333334% ground-truth-consistent (using 225)\n",
+      "                - 0.6888888888888889% self-rule-following-consistency (using 225)\n",
+      "                - 0.8755555555555555% self-comparison-consistency (using 225)\n",
+      "                - 0.8792270531400966% self-comparison-consistency==Y and ground-truth-consistent. (using 207)\n",
+      "                - 0.16666666666666666% self-comparison-consistency==N and not ground-truth-consistent. (using 18)\n",
+      "                - 0.7309644670050761 precision\n",
+      "                - 0.9230769230769231 recall\n",
+      "                - 0.8158640226628895 f1\n",
+      "                \n"
+     ]
+    }
+   ],
+   "source": [
+    " \n",
     "total_sequences = 225\n",
-    "results = []\n",
+    "consistency_results = []\n",
     "for answer_validity in ['valid', 'all']:\n",
     "    for model in models:\n",
     "        for run in runs:\n",
     "            df = pd.read_csv(\n",
-    "                    f'./{run}/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
+    "                    f'./consistency/{run}/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
     "            )\n",
     "            \n",
     "            match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (\n",
@@ -361,7 +721,7 @@
     "            \n",
     "\n",
     "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and  data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False:\n",
+    "                if answer_validity == 'valid' and data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False and data[\"generated_completion_matches\"] is not None:\n",
     "                    continue\n",
     "                match_accs.append(1 if data[\"generated_completion_matches\"] == True else 0)\n",
     "                match_accs_self_consistent.append(1\n",
@@ -369,7 +729,7 @@
     "                        else 0)\n",
     "\n",
     "            for i, data in df.iterrows():\n",
-    "                if answer_validity == 'valid' and data[\"model_completion_matches\"] is not True and data[\"model_completion_matches\"] is not False:\n",
+    "                if answer_validity == 'valid' and data[\"model_completion_matches\"] is not True and data[\"model_completion_matches\"] is not False and data[\"generated_completion_matches\"] is not None:\n",
     "                    continue\n",
     "                model_match_accs.append(1 if data[\"model_completion_matches\"] == True else 0)\n",
     "\n",
@@ -383,7 +743,7 @@
     "            for i, data in df.iterrows():\n",
     "                if answer_validity == 'valid' and data[\"model_self_consistency_evaluation\"].strip() != \"Y\" and data[\"model_self_consistency_evaluation\"].strip() != \"N\":\n",
     "                    continue\n",
-    "                if answer_validity == 'valid' and  data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False:\n",
+    "                if answer_validity == 'valid' and  data[\"generated_completion_matches\"] is not True and data[\"generated_completion_matches\"] is not False and data[\"generated_completion_matches\"] is not None:\n",
     "                    continue\n",
     "                if data[\"generated_completion_matches\"]:\n",
     "                    consistent_and_matched_positive.append(\n",
@@ -426,7 +786,7 @@
     "            \n",
     "\n",
     "\n",
-    "            results.append({\n",
+    "            consistency_results.append({\n",
     "                \"model\": model,\n",
     "                \"run\": run,\n",
     "                \"answer_validity\": answer_validity,\n",
@@ -445,60 +805,1096 @@
     "                \"self_consistency_f1\": self_consistency_f1,\n",
     "            })\n",
     "\n",
-    "pd.DataFrame(results).to_csv('./q0_results.csv')"
+    "consistency_df = pd.DataFrame(consistency_results)\n",
+    "consistency_df.to_csv('./q0_consistency_results.csv')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "id": "c2e8e06f",
+   "execution_count": 14,
+   "id": "1b0bc954",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'model': 'davinci', 'run': 'run_1', 'rule_matches_sequence': 8.53, 'completion_is_correct': 34.88, 'len_completed': 129}\n",
+      "{'model': 'davinci', 'run': 'run_2', 'rule_matches_sequence': 14.29, 'completion_is_correct': 37.59, 'len_completed': 133}\n",
+      "{'model': 'gpt-3.5-turbo', 'run': 'run_1', 'rule_matches_sequence': 40.77, 'completion_is_correct': 80.0, 'len_completed': 130}\n",
+      "{'model': 'gpt-3.5-turbo', 'run': 'run_2', 'rule_matches_sequence': 53.28, 'completion_is_correct': 83.61, 'len_completed': 122}\n",
+      "{'model': 'gpt-4-0314', 'run': 'run_1', 'rule_matches_sequence': 61.11, 'completion_is_correct': 85.71, 'len_completed': 126}\n",
+      "{'model': 'gpt-4-0314', 'run': 'run_2', 'rule_matches_sequence': 64.29, 'completion_is_correct': 81.75, 'len_completed': 126}\n",
+      "{'model': 'text-davinci-003', 'run': 'run_1', 'rule_matches_sequence': 47.06, 'completion_is_correct': 67.65, 'len_completed': 136}\n",
+      "{'model': 'text-davinci-003', 'run': 'run_2', 'rule_matches_sequence': 37.31, 'completion_is_correct': 71.64, 'len_completed': 134}\n"
+     ]
+    }
+   ],
    "source": [
-    "consistent_functions = []\n",
+    "import numpy as np\n",
+    "from sklearn import metrics\n",
+    "import pandas as pd\n",
+    "models = [\n",
+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
+    "]\n",
+    "runs = [\n",
+    "    'run_1', 'run_2'\n",
+    "]\n",
+    "total_sequences = 139\n",
+    "capability_results = []\n",
     "for model in models:\n",
-    "    df = pd.read_csv(\n",
-    "            f'./run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
-    "    )\n",
-    "    for i, data in df.iterrows():\n",
-    "        if data[\"generated_completion_matches\"] is True:\n",
-    "            consistent_functions.append({\n",
-    "                \"fn\": data['original_function'],\n",
-    "                \"model\": model\n",
-    "            })\n",
-    "            \n",
-    "pd.DataFrame(\n",
-    "    consistent_functions\n",
-    ").to_csv('./consistent_functions_by_model.csv')\n",
-    "            \n",
-    "    "
+    "    for run in runs:\n",
+    "        df = pd.read_csv(\n",
+    "                f'./capability/{run}/compute_dependence_with_base_changes=False,sequence_completion_capability.model={model},sequence_completion_equality=False,string_transformation_completion_equality=False/evaluate_sequence_completion_capability/sequence_completion_capability_evaluation_{model}.csv'\n",
+    "        )\n",
+    "\n",
+    "        rule_accs, completion_accs = [], []\n",
+    "\n",
+    "\n",
+    "        for i, data in df.iterrows():\n",
+    "            rule_accs.append(1 if data[\"generated_rule_matches\"] == True else 0)\n",
+    "            completion_accs.append(1\n",
+    "                    if data[\"generated_completion_matches\"] == True\n",
+    "                    else 0)\n",
+    "\n",
+    "        result = {\n",
+    "            \"model\": model,\n",
+    "            \"run\": run,\n",
+    "            \"rule_matches_sequence\": round(np.mean(rule_accs) * 100, 2),\n",
+    "            \"completion_is_correct\": round(np.mean(completion_accs) * 100, 2),\n",
+    "            \"len_completed\": len(df)\n",
+    "        }\n",
+    "        print(result)\n",
+    "        capability_results.append(result)\n",
+    "\n",
+    "capability_df = pd.DataFrame(capability_results)\n",
+    "capability_df.to_csv('./q0_capability_results.csv')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
-   "id": "97c37b8e",
+   "execution_count": 38,
+   "id": "4fe0ba6b",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "<ipython-input-38-9922da93b522>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
+      "  to_corr_df = consistency_df[consistency_df.answer_validity == 'valid'].groupby('model').mean().merge(\n",
+      "<ipython-input-38-9922da93b522>:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
+      "  capability_df.groupby('model').mean(), on='model'\n"
+     ]
+    }
+   ],
+   "source": [
+    "to_corr_df = consistency_df[consistency_df.answer_validity == 'valid'].groupby('model').mean().merge(\n",
+    "    capability_df.groupby('model').mean(), on='model'\n",
+    ")\n",
+    "corr_df = to_corr_df[[\n",
+    "    'rule_matches_sequence', 'completion_is_correct', \n",
+    "    'ground_truth_consistent', 'ground_truth_consistent_num',\n",
+    "       'self_rule_following_consistency',\n",
+    "       'self_comparison_consistency',\n",
+    "        'self_consistency_precision',\n",
+    "       'self_consistency_recall', 'self_consistency_f1'\n",
+    "]].corr()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 39,
+   "id": "d1fdb691",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>rule_matches_sequence</th>\n",
+       "      <th>completion_is_correct</th>\n",
+       "      <th>ground_truth_consistent</th>\n",
+       "      <th>ground_truth_consistent_num</th>\n",
+       "      <th>self_rule_following_consistency</th>\n",
+       "      <th>self_comparison_consistency</th>\n",
+       "      <th>self_consistency_precision</th>\n",
+       "      <th>self_consistency_recall</th>\n",
+       "      <th>self_consistency_f1</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>rule_matches_sequence</th>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.964577</td>\n",
+       "      <td>0.949283</td>\n",
+       "      <td>0.936389</td>\n",
+       "      <td>0.943104</td>\n",
+       "      <td>-0.728124</td>\n",
+       "      <td>0.942279</td>\n",
+       "      <td>-0.665773</td>\n",
+       "      <td>0.858075</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>completion_is_correct</th>\n",
+       "      <td>0.964577</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.984240</td>\n",
+       "      <td>0.979912</td>\n",
+       "      <td>0.985622</td>\n",
+       "      <td>-0.537953</td>\n",
+       "      <td>0.979303</td>\n",
+       "      <td>-0.447926</td>\n",
+       "      <td>0.943193</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>ground_truth_consistent</th>\n",
+       "      <td>0.949283</td>\n",
+       "      <td>0.984240</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.999249</td>\n",
+       "      <td>0.999540</td>\n",
+       "      <td>-0.579696</td>\n",
+       "      <td>0.999630</td>\n",
+       "      <td>-0.419297</td>\n",
+       "      <td>0.975837</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>ground_truth_consistent_num</th>\n",
+       "      <td>0.936389</td>\n",
+       "      <td>0.979912</td>\n",
+       "      <td>0.999249</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.999519</td>\n",
+       "      <td>-0.556799</td>\n",
+       "      <td>0.999683</td>\n",
+       "      <td>-0.385698</td>\n",
+       "      <td>0.983538</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_rule_following_consistency</th>\n",
+       "      <td>0.943104</td>\n",
+       "      <td>0.985622</td>\n",
+       "      <td>0.999540</td>\n",
+       "      <td>0.999519</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.554899</td>\n",
+       "      <td>0.999143</td>\n",
+       "      <td>-0.395933</td>\n",
+       "      <td>0.979945</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_comparison_consistency</th>\n",
+       "      <td>-0.728124</td>\n",
+       "      <td>-0.537953</td>\n",
+       "      <td>-0.579696</td>\n",
+       "      <td>-0.556799</td>\n",
+       "      <td>-0.554899</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.577543</td>\n",
+       "      <td>0.909308</td>\n",
+       "      <td>-0.428542</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_precision</th>\n",
+       "      <td>0.942279</td>\n",
+       "      <td>0.979303</td>\n",
+       "      <td>0.999630</td>\n",
+       "      <td>0.999683</td>\n",
+       "      <td>0.999143</td>\n",
+       "      <td>-0.577543</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.406506</td>\n",
+       "      <td>0.979652</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_recall</th>\n",
+       "      <td>-0.665773</td>\n",
+       "      <td>-0.447926</td>\n",
+       "      <td>-0.419297</td>\n",
+       "      <td>-0.385698</td>\n",
+       "      <td>-0.395933</td>\n",
+       "      <td>0.909308</td>\n",
+       "      <td>-0.406506</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.216576</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_f1</th>\n",
+       "      <td>0.858075</td>\n",
+       "      <td>0.943193</td>\n",
+       "      <td>0.975837</td>\n",
+       "      <td>0.983538</td>\n",
+       "      <td>0.979945</td>\n",
+       "      <td>-0.428542</td>\n",
+       "      <td>0.979652</td>\n",
+       "      <td>-0.216576</td>\n",
+       "      <td>1.000000</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                                 rule_matches_sequence  completion_is_correct  \\\n",
+       "rule_matches_sequence                         1.000000               0.964577   \n",
+       "completion_is_correct                         0.964577               1.000000   \n",
+       "ground_truth_consistent                       0.949283               0.984240   \n",
+       "ground_truth_consistent_num                   0.936389               0.979912   \n",
+       "self_rule_following_consistency               0.943104               0.985622   \n",
+       "self_comparison_consistency                  -0.728124              -0.537953   \n",
+       "self_consistency_precision                    0.942279               0.979303   \n",
+       "self_consistency_recall                      -0.665773              -0.447926   \n",
+       "self_consistency_f1                           0.858075               0.943193   \n",
+       "\n",
+       "                                 ground_truth_consistent  \\\n",
+       "rule_matches_sequence                           0.949283   \n",
+       "completion_is_correct                           0.984240   \n",
+       "ground_truth_consistent                         1.000000   \n",
+       "ground_truth_consistent_num                     0.999249   \n",
+       "self_rule_following_consistency                 0.999540   \n",
+       "self_comparison_consistency                    -0.579696   \n",
+       "self_consistency_precision                      0.999630   \n",
+       "self_consistency_recall                        -0.419297   \n",
+       "self_consistency_f1                             0.975837   \n",
+       "\n",
+       "                                 ground_truth_consistent_num  \\\n",
+       "rule_matches_sequence                               0.936389   \n",
+       "completion_is_correct                               0.979912   \n",
+       "ground_truth_consistent                             0.999249   \n",
+       "ground_truth_consistent_num                         1.000000   \n",
+       "self_rule_following_consistency                     0.999519   \n",
+       "self_comparison_consistency                        -0.556799   \n",
+       "self_consistency_precision                          0.999683   \n",
+       "self_consistency_recall                            -0.385698   \n",
+       "self_consistency_f1                                 0.983538   \n",
+       "\n",
+       "                                 self_rule_following_consistency  \\\n",
+       "rule_matches_sequence                                   0.943104   \n",
+       "completion_is_correct                                   0.985622   \n",
+       "ground_truth_consistent                                 0.999540   \n",
+       "ground_truth_consistent_num                             0.999519   \n",
+       "self_rule_following_consistency                         1.000000   \n",
+       "self_comparison_consistency                            -0.554899   \n",
+       "self_consistency_precision                              0.999143   \n",
+       "self_consistency_recall                                -0.395933   \n",
+       "self_consistency_f1                                     0.979945   \n",
+       "\n",
+       "                                 self_comparison_consistency  \\\n",
+       "rule_matches_sequence                              -0.728124   \n",
+       "completion_is_correct                              -0.537953   \n",
+       "ground_truth_consistent                            -0.579696   \n",
+       "ground_truth_consistent_num                        -0.556799   \n",
+       "self_rule_following_consistency                    -0.554899   \n",
+       "self_comparison_consistency                         1.000000   \n",
+       "self_consistency_precision                         -0.577543   \n",
+       "self_consistency_recall                             0.909308   \n",
+       "self_consistency_f1                                -0.428542   \n",
+       "\n",
+       "                                 self_consistency_precision  \\\n",
+       "rule_matches_sequence                              0.942279   \n",
+       "completion_is_correct                              0.979303   \n",
+       "ground_truth_consistent                            0.999630   \n",
+       "ground_truth_consistent_num                        0.999683   \n",
+       "self_rule_following_consistency                    0.999143   \n",
+       "self_comparison_consistency                       -0.577543   \n",
+       "self_consistency_precision                         1.000000   \n",
+       "self_consistency_recall                           -0.406506   \n",
+       "self_consistency_f1                                0.979652   \n",
+       "\n",
+       "                                 self_consistency_recall  self_consistency_f1  \n",
+       "rule_matches_sequence                          -0.665773             0.858075  \n",
+       "completion_is_correct                          -0.447926             0.943193  \n",
+       "ground_truth_consistent                        -0.419297             0.975837  \n",
+       "ground_truth_consistent_num                    -0.385698             0.983538  \n",
+       "self_rule_following_consistency                -0.395933             0.979945  \n",
+       "self_comparison_consistency                     0.909308            -0.428542  \n",
+       "self_consistency_precision                     -0.406506             0.979652  \n",
+       "self_consistency_recall                         1.000000            -0.216576  \n",
+       "self_consistency_f1                            -0.216576             1.000000  "
+      ]
+     },
+     "execution_count": 39,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "corr_df"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 49,
+   "id": "f81c6d3f",
    "metadata": {},
    "outputs": [],
    "source": [
-    "consistent_functions = []\n",
-    "for model in models:\n",
-    "    df = pd.read_csv(\n",
-    "            f'./run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model={model},string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_{model}.csv'\n",
-    "    )\n",
-    "    for i, data in df.iterrows():\n",
-    "        if data[\"generated_completion_matches\"] is True:\n",
-    "            consistent_functions.append({\n",
-    "                \"fn\": data['original_function'],\n",
-    "                \"model\": model\n",
-    "            })\n",
-    "            \n",
-    "pd.DataFrame(\n",
-    "    consistent_functions\n",
-    ").to_csv('./consistent_functions_by_model.csv')\n",
-    "            \n",
-    "    "
+    "import seaborn as sns"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 69,
+   "id": "545ea2d0",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "<ipython-input-69-55d42da4c07f>:1: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
+      "  to_corr_df = consistency_df[consistency_df.answer_validity == 'valid'][consistency_df.run.isin(['run_1', 'run_2'])].merge(\n"
+     ]
+    }
+   ],
+   "source": [
+    "to_corr_df = consistency_df[consistency_df.answer_validity == 'valid'][consistency_df.run.isin(['run_1', 'run_2'])].merge(\n",
+    "    capability_df, on=['run', 'model']\n",
+    ")"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 70,
+   "id": "9328d1b4",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "<ipython-input-70-5633ac30995c>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
+      "  to_corr_df.corr()\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>ground_truth_consistent</th>\n",
+       "      <th>ground_truth_consistent_num</th>\n",
+       "      <th>self_rule_following_consistency</th>\n",
+       "      <th>self_rule_following_consistency_len</th>\n",
+       "      <th>self_comparison_consistency</th>\n",
+       "      <th>self_comparison_consistency_len</th>\n",
+       "      <th>consistent_and_matched_positive</th>\n",
+       "      <th>consistent_and_matched_positive_len</th>\n",
+       "      <th>consistent_and_matched_negative</th>\n",
+       "      <th>consistent_and_matched_negative_len</th>\n",
+       "      <th>self_consistency_precision</th>\n",
+       "      <th>self_consistency_recall</th>\n",
+       "      <th>self_consistency_f1</th>\n",
+       "      <th>rule_matches_sequence</th>\n",
+       "      <th>completion_is_correct</th>\n",
+       "      <th>len_completed</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>ground_truth_consistent</th>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.996061</td>\n",
+       "      <td>0.989152</td>\n",
+       "      <td>0.996061</td>\n",
+       "      <td>-0.555410</td>\n",
+       "      <td>-0.577828</td>\n",
+       "      <td>-0.272297</td>\n",
+       "      <td>0.996710</td>\n",
+       "      <td>0.407148</td>\n",
+       "      <td>-0.794750</td>\n",
+       "      <td>0.999056</td>\n",
+       "      <td>-0.272391</td>\n",
+       "      <td>0.968110</td>\n",
+       "      <td>0.917333</td>\n",
+       "      <td>0.975605</td>\n",
+       "      <td>-0.299898</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>ground_truth_consistent_num</th>\n",
+       "      <td>0.996061</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.995955</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.513888</td>\n",
+       "      <td>-0.567908</td>\n",
+       "      <td>-0.253970</td>\n",
+       "      <td>0.997836</td>\n",
+       "      <td>0.397893</td>\n",
+       "      <td>-0.772934</td>\n",
+       "      <td>0.994010</td>\n",
+       "      <td>-0.254071</td>\n",
+       "      <td>0.967772</td>\n",
+       "      <td>0.906632</td>\n",
+       "      <td>0.976617</td>\n",
+       "      <td>-0.267011</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_rule_following_consistency</th>\n",
+       "      <td>0.989152</td>\n",
+       "      <td>0.995955</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.995955</td>\n",
+       "      <td>-0.527083</td>\n",
+       "      <td>-0.595188</td>\n",
+       "      <td>-0.304246</td>\n",
+       "      <td>0.994807</td>\n",
+       "      <td>0.384636</td>\n",
+       "      <td>-0.778565</td>\n",
+       "      <td>0.984269</td>\n",
+       "      <td>-0.304354</td>\n",
+       "      <td>0.946959</td>\n",
+       "      <td>0.928316</td>\n",
+       "      <td>0.979662</td>\n",
+       "      <td>-0.274295</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_rule_following_consistency_len</th>\n",
+       "      <td>0.996061</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.995955</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.513888</td>\n",
+       "      <td>-0.567908</td>\n",
+       "      <td>-0.253970</td>\n",
+       "      <td>0.997836</td>\n",
+       "      <td>0.397893</td>\n",
+       "      <td>-0.772934</td>\n",
+       "      <td>0.994010</td>\n",
+       "      <td>-0.254071</td>\n",
+       "      <td>0.967772</td>\n",
+       "      <td>0.906632</td>\n",
+       "      <td>0.976617</td>\n",
+       "      <td>-0.267011</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_comparison_consistency</th>\n",
+       "      <td>-0.555410</td>\n",
+       "      <td>-0.513888</td>\n",
+       "      <td>-0.527083</td>\n",
+       "      <td>-0.513888</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.383419</td>\n",
+       "      <td>0.803591</td>\n",
+       "      <td>-0.533800</td>\n",
+       "      <td>-0.529198</td>\n",
+       "      <td>0.556417</td>\n",
+       "      <td>-0.549295</td>\n",
+       "      <td>0.803546</td>\n",
+       "      <td>-0.390962</td>\n",
+       "      <td>-0.682959</td>\n",
+       "      <td>-0.512001</td>\n",
+       "      <td>0.063348</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_comparison_consistency_len</th>\n",
+       "      <td>-0.577828</td>\n",
+       "      <td>-0.567908</td>\n",
+       "      <td>-0.595188</td>\n",
+       "      <td>-0.567908</td>\n",
+       "      <td>0.383419</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.593326</td>\n",
+       "      <td>-0.616809</td>\n",
+       "      <td>0.283667</td>\n",
+       "      <td>0.930480</td>\n",
+       "      <td>-0.548111</td>\n",
+       "      <td>0.593470</td>\n",
+       "      <td>-0.416822</td>\n",
+       "      <td>-0.754350</td>\n",
+       "      <td>-0.722532</td>\n",
+       "      <td>0.826080</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>consistent_and_matched_positive</th>\n",
+       "      <td>-0.272297</td>\n",
+       "      <td>-0.253970</td>\n",
+       "      <td>-0.304246</td>\n",
+       "      <td>-0.253970</td>\n",
+       "      <td>0.803591</td>\n",
+       "      <td>0.593326</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.293303</td>\n",
+       "      <td>-0.105692</td>\n",
+       "      <td>0.546934</td>\n",
+       "      <td>-0.243160</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.026925</td>\n",
+       "      <td>-0.553952</td>\n",
+       "      <td>-0.349903</td>\n",
+       "      <td>0.243735</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>consistent_and_matched_positive_len</th>\n",
+       "      <td>0.996710</td>\n",
+       "      <td>0.997836</td>\n",
+       "      <td>0.994807</td>\n",
+       "      <td>0.997836</td>\n",
+       "      <td>-0.533800</td>\n",
+       "      <td>-0.616809</td>\n",
+       "      <td>-0.293303</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.367712</td>\n",
+       "      <td>-0.812829</td>\n",
+       "      <td>0.992915</td>\n",
+       "      <td>-0.293406</td>\n",
+       "      <td>0.956579</td>\n",
+       "      <td>0.923849</td>\n",
+       "      <td>0.986727</td>\n",
+       "      <td>-0.319115</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>consistent_and_matched_negative</th>\n",
+       "      <td>0.407148</td>\n",
+       "      <td>0.397893</td>\n",
+       "      <td>0.384636</td>\n",
+       "      <td>0.397893</td>\n",
+       "      <td>-0.529198</td>\n",
+       "      <td>0.283667</td>\n",
+       "      <td>-0.105692</td>\n",
+       "      <td>0.367712</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.002318</td>\n",
+       "      <td>0.429298</td>\n",
+       "      <td>-0.105516</td>\n",
+       "      <td>0.431570</td>\n",
+       "      <td>0.302083</td>\n",
+       "      <td>0.232451</td>\n",
+       "      <td>0.488702</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>consistent_and_matched_negative_len</th>\n",
+       "      <td>-0.794750</td>\n",
+       "      <td>-0.772934</td>\n",
+       "      <td>-0.778565</td>\n",
+       "      <td>-0.772934</td>\n",
+       "      <td>0.556417</td>\n",
+       "      <td>0.930480</td>\n",
+       "      <td>0.546934</td>\n",
+       "      <td>-0.812829</td>\n",
+       "      <td>0.002318</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.776187</td>\n",
+       "      <td>0.547042</td>\n",
+       "      <td>-0.664783</td>\n",
+       "      <td>-0.875820</td>\n",
+       "      <td>-0.875239</td>\n",
+       "      <td>0.733928</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_precision</th>\n",
+       "      <td>0.999056</td>\n",
+       "      <td>0.994010</td>\n",
+       "      <td>0.984269</td>\n",
+       "      <td>0.994010</td>\n",
+       "      <td>-0.549295</td>\n",
+       "      <td>-0.548111</td>\n",
+       "      <td>-0.243160</td>\n",
+       "      <td>0.992915</td>\n",
+       "      <td>0.429298</td>\n",
+       "      <td>-0.776187</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.243249</td>\n",
+       "      <td>0.975870</td>\n",
+       "      <td>0.904865</td>\n",
+       "      <td>0.965998</td>\n",
+       "      <td>-0.279865</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_recall</th>\n",
+       "      <td>-0.272391</td>\n",
+       "      <td>-0.254071</td>\n",
+       "      <td>-0.304354</td>\n",
+       "      <td>-0.254071</td>\n",
+       "      <td>0.803546</td>\n",
+       "      <td>0.593470</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.293406</td>\n",
+       "      <td>-0.105516</td>\n",
+       "      <td>0.547042</td>\n",
+       "      <td>-0.243249</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.027016</td>\n",
+       "      <td>-0.554060</td>\n",
+       "      <td>-0.350030</td>\n",
+       "      <td>0.243852</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>self_consistency_f1</th>\n",
+       "      <td>0.968110</td>\n",
+       "      <td>0.967772</td>\n",
+       "      <td>0.946959</td>\n",
+       "      <td>0.967772</td>\n",
+       "      <td>-0.390962</td>\n",
+       "      <td>-0.416822</td>\n",
+       "      <td>-0.026925</td>\n",
+       "      <td>0.956579</td>\n",
+       "      <td>0.431570</td>\n",
+       "      <td>-0.664783</td>\n",
+       "      <td>0.975870</td>\n",
+       "      <td>-0.027016</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.805998</td>\n",
+       "      <td>0.913847</td>\n",
+       "      <td>-0.212596</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>rule_matches_sequence</th>\n",
+       "      <td>0.917333</td>\n",
+       "      <td>0.906632</td>\n",
+       "      <td>0.928316</td>\n",
+       "      <td>0.906632</td>\n",
+       "      <td>-0.682959</td>\n",
+       "      <td>-0.754350</td>\n",
+       "      <td>-0.553952</td>\n",
+       "      <td>0.923849</td>\n",
+       "      <td>0.302083</td>\n",
+       "      <td>-0.875820</td>\n",
+       "      <td>0.904865</td>\n",
+       "      <td>-0.554060</td>\n",
+       "      <td>0.805998</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>0.937277</td>\n",
+       "      <td>-0.442731</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>completion_is_correct</th>\n",
+       "      <td>0.975605</td>\n",
+       "      <td>0.976617</td>\n",
+       "      <td>0.979662</td>\n",
+       "      <td>0.976617</td>\n",
+       "      <td>-0.512001</td>\n",
+       "      <td>-0.722532</td>\n",
+       "      <td>-0.349903</td>\n",
+       "      <td>0.986727</td>\n",
+       "      <td>0.232451</td>\n",
+       "      <td>-0.875239</td>\n",
+       "      <td>0.965998</td>\n",
+       "      <td>-0.350030</td>\n",
+       "      <td>0.913847</td>\n",
+       "      <td>0.937277</td>\n",
+       "      <td>1.000000</td>\n",
+       "      <td>-0.439587</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>len_completed</th>\n",
+       "      <td>-0.299898</td>\n",
+       "      <td>-0.267011</td>\n",
+       "      <td>-0.274295</td>\n",
+       "      <td>-0.267011</td>\n",
+       "      <td>0.063348</td>\n",
+       "      <td>0.826080</td>\n",
+       "      <td>0.243735</td>\n",
+       "      <td>-0.319115</td>\n",
+       "      <td>0.488702</td>\n",
+       "      <td>0.733928</td>\n",
+       "      <td>-0.279865</td>\n",
+       "      <td>0.243852</td>\n",
+       "      <td>-0.212596</td>\n",
+       "      <td>-0.442731</td>\n",
+       "      <td>-0.439587</td>\n",
+       "      <td>1.000000</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                                     ground_truth_consistent  \\\n",
+       "ground_truth_consistent                             1.000000   \n",
+       "ground_truth_consistent_num                         0.996061   \n",
+       "self_rule_following_consistency                     0.989152   \n",
+       "self_rule_following_consistency_len                 0.996061   \n",
+       "self_comparison_consistency                        -0.555410   \n",
+       "self_comparison_consistency_len                    -0.577828   \n",
+       "consistent_and_matched_positive                    -0.272297   \n",
+       "consistent_and_matched_positive_len                 0.996710   \n",
+       "consistent_and_matched_negative                     0.407148   \n",
+       "consistent_and_matched_negative_len                -0.794750   \n",
+       "self_consistency_precision                          0.999056   \n",
+       "self_consistency_recall                            -0.272391   \n",
+       "self_consistency_f1                                 0.968110   \n",
+       "rule_matches_sequence                               0.917333   \n",
+       "completion_is_correct                               0.975605   \n",
+       "len_completed                                      -0.299898   \n",
+       "\n",
+       "                                     ground_truth_consistent_num  \\\n",
+       "ground_truth_consistent                                 0.996061   \n",
+       "ground_truth_consistent_num                             1.000000   \n",
+       "self_rule_following_consistency                         0.995955   \n",
+       "self_rule_following_consistency_len                     1.000000   \n",
+       "self_comparison_consistency                            -0.513888   \n",
+       "self_comparison_consistency_len                        -0.567908   \n",
+       "consistent_and_matched_positive                        -0.253970   \n",
+       "consistent_and_matched_positive_len                     0.997836   \n",
+       "consistent_and_matched_negative                         0.397893   \n",
+       "consistent_and_matched_negative_len                    -0.772934   \n",
+       "self_consistency_precision                              0.994010   \n",
+       "self_consistency_recall                                -0.254071   \n",
+       "self_consistency_f1                                     0.967772   \n",
+       "rule_matches_sequence                                   0.906632   \n",
+       "completion_is_correct                                   0.976617   \n",
+       "len_completed                                          -0.267011   \n",
+       "\n",
+       "                                     self_rule_following_consistency  \\\n",
+       "ground_truth_consistent                                     0.989152   \n",
+       "ground_truth_consistent_num                                 0.995955   \n",
+       "self_rule_following_consistency                             1.000000   \n",
+       "self_rule_following_consistency_len                         0.995955   \n",
+       "self_comparison_consistency                                -0.527083   \n",
+       "self_comparison_consistency_len                            -0.595188   \n",
+       "consistent_and_matched_positive                            -0.304246   \n",
+       "consistent_and_matched_positive_len                         0.994807   \n",
+       "consistent_and_matched_negative                             0.384636   \n",
+       "consistent_and_matched_negative_len                        -0.778565   \n",
+       "self_consistency_precision                                  0.984269   \n",
+       "self_consistency_recall                                    -0.304354   \n",
+       "self_consistency_f1                                         0.946959   \n",
+       "rule_matches_sequence                                       0.928316   \n",
+       "completion_is_correct                                       0.979662   \n",
+       "len_completed                                              -0.274295   \n",
+       "\n",
+       "                                     self_rule_following_consistency_len  \\\n",
+       "ground_truth_consistent                                         0.996061   \n",
+       "ground_truth_consistent_num                                     1.000000   \n",
+       "self_rule_following_consistency                                 0.995955   \n",
+       "self_rule_following_consistency_len                             1.000000   \n",
+       "self_comparison_consistency                                    -0.513888   \n",
+       "self_comparison_consistency_len                                -0.567908   \n",
+       "consistent_and_matched_positive                                -0.253970   \n",
+       "consistent_and_matched_positive_len                             0.997836   \n",
+       "consistent_and_matched_negative                                 0.397893   \n",
+       "consistent_and_matched_negative_len                            -0.772934   \n",
+       "self_consistency_precision                                      0.994010   \n",
+       "self_consistency_recall                                        -0.254071   \n",
+       "self_consistency_f1                                             0.967772   \n",
+       "rule_matches_sequence                                           0.906632   \n",
+       "completion_is_correct                                           0.976617   \n",
+       "len_completed                                                  -0.267011   \n",
+       "\n",
+       "                                     self_comparison_consistency  \\\n",
+       "ground_truth_consistent                                -0.555410   \n",
+       "ground_truth_consistent_num                            -0.513888   \n",
+       "self_rule_following_consistency                        -0.527083   \n",
+       "self_rule_following_consistency_len                    -0.513888   \n",
+       "self_comparison_consistency                             1.000000   \n",
+       "self_comparison_consistency_len                         0.383419   \n",
+       "consistent_and_matched_positive                         0.803591   \n",
+       "consistent_and_matched_positive_len                    -0.533800   \n",
+       "consistent_and_matched_negative                        -0.529198   \n",
+       "consistent_and_matched_negative_len                     0.556417   \n",
+       "self_consistency_precision                             -0.549295   \n",
+       "self_consistency_recall                                 0.803546   \n",
+       "self_consistency_f1                                    -0.390962   \n",
+       "rule_matches_sequence                                  -0.682959   \n",
+       "completion_is_correct                                  -0.512001   \n",
+       "len_completed                                           0.063348   \n",
+       "\n",
+       "                                     self_comparison_consistency_len  \\\n",
+       "ground_truth_consistent                                    -0.577828   \n",
+       "ground_truth_consistent_num                                -0.567908   \n",
+       "self_rule_following_consistency                            -0.595188   \n",
+       "self_rule_following_consistency_len                        -0.567908   \n",
+       "self_comparison_consistency                                 0.383419   \n",
+       "self_comparison_consistency_len                             1.000000   \n",
+       "consistent_and_matched_positive                             0.593326   \n",
+       "consistent_and_matched_positive_len                        -0.616809   \n",
+       "consistent_and_matched_negative                             0.283667   \n",
+       "consistent_and_matched_negative_len                         0.930480   \n",
+       "self_consistency_precision                                 -0.548111   \n",
+       "self_consistency_recall                                     0.593470   \n",
+       "self_consistency_f1                                        -0.416822   \n",
+       "rule_matches_sequence                                      -0.754350   \n",
+       "completion_is_correct                                      -0.722532   \n",
+       "len_completed                                               0.826080   \n",
+       "\n",
+       "                                     consistent_and_matched_positive  \\\n",
+       "ground_truth_consistent                                    -0.272297   \n",
+       "ground_truth_consistent_num                                -0.253970   \n",
+       "self_rule_following_consistency                            -0.304246   \n",
+       "self_rule_following_consistency_len                        -0.253970   \n",
+       "self_comparison_consistency                                 0.803591   \n",
+       "self_comparison_consistency_len                             0.593326   \n",
+       "consistent_and_matched_positive                             1.000000   \n",
+       "consistent_and_matched_positive_len                        -0.293303   \n",
+       "consistent_and_matched_negative                            -0.105692   \n",
+       "consistent_and_matched_negative_len                         0.546934   \n",
+       "self_consistency_precision                                 -0.243160   \n",
+       "self_consistency_recall                                     1.000000   \n",
+       "self_consistency_f1                                        -0.026925   \n",
+       "rule_matches_sequence                                      -0.553952   \n",
+       "completion_is_correct                                      -0.349903   \n",
+       "len_completed                                               0.243735   \n",
+       "\n",
+       "                                     consistent_and_matched_positive_len  \\\n",
+       "ground_truth_consistent                                         0.996710   \n",
+       "ground_truth_consistent_num                                     0.997836   \n",
+       "self_rule_following_consistency                                 0.994807   \n",
+       "self_rule_following_consistency_len                             0.997836   \n",
+       "self_comparison_consistency                                    -0.533800   \n",
+       "self_comparison_consistency_len                                -0.616809   \n",
+       "consistent_and_matched_positive                                -0.293303   \n",
+       "consistent_and_matched_positive_len                             1.000000   \n",
+       "consistent_and_matched_negative                                 0.367712   \n",
+       "consistent_and_matched_negative_len                            -0.812829   \n",
+       "self_consistency_precision                                      0.992915   \n",
+       "self_consistency_recall                                        -0.293406   \n",
+       "self_consistency_f1                                             0.956579   \n",
+       "rule_matches_sequence                                           0.923849   \n",
+       "completion_is_correct                                           0.986727   \n",
+       "len_completed                                                  -0.319115   \n",
+       "\n",
+       "                                     consistent_and_matched_negative  \\\n",
+       "ground_truth_consistent                                     0.407148   \n",
+       "ground_truth_consistent_num                                 0.397893   \n",
+       "self_rule_following_consistency                             0.384636   \n",
+       "self_rule_following_consistency_len                         0.397893   \n",
+       "self_comparison_consistency                                -0.529198   \n",
+       "self_comparison_consistency_len                             0.283667   \n",
+       "consistent_and_matched_positive                            -0.105692   \n",
+       "consistent_and_matched_positive_len                         0.367712   \n",
+       "consistent_and_matched_negative                             1.000000   \n",
+       "consistent_and_matched_negative_len                         0.002318   \n",
+       "self_consistency_precision                                  0.429298   \n",
+       "self_consistency_recall                                    -0.105516   \n",
+       "self_consistency_f1                                         0.431570   \n",
+       "rule_matches_sequence                                       0.302083   \n",
+       "completion_is_correct                                       0.232451   \n",
+       "len_completed                                               0.488702   \n",
+       "\n",
+       "                                     consistent_and_matched_negative_len  \\\n",
+       "ground_truth_consistent                                        -0.794750   \n",
+       "ground_truth_consistent_num                                    -0.772934   \n",
+       "self_rule_following_consistency                                -0.778565   \n",
+       "self_rule_following_consistency_len                            -0.772934   \n",
+       "self_comparison_consistency                                     0.556417   \n",
+       "self_comparison_consistency_len                                 0.930480   \n",
+       "consistent_and_matched_positive                                 0.546934   \n",
+       "consistent_and_matched_positive_len                            -0.812829   \n",
+       "consistent_and_matched_negative                                 0.002318   \n",
+       "consistent_and_matched_negative_len                             1.000000   \n",
+       "self_consistency_precision                                     -0.776187   \n",
+       "self_consistency_recall                                         0.547042   \n",
+       "self_consistency_f1                                            -0.664783   \n",
+       "rule_matches_sequence                                          -0.875820   \n",
+       "completion_is_correct                                          -0.875239   \n",
+       "len_completed                                                   0.733928   \n",
+       "\n",
+       "                                     self_consistency_precision  \\\n",
+       "ground_truth_consistent                                0.999056   \n",
+       "ground_truth_consistent_num                            0.994010   \n",
+       "self_rule_following_consistency                        0.984269   \n",
+       "self_rule_following_consistency_len                    0.994010   \n",
+       "self_comparison_consistency                           -0.549295   \n",
+       "self_comparison_consistency_len                       -0.548111   \n",
+       "consistent_and_matched_positive                       -0.243160   \n",
+       "consistent_and_matched_positive_len                    0.992915   \n",
+       "consistent_and_matched_negative                        0.429298   \n",
+       "consistent_and_matched_negative_len                   -0.776187   \n",
+       "self_consistency_precision                             1.000000   \n",
+       "self_consistency_recall                               -0.243249   \n",
+       "self_consistency_f1                                    0.975870   \n",
+       "rule_matches_sequence                                  0.904865   \n",
+       "completion_is_correct                                  0.965998   \n",
+       "len_completed                                         -0.279865   \n",
+       "\n",
+       "                                     self_consistency_recall  \\\n",
+       "ground_truth_consistent                            -0.272391   \n",
+       "ground_truth_consistent_num                        -0.254071   \n",
+       "self_rule_following_consistency                    -0.304354   \n",
+       "self_rule_following_consistency_len                -0.254071   \n",
+       "self_comparison_consistency                         0.803546   \n",
+       "self_comparison_consistency_len                     0.593470   \n",
+       "consistent_and_matched_positive                     1.000000   \n",
+       "consistent_and_matched_positive_len                -0.293406   \n",
+       "consistent_and_matched_negative                    -0.105516   \n",
+       "consistent_and_matched_negative_len                 0.547042   \n",
+       "self_consistency_precision                         -0.243249   \n",
+       "self_consistency_recall                             1.000000   \n",
+       "self_consistency_f1                                -0.027016   \n",
+       "rule_matches_sequence                              -0.554060   \n",
+       "completion_is_correct                              -0.350030   \n",
+       "len_completed                                       0.243852   \n",
+       "\n",
+       "                                     self_consistency_f1  \\\n",
+       "ground_truth_consistent                         0.968110   \n",
+       "ground_truth_consistent_num                     0.967772   \n",
+       "self_rule_following_consistency                 0.946959   \n",
+       "self_rule_following_consistency_len             0.967772   \n",
+       "self_comparison_consistency                    -0.390962   \n",
+       "self_comparison_consistency_len                -0.416822   \n",
+       "consistent_and_matched_positive                -0.026925   \n",
+       "consistent_and_matched_positive_len             0.956579   \n",
+       "consistent_and_matched_negative                 0.431570   \n",
+       "consistent_and_matched_negative_len            -0.664783   \n",
+       "self_consistency_precision                      0.975870   \n",
+       "self_consistency_recall                        -0.027016   \n",
+       "self_consistency_f1                             1.000000   \n",
+       "rule_matches_sequence                           0.805998   \n",
+       "completion_is_correct                           0.913847   \n",
+       "len_completed                                  -0.212596   \n",
+       "\n",
+       "                                     rule_matches_sequence  \\\n",
+       "ground_truth_consistent                           0.917333   \n",
+       "ground_truth_consistent_num                       0.906632   \n",
+       "self_rule_following_consistency                   0.928316   \n",
+       "self_rule_following_consistency_len               0.906632   \n",
+       "self_comparison_consistency                      -0.682959   \n",
+       "self_comparison_consistency_len                  -0.754350   \n",
+       "consistent_and_matched_positive                  -0.553952   \n",
+       "consistent_and_matched_positive_len               0.923849   \n",
+       "consistent_and_matched_negative                   0.302083   \n",
+       "consistent_and_matched_negative_len              -0.875820   \n",
+       "self_consistency_precision                        0.904865   \n",
+       "self_consistency_recall                          -0.554060   \n",
+       "self_consistency_f1                               0.805998   \n",
+       "rule_matches_sequence                             1.000000   \n",
+       "completion_is_correct                             0.937277   \n",
+       "len_completed                                    -0.442731   \n",
+       "\n",
+       "                                     completion_is_correct  len_completed  \n",
+       "ground_truth_consistent                           0.975605      -0.299898  \n",
+       "ground_truth_consistent_num                       0.976617      -0.267011  \n",
+       "self_rule_following_consistency                   0.979662      -0.274295  \n",
+       "self_rule_following_consistency_len               0.976617      -0.267011  \n",
+       "self_comparison_consistency                      -0.512001       0.063348  \n",
+       "self_comparison_consistency_len                  -0.722532       0.826080  \n",
+       "consistent_and_matched_positive                  -0.349903       0.243735  \n",
+       "consistent_and_matched_positive_len               0.986727      -0.319115  \n",
+       "consistent_and_matched_negative                   0.232451       0.488702  \n",
+       "consistent_and_matched_negative_len              -0.875239       0.733928  \n",
+       "self_consistency_precision                        0.965998      -0.279865  \n",
+       "self_consistency_recall                          -0.350030       0.243852  \n",
+       "self_consistency_f1                               0.913847      -0.212596  \n",
+       "rule_matches_sequence                             0.937277      -0.442731  \n",
+       "completion_is_correct                             1.000000      -0.439587  \n",
+       "len_completed                                    -0.439587       1.000000  "
+      ]
+     },
+     "execution_count": 70,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "to_corr_df.corr()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 64,
+   "id": "197b4d0b",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "[Text(0.5, 0, 'Self consistency (recall)'),\n",
+       " Text(0, 0.5, 'Explanation correctness')]"
+      ]
+     },
+     "execution_count": 64,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAwSklEQVR4nO3dd3gVddbA8e8hBEJJ6ChSo1QhIYSgSHERFlBUFEVRcaVZ8PVVLK++sitFXHUtq8sqrC8WQFYELCtFBQVFLCgQDaAUKQYEAkjoJUCS8/4xk5ieSbn3Jrnn8zz3uTO/aecO4dy5v5k5I6qKMcaY4FEp0AEYY4zxL0v8xhgTZCzxG2NMkLHEb4wxQcYSvzHGBJnKgQ7Ai/r162uLFi0CHYYxxpQr8fHxB1S1Qc72cpH4W7RowZo1awIdhjHGlCsisiOvduvqMcaYIGOJ3xhjgowlfmOMCTKW+I0xJshY4jfGmCBTLq7qKY7EI4lsPLiRdE2nTZ02tKzTMtAhGWNMmVAhE/+WQ1sYtWQUh04fAqB65eq80f8N2tdvH+DIjDEm8CpkV89nOz/LTPoAJ1NP8s7P72AlqI0xpoIm/sSjibnath/eTpqm+T8YY4wpYypk4u/bvG+ututbX0/lShWyZ8sYY4qkQib+uHPieKzrY9SuWpuaoTW5P/Z+ejTuEeiwjDGmTKiQh8ARVSMY0mYIvZv2Jl3TOafGOYEOyRhjyowKmfgzNKieqyidMcYEvQrZ1WOMMSZ/lviNMSbIWOI3xpggU6H7+P1h17Fd7DuxjzphdWge0ZyQSiGBDskYYwpkib8Evt3zLQ998RBHzxylSqUqjOs6jgHnD6BKSJVAh2aMMfmyrp5i2ndiH49++ShHzxwF4Ez6GSasnMD2I9sDHJkxxhTMEn8xHTh1gOSU5Gxt6ZrOvhP7AhSRMcZ449PELyK1ReRdEdkkIhtF5BIRqSsin4rIFve9ji9j8JW61epSN6xutjZBaFi9YYAiMsYYb3x9xD8ZWKyqbYGOwEbgUWCZqrYClrnj5U6jGo14qsdTVK9cHYDKUpnHuj7GBbUvCHBkxhhTMPFVqWIRqQUkAOdrlo2IyGagl6omiUgjYLmqtiloXXFxcbpmzRqfxFkSqsrOYzvZe2IvdcPq0iKiBaEhoYEOyxhjABCReFWNy9nuy6t6IoHfgOki0hGIB8YA56hqkjvPXiDPQjoicidwJ0CzZs18GGbxiQjNI5rTPKJ5oEMxxhjPfNnVUxmIBf6lqp2AE+To1nF/CeT5k0NVp6lqnKrGNWhgNXeMMaa0+DLx7wJ2qep37vi7OF8E+9wuHtz3/T6MwRhjTA4+S/yquhf4VUQy+u/7ABuABcAwt20YMN9XMRhjjMnN13fu3gu8JSJVgO3ACJwvm3kiMgrYAdzo4xiMMcZk4dPEr6oJQK4zyjhH/8YYYwLA7tw1xpggY4nfGGOCjCV+Y4wJMpb4jTEmyFjiN8aYIGOJ3xhjgowlfmOMCTKW+I0xJshY4jfGmCBjid8YY4KMJX5jjAkylviNMSbIWOI3xpggY4nfGGOCjCV+Y4wJMr5+EIsxxlQsp4/D3vVwOBHCG8G5HaF6nUBHVSSW+I0xxqu0VPh+Jiz58+9tF4+G3uOgas3AxVVE1tVjjDFeHdwGSydmb/vuFfhtc0DCKS5L/MYY49XpY5B2Jnd7ymG/h1ISlviNMcar2s2g7vnZ26pGQJ3IwMRTTIUmfhG5QESqusO9ROQ+Eant88iMMaasqdkQbngTmvdwxs/pAEPfgXrnF7xcGePl5O57QJyItASmAfOB2cAAXwZmjDFlUqMouGUOnDgAYbXL3RU94C3xp6tqqogMAl5S1ZdE5AdfB2aMMWVW1XDnVU556eM/KyI3A8OARW5bqO9CMsYY40teEv8I4BLgSVX9RUQigVm+DcsYY4yvFNrVo6obgPsARKQOEK6qz/g6MGOMMb7h5aqe5SISISJ1ge+BV0XkBd+HZowxxhe8dPXUUtWjwHXAm6p6MfBHLysXkUQRWS8iCSKyxm2rKyKfisgW9738nRI3xphyzEvirywijYAb+f3kblFcpqoxqhrnjj8KLFPVVsAyd9wYY4yfeEn8k4AlwDZVXS0i5wNbSrDNa4CZ7vBM4NoSrMsYY0wRiar6buUivwCHAAX+T1WnichhVa3tThfgUMZ4jmXvBO4EaNasWecdO3b4LE5jjKmIRCQ+S29LJi8nd1uLyDIR+dEdjxaRxzxut4eqxgJXAPeIyKVZJ6rzrZPnN4+qTlPVOFWNa9CggcfNGWOMKYyXrp5XgbHAWQBVXQfc5GXlqrrbfd8P/Ae4CNjnnjPAfd9f9LCNMcYUl5fEX11VV+VoSy1sIRGpISLhGcNAP+BHYAHOXcC47/O9h2uMMaakvNTqOSAiF+B2yYjIYCDJw3LnAP9xuvGpDMxW1cUishqYJyKjgB04VwsZY4zxEy+J/x6cqpxtRWQ38Atwa2ELqep2oGMe7clAnyLGaYwxppR4KdmwHfij211TSVWP+T4sY4wxvlJo4ncfwnI90ALnZi4AVHWSTyMzxpg8nE7cwektW5DKIVRt04Yq550X6JDKHS9dPfOBI0A8cNq34RhjTP5ObdjAryNHkXb4MAChLVrQ9F9TqRpZvh59GGheEn8TVb3c55EYY0wBNC2NQ7Pfzkz6AGcTEznx9deW+IvIy+Wc34hIlM8jMcaYAqSfOUPKTz/lak/ZUpIKMsHJS+LvAcSLyGYRWedW21zn68CMMSarkGrVqHXNwFztNXv0DEA05ZuXrp4rfB6FMcZ4ENG/P2d3/sqhuXOR0FDq3z2a6l1ylaIxhSi0SJuIzFLVPxXW5ktxcXG6Zs0af23OGFOG6dmznNm9BwmpRGjjxkglLx0XwSm/Im1ejvjb51hRCNC5tAIzxpiikNBQqrZoHugwyrV8vypFZKyIHAOiReSo+zqGU1TN6usYY0w5lW/iV9WnVTUceE5VI9xXuKrWU9WxfozRGGNMKfLSObZKRGpljIhIbRG51nchGWOM8SUviX+Cqh7JGFHVw8AEn0VkjDHGp7wk/rzm8XJS2BhjTBnkJfGvEZEXROQC9/UCTt0eY4wx5ZCXxH8vcAaYC8wBUnBq9BtjjCmHvNTjPwE8KiI13GFjjDHlWKFH/CLSTUQ2ABvd8Y4iMtXnkRljjPEJL109LwL9gWQAVV0LXOrLoIwxxviOpyIXqvprjqY0H8RijDHGD7xclvmriHQDVERCgTG43T7GGGPKHy9H/KNxruJpDOwGYrCreowxptwq8IjfrcQ5WVWH+ikeY4wxPlZg4lfVNBFpLiJVVPWMv4IyxpiAOn0MDu+EylWhTiRUCgl0RKXKSx//duBrEVkAZF7Hr6ov+CwqY4wJlORt8NEjsG2pk/h7jYXOI6Ba7UBHVmq89PFvAxa584ZneRljTMWSlgrfvuIkfYDU07B0IuyuWFVqvPTxty5JH7+7jjXAblW9SkQicUo/1MOp+fMn60YyxpQJpw7Cxg9ytyetg5Z9/B6OrxR4xK+qaUBzEalSgm3kvPzzGeBFVW0JHAJGlWDdxhhTeqqEQ6NOudvrtvB7KL7kpasno49/nIg8mPHysnIRaQJcCbzmjgvQG3jXnWUmcG2RozbGGF+oUg16/S+E1f69LbIXNOkSoIB8w8vJ3W3uK6OPvyj+ATySZbl6wGFVTXXHd+HcH5CLiNwJ3AnQrFmzIm7WGGOKqXFnuOMzOPAzhFaHcy6EGg0CHVWp8lKd83EAEanpjh/3smIRuQrYr6rxItKrqIGp6jRgGkBcXJwWdXljjCm2ehc4rwqq0MQvIh2AWUBdd/wAcJuq/lTIot2BgSIyAAgDIoDJQG0Rqewe9TfBuRvYGGOMn3jp458GPKiqzVW1OfAQ8GphC6nqWFVtoqotgJuAz9yrgz4HBruzDQPmFytyY4wxxeIl8ddQ1c8zRlR1OVCjBNv8X+BBEdmK0+f/egnWZYwxpog83bkrIuNwunsAbsW50scz98tiuTu8HbioKMsbY4wpPV6O+EcCDYD3gfeA+m6bMcZkSjt+nPSUlECHYTzwclXPIeA+P8RijCmHUg8e5NjSZRyaNYuQevWoP3o01eM6I5W9dCiYQPDyzN1PRaR2lvE6IrLEp1EZY8qNY4uXsHf8eE5v2cLJb79l56hRpPxU2EV/JpC8dPXUV9XDGSPuL4CGPovIGFNupB4+TPL06dkb09I4+f0PgQnIeOIl8aeLSOatsyLSHLAbqowxSOXKVKpZM1d7perVAhCN8cpL4v8L8JWIzBKRfwMrgLG+DcsYUx6E1KxJg/uynwIMqV2b6p07Bygi44WXk7uLRSQW6Oo23a+qB3wbljGmvKjR7RKazXqTE19/TUidOtS45BKqtmwZ6LBMATyddncT/SIfx2KMKYcqVa1KjS5dqNGlYlWwrMi8dPUYY4ypQCzxG2NMkPHU1eM+PvGcrPOr6k5fBWWMMcZ3vJRlvheYAOwD0t1mBaJ9GJcxxhgf8XLEPwZoo6rJvg7GGGOM73np4/8VOOLrQIwxxviHp7LMwHIR+RA4ndGoqi/4LCpjjDE+4yXx73RfVdyXMcaYcsxnD1s3xhhTNnkpy9xBRH4AfgJ+EpF4EWnv+9CMMcb4gs8etm6MMaZsCsTD1o0xxgSQXx62bowxpuwo6sPW33eH7WHrxhhTTtnD1o0xJsjkm/hF5B+qer+ILCSPRy2q6kCfRmaMMcYnCjriz+jTf94fgRhjjPGPfBO/qsa7gzGqOjnrNBEZA3zhy8CMMcb4hpeTu8PyaBteynEYY4zxk4L6+G8GbgEiRWRBlknhwMHCViwiYcAKoKq7nXdVdYKIRAJzgHpAPPAnVT1T/I9gjDGmKArq4/8GSALqA3/P0n4MWOdh3aeB3qp6XERCga9E5GPgQeBFVZ0jIq8Ao4B/FSt6Y4wxRVZQH/8OYAdwSXFWrKoKZBR0C3VfCvTG+SUBMBOYiCV+Y4zxGy9F2rqKyGoROS4iZ0QkTUSOelm5iISISAKwH/gU2AYcVtVUd5ZdQON8lr1TRNaIyJrffvvN04cxxhhTOC8nd18Gbga2ANWA24EpXlauqmmqGgM0AS4C2noNTFWnqWqcqsY1aNDA62LGGGMK4SXxo6pbgRA3kU8HLi/KRlT1MPA5TrdRbRHJ6GJqAuwuyrqMMcaUjJcibSdFpAqQICLP4pzw9dJF1AA4q6qHRaQa0Bd4BucLYDDOlT3DgPnFCfzs2bPs2rWLlJSU4ixuypiwsDCaNGlCaGhooEMxpsLzkvj/hJPo/xt4AGgKXO9huUbATBEJcZefp6qLRGQDMEdE/gr8ALxenMB37dpFeHg4LVq0QESKswpTRqgqycnJ7Nq1i8jIyECHY0yF56VI2w53MAV43OuKVXUd0CmP9u04/f0lkpKSYkm/ghAR6tWrh53EN8Y/Ck38ItId55LL5lnnV9XzfReWN5b0Kw77tzTGf7x09byO08UTD6T5NhxjjDG+5uWqniOq+rGq7lfV5IyXzyMz+WrRogUHDhwo8TzGmODk5Yj/cxF5DufpW6czGlX1e59FZYwxxme8HPFfDMQBT+HU7Pk7VqO/yBITE2nbti3Dhw+ndevWDB06lKVLl9K9e3datWrFqlWrOHjwINdeey3R0dF07dqVdeuckkjJycn069eP9u3bc/vtt+NUw3D8+9//5qKLLiImJoa77rqLtDTrjTPGFKzQxK+ql+Xx6u2P4CqarVu38tBDD7Fp0yY2bdrE7Nmz+eqrr3j++ed56qmnmDBhAp06dWLdunU89dRT3HbbbQA8/vjj9OjRg59++olBgwaxc+dOADZu3MjcuXP5+uuvSUhIICQkhLfeeiuQH9EYUw546epBRK4E2gNhGW2qOslXQVVUkZGRREVFAdC+fXv69OmDiBAVFUViYiI7duzgvffeA6B3794kJydz9OhRVqxYwfvvvw/AlVdeSZ06dQBYtmwZ8fHxdOnSBYBTp07RsGHDAHwyY0x54uVyzleA6sBlwGs4d92u8nFcFVLVqlUzhytVqpQ5XqlSJVJTU4t816qqMmzYMJ5++ulSjdMYU7F56ePvpqq3AYdU9XGcejutfRtWcOrZs2dmV83y5cupX78+ERERXHrppcyePRuAjz/+mEOHDgHQp08f3n33Xfbv3w/AwYMH2bFjR94rN8YYl5eunlPu+0kROQ9IxinHYErZxIkTGTlyJNHR0VSvXp2ZM2cCMGHCBG6++Wbat29Pt27daNasGQAXXnghf/3rX+nXrx/p6emEhoYyZcoUmjdvHsiPYYwp4yTrFSJ5ziAyDngJ6INTjlmB11R1nO/Dc8TFxemaNWuytW3cuJF27dr5KwTjB/ZvakzpEpF4VY3L2e6lVs8T7uB7IrIICFPVI6UdoDHGGP8o6GHr1xUwDVV93zchGWOM8aWCjvivLmCa4tzJa4wxppwp6GHrI/wZiDHGGP/w8iSteiLyTxH5XkTiRWSyiNTzR3DGGGNKn5fr+OcAv+E8dWuwOzzXl0EZY4zxHS+Jv5GqPqGqv7ivvwLn+Dqw8mbixIk8/3zRa9eNHz+epUuXFmubAwYM4PDhw8Va1hgTvLzcwPWJiNwEzHPHBwNLfBeSb3zww26eW7KZPYdPcV7tajzcvw3Xdmoc6LCYNKn4JY8++uijUozEGBMsvBzx3wHMxqnFfxqn6+cuETkmIkd9GVxp+eCH3Yx9fz27D59Cgd2HTzH2/fV88MPuEq33ySefpHXr1vTo0YPNmzcD8Oqrr9KlSxc6duzI9ddfz8mTJzly5AjNmzcnPT0dgBMnTtC0aVPOnj3L8OHDeffddwHn4SkTJkwgNjaWqKgoNm3aBMDx48cZMWIEUVFRREdHZxZys4etGGOKw0tZ5nBVraSqoe6rktsWrqoR/giypJ5bsplTZ7PXqT91No3nlmwu9jrj4+OZM2cOCQkJfPTRR6xevRqA6667jtWrV7N27VratWvH66+/Tq1atYiJieGLL74AYNGiRfTv3z/Pomz169fn+++/5+67787sOnriiSeoVasW69evZ926dfTubVWxjTHF5+WqnlE5xkNEZILvQip9ew6fKlK7F19++SWDBg2ievXqREREMHDgQAB+/PFHevbsSVRUFG+99RY//fQTAEOGDGHuXOec+Jw5cxgyZEie673uOue+uc6dO5OYmAjA0qVLueeeezLnySjLbIwxxeGlq6ePiHwkIo1EpAPwLRDu47hK1Xm1qxWpvSSGDx/Oyy+/zPr165kwYQIpKSkADBw4kMWLF3Pw4EHi4+PzPWrPKNUcEhJCampqqcdnjDFeunpuAWYC64EPgftV9X98HVhperh/G6qFhmRrqxYawsP92xR7nZdeeikffPABp06d4tixYyxcuBCAY8eO0ahRI86ePZvtaVg1a9akS5cujBkzhquuuoqQkJD8Vp1L3759mTJlSuZ4RllmY4wpDi9dPa2AMcB7wA7gTyJS3deBlaZrOzXm6euiaFy7GgI0rl2Np6+LKtFVPbGxsQwZMoSOHTtyxRVXZD4F64knnuDiiy+me/futG3bNtsyQ4YM4d///ne+3Tz5eeyxxzh06BAdOnSgY8eOfP7558WO2xhjvJRl3gTco6rLRESAB4GRqtreHwGClWUOFvZvakzpyq8ss5c+/otUdRmAOv4ODPKwwaYi8rmIbBCRn0RkjNteV0Q+FZEt7rudqTTGGD/KN/GLyCMAqnpURG7IMXm4h3WnAg+p6oVAV+AeEbkQeBRYpqqtgGXuuDHGGD8p6Ij/pizDY3NMu7ywFatqkqp+7w4fAzYCjYFrcE4W475f6zVYY4wxJVdQ4pd8hvMaL5CItAA6Ad8B56hqkjtpL/nU/RGRO0VkjYis+e2334qyOWOMMQUoKPFrPsN5jedLRGriXBF0v6pmK/GgzpnlPNelqtNUNU5V4xo0aOB1c8YYYwpRUJG2jm4tHgGqZanLI0CYl5WLSChO0n8ry6Ma94lII1VNEpFGwP5ixm6MMaYY8j3iV9UQVY1wa/JUdoczxnMXmcnBvfTzdWCjqr6QZdICYJg7PAyYX5IPUF4sX76cb775Jt/pl19+OR07dqR9+/aMHj2atLS0XPMsX748s+5PTExMvpU9C9tWfhITE+nQoUORlzPGlC9eyjIXV3fgT8B6EUlw2/4M/A2Y59YA2gHc6MMYfrduHiybBEd2Qa0m0Gc8RPtn0+Ak45o1a9KtW7c8p8+bN4+IiAhUlcGDB/POO+9w00035ZqvZ8+eLFq0qETbyouVhzAmeHi5jr9YVPUrVRVVjVbVGPf1kaomq2ofVW2lqn9U1YO+iiHTunmw8D448iugzvvC+5z2EnjiiSdo06YNPXr04Oabb+b555+nV69ejBkzhpiYGDp06MCqVatITEzklVde4cUXXyQmJoYvv/wy17oiIpxCp6mpqZw5cwbnB1PR5bWtrKWfwSkfAc4XRM+ePRk4cCAXXnhh5vaHDh1Ku3btGDx4MCdPngRg2bJldOrUiaioKEaOHMnp06eLFZ8xJvB8lvjLlGWT4GyOSpxnTzntxbR69Wree+891q5dy8cff0zWO4tPnjxJQkICU6dOZeTIkbRo0YLRo0fzwAMPkJCQQM+ePfNcZ//+/WnYsCHh4eEMHjw4z3lWrlyZWSYio/JnVl63leH7779n8uTJ/PzzzwBs3ryZ//qv/2Ljxo1EREQwdepUUlJSGD58OHPnzmX9+vWkpqbyr3/9y+uuMsaUMcGR+I/sKlq7B19//TXXXHMNYWFhhIeHc/XVV2dOu/nmmwGnkNvRo0c9Px5xyZIlJCUlcfr0aT777LNc02NjY9mxYwdr167l3nvv5dprry12/BkuuugiIiMjM8ebNm1K9+7dAbj11lv56quv2Lx5M5GRkbRu3RqAYcOGsWLFihJv2xgTGMGR+Gs1KVp7CeXspsk5npaWlnmCdvz48dmmhYWFcc011zB/fu5z3hEREZndNAMGDODs2bMcOHCAKVOmZK5vz549uZarXLly5tO/0tPTOXPmTOa0GjVqFCl2Y0z5FxyJv894CM1Rez+0mtNeTN27d2fhwoWkpKRw/PjxbCdcMx648tVXX1GrVi1q1apFeHg4x44dA5xa+wkJCSQkJDBp0iSOHz9OUpJzT1tqaioffvhhrsqeAHv37iWjqN6qVatIT0+nXr163HPPPZnrO++887JtC5zun/j4eAAWLFjA2bNn8/1cO3fuZOXKlQDMnj2bHj160KZNGxITE9m6dSsAs2bN4g9/+EOx950xJrCCI/FH3whX/xNqNQXEeb/6nyW6qqdLly4MHDiQ6OhorrjiCqKioqhVqxbgHLV36tSJ0aNH8/rrrwNw9dVX85///CfPk7snTpzIXFdMTAwNGzZk9OjRALzyyiu88sorALz77ruZpZnvu+8+5syZk+cRec5t3XHHHXzxxRd07NiRlStX5jrKz6pNmzZMmTKFdu3acejQIe6++27CwsKYPn06N9xwA1FRUVSqVCkzPmNM+VNoWeayoKyWZT5+/Dg1a9bk5MmTXHrppUybNo0HH3yQ559/nri4XJVQTSHKwr+pMRVJfmWZfXkdf4V35513smHDBlJSUhg2bBixsbGBDskYYwplib8EZs+enatt+fLl/g/EGGOKIDj6+I0xxmSyxG+MMUHGEr8xxgQZ6+M3phTtP5pCYvIJwkJDuKBhTWpUsf9ipuyxI34/8VoqeeDAgQWWRl68eDFt2rShZcuW/O1vf8tsHzVqFB07diQ6OprBgwdz/PhxAFasWEFsbCyVK1fOVqgtw9GjR2nSpAn//d//XYxPZbLatPcoN/7fSm78v28Z+PLXPLloAweOWTE7U/YETeL/cPuH9Hu3H9Ezo+n3bj8+3P6hX7fvJfG///77mSUZ8pKWlsY999zDxx9/zIYNG3j77bfZsGEDAC+++CJr165l3bp1NGvWjJdffhmAZs2aMWPGDG655ZY81zlu3DguvfTSYn4qk+F0ahpTl28jMflkZtvsVb/yw6+HAxeUMfkIisT/4fYPmfjNRJJOJKEoSSeSmPjNxBIn/9Isy3z8+HFeeOEFHnvssXy3t2rVKlq2bMn5559PlSpVuOmmmzJr+mSUdVZVTp06lXlHb4sWLYiOjqZSpdz/1PHx8ezbt49+/fqVaD8YOHLqLN9sPZCrfev+4wGIxpiCBUXin/z9ZFLSUrK1paSlMPn7ycVeZ2mXZR43bhwPPfQQ1atXz3ebu3fvpmnTppnjTZo0Yffu3ZnjI0aM4Nxzz2XTpk3ce++9Bcafnp7OQw89xPPPP1+Uj23yUataKN1b1s/V3qph/r/gjAmUoEj8e0/sLVK7F6VZljkhIYFt27YxaNCgYscDMH36dPbs2UO7du0yC8XlZ+rUqQwYMIAmTXxToTTYVK0cwt29LiCy/u9f3EMvbkZMs9qBC8qYfATFJQfn1jiXpBNJebb7gpeyzJ07dwack7mNGjVizZo1tGjRgtTUVPbv30+vXr2YNWtW5hfK6NGj6dixI7/++mvmenbt2kXjxo2zrTskJISbbrqJZ599lhEjRuQb48qVK/nyyy+ZOnUqx48f58yZM9SsWTPbCWNTNG3PjWDuXZewI/kk1UJDOL9+DapXDYr/YqacCYq/yjGxY5j4zcRs3T1hIWGMiR1T7HV2796du+66i7Fjx5KamsqiRYu48847Aacs82WXXZarLPPRo0eB38syZ3X33XcDzqMTr7rqqszSD1nnS01NZcuWLfzyyy80btyYOXPmMHv2bFSVbdu20bJlS1SVBQsW5FnWOau33norc3jGjBmsWbPGkn4paBgeRsPwsECHYUyBgiLxX3n+lYDT17/3xF7OrXEuY2LHZLYXR9ayzOecc06eZZnPnj3LG2+8ATilkgcPHsz8+fN56aWXCn0kYl4qV67Myy+/TP/+/UlLS2PkyJG0b9+e9PR0hg0bxtGjR1FVOnbsmPloxNWrVzNo0CAOHTrEwoULmTBhQp6PbDTGBA8ry1wCVpa5dJWFf1NjKhIry+wDVpbZGFMeWeIvASvLbIwpj4Lick5jjDG/s8RvjDFBxhK/McYEGUv8xhgTZHyW+EXkDRHZLyI/ZmmrKyKfisgW972Or7bva4cPH2bq1KnFWjYhIYGPPvrI07zLly/nqquuKtZ2FixYUOybssaPH8/SpUvznDZz5kxatWpFq1atmDlzZmZ7fHw8UVFRtGzZkvvuu4+MS4XHjRtHdHQ0MTEx9OvXjz179hQrJmNMKVFVn7yAS4FY4Mcsbc8Cj7rDjwLPeFlX586dNacNGzbkaivI4QUL9OfLeuuGtu3058t66+EFC4q0fE6//PKLtm/fvljLTp8+Xe+55x5P837++ed65ZVXFms7vpCcnKyRkZGanJysBw8e1MjISD148KCqqnbp0kVXrlyp6enpevnll+tHH32kqqpHjhzJXH7y5Ml611135bnuov6bGmMKBqzRPHKqz474VXUFcDBH8zVAxiHiTOBaX20/qyMLF5I0bjype/aAKql79pA0bjxHFi4s9jofffRRtm3bRkxMDA8//DDPPfccXbp0ITo6mgkTJgDwn//8hz59+qCqJCUl0bp1a3bu3Mn48eOZO3cuMTExeRZTW7x4MW3btiU2Npb3338/s33VqlVccskldOrUiW7durF582YAunbtmu1u3F69erFmzRpmzJiR+YCV4cOHc99999GtWzfOP//8bA9leeaZZ4iKiqJjx448+uijmfPn9eCWJUuW0LdvX+rWrUudOnXo27cvixcvJikpiaNHj9K1a1dEhNtuu40PPvgA+L1kNMCJEydy1S4yxviXv/v4z1HVjGppe4Fz8ptRRO4UkTUisua3334r0Ub3v/gPNCV7WWZNSWH/i/8o9jr/9re/ccEFF5CQkEDfvn3ZsmULq1atIiEhgfj4eFasWMGgQYNo1KgRU6ZM4Y477uDxxx+nWbNmTJo0iSFDhpCQkMCQIUOyrTclJYU77riDhQsXEh8fz969v1cQbdu2LV9++SU//PADkyZN4s9//jMAQ4YMYd68eQAkJSWRlJSU553DSUlJfPXVVyxatCgzwX/88cfMnz+f7777jrVr1/LII48U+LnzKw29e/fubJU+c5aM/stf/kLTpk156623mDRpktfdbIzxgYCd3HV/huRbL0JVp6lqnKrGNWjQoETbSk3KXZmzoPai+uSTT/jkk0/o1KkTsbGxbNq0iS1btgDw0ksv8fTTT1O1atXMcs0F2bRpE5GRkbRq1QoR4dZbb82cduTIEW644QY6dOjAAw88kHmUf+ONN2Yenc+bN4/Bgwfnue5rr72WSpUqceGFF7Jv3z4Ali5dyogRIzKfA1C3bt3i74gCPPnkk/z6668MHTo08+lgxpj8paUrJ06n+mTd/k78+0SkEYD7vt8fG63cqFGR2otKVRk7diwJCQkkJCSwdetWRo0aBTilkytVqsS+fftIT0/Pc/n+/fsTExPD7bffXuB2xo0bx2WXXcaPP/7IwoULSXF/xTRu3Jh69eqxbt065s6dm+tXRIaqVatmi9mL7777jpiYGGJiYliwYAGNGzfOszR048aN2bVrV672nIYOHcp7773nadvGBKtNe48yccGPXDf1GyYv/ZkdySdKdf3+TvwLgGHu8DBgvj822vCB+5Gw7KVyJSyMhg/cX+x1hoeHc+zYMcBJ3G+88UbmA853797N/v37SU1NZeTIkbz99tu0a9eOF154Idey4PSbJyQk8Nprr9G2bVsSExPZtm0bAG+//XbmfEeOHMlMpjNmzMgWz5AhQ3j22Wc5cuQI0dHRnj9H3759mT59OidPOs+KPXgw+2mZiy++OPMLbeDAgfTv359PPvmEQ4cOcejQIT755BP69+9Po0aNiIiI4Ntvv0VVefPNN7nmmmsAMn/9AMyfP7/QktHGBLM9h08xcsZqZn27k837jvHi0i38ddHGUj369+XlnG8DK4E2IrJLREYBfwP6isgW4I/uuM/VuvpqGj0xicrnnQciVD7vPBo9MYlaWZ6aVVT16tWje/fudOjQgU8//ZRbbrmFSy65hKioKAYPHsyxY8d46qmn6NmzJz169OCFF17gtddeY+PGjVx22WVs2LAhz5O7YWFhTJs2jSuvvJLY2FgaNmyYOe2RRx5h7NixdOrUidTU7H8EgwcPZs6cOdx4441F+hyXX345AwcOJC4ujpiYmEIfxVi3bl3GjRtHly5d6NKlC+PHj8/sHpo6dSq33347LVu25IILLuCKK64AnBPhHTp0IDo6mk8++YTJk4v/yEtjKrqt+4+x53D2c5KfbtzHjoOld9RvZZlNmWH/psbAym0HuPnV77K1hVQSFo/pSatzwou0rvzKMtudu8YYU4a0ahhO5+a1s7UNu6Q5zetVz3uBYrCyzMYYU4bUD6/Ki0M68fXWA/y4+wjdLqjHRZF1qVI5pNS2Ua4Tv6razUAVRHnocjTGX5rVrU6zi5r5bP3ltqsnLCyM5ORkSxgVgKqSnJxMWJg9pNwYfyi3R/xNmjRh165dlPSuXlM2hIWFZbvz1xjjO+U28YeGhhIZGRnoMIwxptwpt109xhhjiscSvzHGBBlL/MYYE2TKxZ27IvIbsMMPm6oPHPDDdso720+Fs31UONtHhSvpPmquqrnKG5eLxO8vIrImr9ubTXa2nwpn+6hwto8K56t9ZF09xhgTZCzxG2NMkLHEn920QAdQTth+Kpzto8LZPiqcT/aR9fEbY0yQsSN+Y4wJMpb4jTEmyARN4heRy0Vks4hsFZFH85jeTEQ+F5EfRGSdiAzIMm2su9xmEenv38j9p7j7SERaiMgpEUlwX6/4P3r/8LCPmovIMnf/LBeRJlmmDRORLe5rWM5lK5IS7qe0LH9LC/wbuX+IyBsisl9EfsxnuojIP939t05EYrNMK/nfkapW+BcQAmwDzgeqAGuBC3PMMw242x2+EEjMMrwWqApEuusJCfRnKmP7qAXwY6A/QxnZR+8Aw9zh3sAsd7gusN19r+MO1wn0Zypr+8kdPx7oz+CHfXQpEJvf/xtgAPAxIEBX4LvS/DsKliP+i4CtqrpdVc8Ac4BrcsyjQIQ7XAvY4w5fA8xR1dOq+guw1V1fRVOSfRQsvOyjC4HP3OHPs0zvD3yqqgdV9RDwKXC5H2IOhJLsp6CgqiuAgwXMcg3wpjq+BWqLSCNK6e8oWBJ/Y+DXLOO73LasJgK3isgu4CPg3iIsWxGUZB8BRLpdQF+ISE+fRho4XvbRWuA6d3gQEC4i9TwuW1GUZD8BhInIGhH5VkSu9WmkZVd++7BU/o6CJfF7cTMwQ1Wb4PzMmiUitn+yy28fJQHNVLUT8CAwW0QiClhPRfY/wB9E5AfgD8BuIC2wIZVJBe2n5uqUKbgF+IeIXBCgGCusYElsu4GmWcabuG1ZjQLmAajqSiAMp0CSl2UrgmLvI7cbLNltj8fp323t84j9r9B9pKp7VPU690vwL27bYS/LViAl2U+o6m73fTuwHOjk+5DLnPz2Yan8HQVL4l8NtBKRSBGpAtwE5LxaYCfQB0BE2uEktd/c+W4SkaoiEgm0Alb5LXL/KfY+EpEGIhLitp+Ps4+2+y1y/yl0H4lI/Sy/FMcCb7jDS4B+IlJHROoA/dy2iqjY+8ndP1Uz5gG6Axv8FnnZsQC4zb26pytwRFWTKK2/o0Cf3fbjWfQBwM84R6N/cdsmAQPd4QuBr3H6HhOAflmW/Yu73GbgikB/lrK2j4DrgZ/ctu+BqwP9WQK4jwYDW9x5XgOqZll2JM7FAVuBEYH+LGVxPwHdgPXu39h6YFSgP4uP9s/bOF2kZ3H66UcBo4HR7nQBprj7bz0QV5p/R1aywRhjgkywdPUYY4xxWeI3xpggY4nfGGOCjCV+Y4wJMpb4jTEmyFjiNz4hIn8RkZ/cyoIJInJxIfPPEJHB7nBPd9kEEanmn4hBRD4SkdoFTL9fRKr7K54c2xYR+cyXd0SLyHARedkdnigi/+MOPy8ivX21XeN/lvhNqRORS4CrgFhVjQb+SPb6IoUZCjytqjGqesoXMeZFVQeoe/doPu4HApL4ca6LX6uqR7M2ul8Ivv5//BKQq7SyKb8s8RtfaAQcUNXTAKp6QFX3AIhIZ7eQW7yILHErDmYSkduBG4EnROStnCsWkdvcXxFrRWSW29bCPRpeJ06N92Zu+wy3pvk3IrI9yy+KRiKywv1F8WNGUTkRSXTvKK0hIh+62/hRRIaIyH3AecDnIvK5O38/EVkpIt+LyDsiUjPLeh5329eLSFu3vaaITHfb1onI9SIyUkT+keXz3SEiL+axT4cC87N83s0i8ibwI9BURB4WkdXueh8vZH9dLSLfiVNUb6mInFPQP6aq7gDqici5Bc1nypFA38Fmr4r3Amri3MX7MzAV+IPbHgp8AzRwx4cAb7jDM4DBOYdzrLe9u8767nhd930hv9d2Hwl8kGU97+Ac4FyIUyoY4CF+v5s0BAh3hxNx6jNdD7yaZbu1sk53h+sDK4Aa7vj/AuOzzHevO/xfwGvu8DPAP7Kst467r7YBoW7bN0BUHp99R5Y4WwDpQFd3vB/OsxLE/ayLcOq957e/6vD787ZvB/7uDg8HXnaHJwL/k2X7rwLXB/pvy16l86qMMaVMVY+LSGegJ3AZMFecpzCtAToAn4oIOEk3qQir7g28o6oH3O1k1DO/hN9L/M4Cns2yzAeqmg5syHJkuxp4Q0RC3ekJObazHvi7iDwDLFLVL/OIpStuCQv3s1QBVmaZ/r77Hp8ltj/i1K3Bjf8QgIh8BlwlIhtxvgDW57G9uqp6LMv4DnXqtIOT+PsBP7jjNXHqJXUk7/3VBOffpJEb9y95bC+n/Ti/eEwFYInf+ISqpuFUVlwuIuuBYThJ8CdVvcSPoZzOMixubCtE5FLgSmCGiLygqm9mzKSqP4vzqLsBwF9FZJmqTsqxXsF5IMbNhWw3jcL/n70G/BnYBEzPZ55UEankfokBnMgRy9Oq+n/ZAhTJ+ryErF4CXlDVBSLSC+fovjBhgN/Otxjfsj5+U+pEpI2ItMrSFIPTVbEZaOCe/EVEQkWkfRFW/Rlwg7gP7BCRum77N/x+JD0UyOsIPWt8zYF9qvoqTtKNzTH9POCkqv4beC7L9GNAuDv8LdBdRFq6y9QQkcJKUX8K3JNlO3UAVPU7nFK7t+AU78rLZpxHGeZlCTAyyzmGxiLSkPz3Vy1+L+Xr9ZmtrXHOJ5gKwI74jS/UBF4S59LIVJwqgneq6hn3BOs/RaQWzt/fP3AqexZKVX8SkSeBL0QkDadrYzjOk8Cmi8jDOKW0RxSyql7AwyJyFjgO3JZjehTwnIik41RPvNttnwYsFpE9qnqZiAwH3ha3jDDwGE6fen7+CkwR5wHbacDj/N4lNA+Iyej+ycOHbtxbc05Q1U/EKZO90u12Og7cWsD+mgi8IyKHcL4cIguIGbdLrCVOV52pAKw6pzFlgIgsAl5U1WX5TG+E8wzWvv6NDERkEM6lueP8vW3jG9bVY0wAiUhtEfkZOJVf0gdQ5yEcr0pgHmlZGfh7ALZrfMSO+I0xJsjYEb8xxgQZS/zGGBNkLPEbY0yQscRvjDFBxhK/McYEmf8H2YzZVnNyJpgAAAAASUVORK5CYII=\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "ax = sns.scatterplot(to_corr_df,\n",
+    "    x='self_consistency_recall', y='rule_matches_sequence', hue='model'\n",
+    ")\n",
+    "ax.set(xlabel='Self consistency (recall)', ylabel='Explanation correctness')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 68,
+   "id": "3833cb00",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "[Text(0.5, 0, 'Self comparison consistency'),\n",
+       " Text(0, 0.5, 'Explanation correctness')]"
+      ]
+     },
+     "execution_count": 68,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "ax = sns.scatterplot(to_corr_df,\n",
+    "    x='self_comparison_consistency', y='rule_matches_sequence', hue='model')\n",
+    "ax.set(xlabel='Self comparison consistency', ylabel='Explanation correctness')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "8d1dfc0c",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 6e83134..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index cba553a..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),5,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) | (2 * x) | (3 * x) | (4 * x),5,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) ** (1 + x),6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),6,,Y,3,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x * 2) % (3+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (4 + 1)][x],5,False,Y,5,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],6,False,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (x * 2) + 1,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) * (x + 1),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (3 * x) | (2 * x),6,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) * (2 + 1),7,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + (1 * x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (3 * x) * 1,10,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (2 * x) + 2,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 0,7,False,Y,3,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (1+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) ** 0,6,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) + (x * 3),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) | (x * 3),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1+1),6,,Y,8,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 0)",7,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (3 * x) | (4 * x) | (5 * x) | (6 * x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) + (1 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + (2 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (4 * x) ** 2,10,,Y,27,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],7,True,Y,8,False
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],7,True,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (2 * x) | 3,10,,Y,8,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 2) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (x * 2) % (1+1),6,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (2 * x) * 0,4,,N,0,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],5,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) | 1,10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (1 * x) | (3 * x),11,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),11,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (3 * x) | 3,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (1 * x) ** 2,12,,Y,16,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (3 * x) + (3 * x),12,,Y,15,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (1 * x) | 1,15,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (4 * x) + 1,15,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,17,False,Y,14,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) | 0,13,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) * (2 * x),15,,Y,22,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + (3 * x),14,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) | (2 * x),21,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (x * 2) % (3+1),21,,Y,15,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 1)",17,,Y,42,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (5 * x) + 1,21,,Y,17,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) | (x * 3),17,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + (x * 2),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (x * 2) % (7+1),9,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (5 * x) * (1 + x),8,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],12,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) % (1+1),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (2 * x) ** 3,11,,Y,24,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (1 * x) ** 2,10,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (1 * x) | 0,8,False,Y,8,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x * 2) % (2+1),16,,Y,4,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) | (2 * x),10,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: [i for i in range(100) if i % (8 + 1) or i % (4 + 1)][x],14,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + (4 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) ** 2,10,,Y,16,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + (x * 1),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 1,12,True,Y,16,False
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (1 * x) + (2 * x),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + (1 + x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (3 * x) + 1,12,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) | 4,14,,Y,14,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) | (2 * x + 1),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + (x * 2),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 1,18,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) * (2 * x),14,,Y,24,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),16,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (3 * x) | 3,15,,N,10,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],11,,Y,3,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) + 1,16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (2 * x) * (2 * x),16,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) | 0,20,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (1 * x) * (2 + 1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + (8 * x) + (12 * x) + (16 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) * 2,32,False,Y,32,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (1 * x) * (1 + x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x * 2) | (x * 3),20,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) * (2 * x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) * (2 + 1),24,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | (x * 2),24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (2 * x) + (3 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) ** (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) | (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),48,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) * 2,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),36,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (1 * x) + (2 * x),32,,Y,28,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (1 * x) ** (1 + (1 * x)),128,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (3 * x) + (2 * x),128,,Y,128,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,512,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 * x) ** (1 / 3),2048,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 * x) ** 2,2048,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",16384,,Y,8192,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (x * 2) | 1,8192,,Y,8192,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,N,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 0 * x * fn(fn,x-1) + 1)",0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (1 * x) | 0,1,,N,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (5 * x) ** 0,0,,N,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (1+1),2,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 4) % (4+1),0,,Y,1,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (x * 2) | (x * 3),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],8,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (2 * x) | 1,3,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) + 1,8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (1 * x) * (1 + x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) * (1+1),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (2 * x) + (1 * x),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],11,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (2 * x) ** 2,10,,Y,19,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) | (2 * x),15,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) | 1,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) % (9+1),10,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 2) % (0+1),12,,Y,7,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 3) % (2+1),12,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 2) % (2+1),0,,Y,3,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) | (2 * x),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 3) % (3+1),12,,Y,0,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * (2 * x),15,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) * (1 + 1),18,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (4 * x) | 3,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (2 * x) * 4,18,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * (1 + (1 * x)),18,,Y,24,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),18,,Y,15,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * (1 + x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (1 * x) * (1 + (x % 2)),21,,Y,18,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (2 * x) + 3,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (2 * x) | (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) | 0,30,False,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) | 2,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (x * 2) % (3+1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (1 * x) | (2 * x),21,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (x * 5) % (3+1),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) | 0,27,False,Y,24,False
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (2 * x) + 0,21,,Y,27,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],27,,Y,27,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (1 * x) + (1 * x) + (1 * x) + (1 * x),27,,Y,27,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) * 0,1,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 1) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (2 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x * 2) % (1+1),2,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (1 * x) * (1 + x),0,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",0,,Y,4,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) % (1 + 1),0,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (2 * x) | 0,9,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,,Y,9,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) | (1 + x),20,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 2) + (x * 3),18,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (3 * x) + 1,28,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (2 * x) + (x * 2),33,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) | 0,33,,Y,27,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (x * 2) ** (1/2),33,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (3 * x) ** 2,36,,Y,49,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (x * 2) % (2+1),30,,Y,29,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 + x) * (1 + x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) | (2 * x) | (3 * x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],10,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (1 * x) | 4,9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (2 * x) | 3,6,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 2) | (x * 3),10,,Y,10,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],22,,Y,23,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + (1 if x % 2 else 0),22,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (1 * x) * 1,19,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (x * 3) + 1,36,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,29,False,Y,26,False
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (3 * x) * 1,29,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (1 * x) ** 1,37,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (2 * x) | (1 * x),30,,Y,31,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (1 * x) + (2 * x),31,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (3 * x),18,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) | 1,22,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],26,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + (3 * x),22,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (5 * x) + (1 * x),30,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) | (1 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) * (2 * x),30,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) + (3 * x),32,,Y,30,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) % (1+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 1) % (2+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (1 * x) * (1 + x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (4 * x) | (2 * x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x * 7) % (7+1),15,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + (3 * x),12,,Y,15,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) + 0,24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (x * 2) + (x * 3),24,,Y,30,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,36,False,Y,36,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) * (2 + 1),36,False,Y,36,False
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (3 * x) * 2,36,True,Y,60,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (1 * x) | (2 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 2)",42,,Y,60,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (x * 2) | (x * 3),42,,Y,42,
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 394c1ef..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,336 +0,0 @@
-[2023-06-01 13:29:14,971][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 13:29:14,994][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 13:29:15,015][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 13:29:15,020][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 13:29:15,020][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 14:18:40,061][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 104, in sequence_completion_equality
-    explanation_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 14:18:40,079][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 15:12:01,571][src.evals.sequence_completion][ERROR] - '(' was never closed (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    lambda x: (2 * x) ** (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 +
-                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
-SyntaxError: '(' was never closed
-[2023-06-01 15:12:01,572][src.evals.sequence_completion][WARNING] - '(' was never closed (<string>, line 1)
-[2023-06-01 15:44:04,455][src.evals.sequence_completion][ERROR] - unsupported operand type(s) for *: 'int' and 'function'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: unsupported operand type(s) for *: 'int' and 'function'
-[2023-06-01 15:44:04,456][src.evals.sequence_completion][WARNING] - unsupported operand type(s) for *: 'int' and 'function'
-[2023-06-01 16:14:00,546][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 5.0% ground-truth-consistent
-        - 5.0% self-rule-following-consistency
-        - 95.0% self-comparison-consistency
-        - 5.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 5.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index e5b2f0f..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index a0548fc..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,218 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 + x) | 0,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1) or i % (5 + 1) or i % (6 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x * 1) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x * 1,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x + 0,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: 2 * x + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: 3 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (x * 2) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) % (0+3),8,,N,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x + 1) * 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (x + 2) * 2 if x >= 0 else None,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: 4 if x > 1 else 3,11,,Y,4,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 4) % (0+1),16,,N,"0 (since the function is always returning 0, the sequence will repeat indefinitely)",
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (1 * x) * 4 + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (1 * x) * 4 + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (x * 4) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** x * 1,1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (x + 1),4096,True,N,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x % 2),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x & 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 0 if x==1 else (fn(fn,x-1) + fn(fn,x-2)) % 2)",1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + x)",8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2),8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: x + (x // 2),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (1 * x) + 2 if x % 2 == 0 else (1 * x) + 1,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (x ** 2 + 1) // 2 if x < 3 else x + 4,8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x ** 2 + 1) // 2 if x < 3 else x + 4,8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 3,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1) or i % (0 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (1 + 5) or i % (2 + 5) or i % (3 + 5) or i % (4 + 5)][x] + 5,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 4 if x < 3 else (2 * x) + 3,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 2 else x + 7,10,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x] + 4,12,False,"Y (Note: this function is quite complex and difficult to understand, but it does generate the given sequence.)",10,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x % (9+1),12,False,Y,12,False
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3 * 1,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3 if x < 3 else (x-1) % 3,-1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x % 3) % (2+1),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) % 3,-1,False,N,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else (x+1)%3)",-1,False,Y,2,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 or x==1 or x==3 else (x-1)%3)",-3,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x ** 2 - 3 * x + 2) % 3,0,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1 + 4,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (2 * x) + (x // 2) + 2,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) + (x // 2) + 4,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]","lambda x: [3, 4, 5, 7][x] if x < 4 else 2 * x - 3",10,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else x + 2,11,,N,9,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: 4 * x + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) + 10,26,False,Y,26,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: 4 * x + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: 2 ** (x % 3) + (x // 3),7,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x] + (x // 2),7,True,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x] + [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x] + 2,8,,"Y (Note: This function is very convoluted and difficult to understand, but if you plug in the values of x from the sequence, you will get the corresponding values.)",It is impossible to determine the next number in the sequence as the lambda function is too complex and does not follow a clear pattern.,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + x // 2,8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1)][x] + 5,11,,Y,"12 (Note: this function is quite complex and not easily predictable, so it may be difficult to determine the next number without calculating it directly using the function.)",
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (1 * x) + 5 if x % 2 != 0 else (2 * x) + 4,11,,Y,13,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6 * 2,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (x * 3) + 6,36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 869f897..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,315 +0,0 @@
-[2023-06-01 16:21:30,711][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:21:30,732][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:21:30,749][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:21:30,754][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:21:30,754][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:24:18,663][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:24:18,663][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:24:53,068][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:24:53,068][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:26,282][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:25:26,283][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:29,931][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences. The first three terms form an arithmetic sequence with a common difference of 1, and the fourth term is the sum of the second and third terms. Here's the code:
-                                                                                                                                                                                                                 ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:25:29,931][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:25:32,798][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:25:32,798][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:25:40,091][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences: {2,3} and {5,6}.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:25:40,092][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:26:47,239][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:26:47,240][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:26:54,513][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:26:54,513][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:28:28,018][src.evals.sequence_completion][INFO] -
-        Evaluated 217 ambiguous sequences of 225 total.
-        Resulting in:
-        - 83.0% ground-truth-consistent
-        - 84.0% self-rule-following-consistency
-        - 94.0% self-comparison-consistency
-        - 81.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index bb08b1c..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index d547c5c..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,211 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: 1 * x,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x + 4) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 2,12,,Y,12,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 4 + (2 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) + 1 if x % 2 == 0 else (2 * x) - 1,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x),16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4 | 4,20,,N,20,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (2 ** x) ** 2,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (x + 1),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,N,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,N,4096,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 2 ** (4 * (x + 1)),4096,,N,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 2 ** (6 + 2 * x),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 ** x) * 16,16384,True,N,16384,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (1+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 5) % (1+1),1,,Y,1,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x] + 2,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],8,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) | 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * (x + 1)),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: 3 * (x + 2),18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 9 + (3 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 4,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x * 1) % (3),3,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,N,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 4 * x + 5,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 1,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 9,29,,N,29,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x + 1],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x] + 3,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,Y,9,False
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 1,27,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: 4 * x + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: 4 * x + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: x + (x // 2) + 1,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: x + (x // 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + 1,11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (1 * x) | 2,11,,N,11,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) * 3,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (6 * x) ** 1,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: 12 + (x * 6),36,True,N,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: 6 * (x + 2),36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: 6 * x + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 0117933..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,416 +0,0 @@
-[2023-06-01 16:28:28,230][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:28:28,250][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:28:28,270][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:28:28,275][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:28:28,275][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:44:15,767][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-01 16:44:15,767][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-01 16:46:01,353][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:46:01,353][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:46:23,863][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:46:23,863][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:46:48,680][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:46:48,680][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:47:17,020][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5 based on the Fibonacci sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:47:17,021][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:47:26,943][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:47:26,944][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:48:30,214][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion earlier. The given sequence does not follow a simple arithmetic or geometric pattern. However, you can generate the sequence using a list or an array. Here's a Python code example:
-                                                                                                                                                                                             ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:48:30,215][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:48:40,811][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion earlier. The given sequence is not an arithmetic or geometric sequence, so it cannot be generated by a simple mathematical formula. However, if you have a specific pattern or rule in mind, please let me know, and I can help you create a code for that.
-      ^^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:48:40,811][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:48:47,202][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:48:47,202][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:48:58,873][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion in my previous response. Here's the correct code for the sequence 5, 6, 7, 9:
-                                                               ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:48:58,873][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 16:49:14,246][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    The given sequence does not follow a simple arithmetic or geometric pattern. However, we can generate the sequence using a custom function:
-        ^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:49:14,247][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:50:56,504][openai][INFO] - error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
-[2023-06-01 16:50:56,504][src.evals.sequence_completion][ERROR] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 118, in sequence_completion_equality
-    consistency_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 151, in generate_response_with_turns
-    return generate_chat_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 108, in generate_chat_completion
-    response = openai.ChatCompletion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 226, in request
-    resp, got_stream = self._interpret_response(result, stream)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 619, in _interpret_response
-    self._interpret_response_line(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 682, in _interpret_response_line
-    raise self.handle_error_response(
-openai.error.RateLimitError: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-[2023-06-01 16:50:56,506][src.evals.sequence_completion][WARNING] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID b69027257a94b764e3c0f392acc82810 in your message.)
-[2023-06-01 16:58:04,858][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:58:04,859][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:59:20,480][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a piecewise function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 16:59:20,480][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 16:59:59,983][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 16:59:59,985][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 17:02:06,750][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 17:02:06,750][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 17:02:59,461][src.evals.sequence_completion][INFO] -
-        Evaluated 210 ambiguous sequences of 225 total.
-        Resulting in:
-        - 88.0% ground-truth-consistent
-        - 88.0% self-rule-following-consistency
-        - 81.0% self-comparison-consistency
-        - 71.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index e974e62..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index 6c10467..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x * 1) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x + 1) ** 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | 0,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],5,,N,5,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (x * 1) % (4+1),5,False,Y,0,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (2 * x) + 1,6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,7,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 1) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (1 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x + 3) | 0,7,True,N,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) % (4+1),7,,Y,0,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x * 1,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) * 2,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],11,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 0,13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (2 + 1)][x] + 4,13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: [i for i in range(100) if i % (2 + 1) and i % (3 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (x + 4) % (4+1),8,,Y,0,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) ** 1,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 2,10,,Y,10,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) | 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 2,12,,N,12,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,N,12,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (4 * x) % (4+1),7,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) | 3,3,False,Y,11,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 4),16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) ** 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) * 2,20,,Y,20,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (x * 4) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (x * 4) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** (1 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 * x) ** 3,256,,Y,512,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (x * 1),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (2 * x),16384,,Y,16384,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (2 * x),16384,,Y,16384,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (1 * x) % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 4) % 2,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) * 1,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 5) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1) or i % (0 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (x + 1) * (x - 1) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (4 + 1)][x],7,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) * 1 + 1,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x * 3) | 2,8,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + x,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 1) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) | 0,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (3 * x) % (1+1),12,,N,12,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) % (3+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) % (4+1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * (x + 1),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: 3 * (1 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x],1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % (3+1),1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x + 1) % 3,2,True,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],3,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],0,,N,0,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) * 2 + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (2 * x) + 3,21,False,Y,21,False
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 13,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],10,False,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (5 + 1)][x],10,False,N,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 3) | 1,9,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],9,False,N,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 2) + 1,9,,Y,9,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + 1,19,False,Y,19,False
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) + 1,19,False,Y,19,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: 4 * x + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (4 * (x - 1)),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + (4 * (x - 1)),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 4 * (x + 1) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (x * 4) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1) or i % (4 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: 2 ** (x - 1) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x * 3) + 1,9,,N,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (x * 2) | 1,9,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) + 5,12,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 5,11,,Y,12,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) ** 0,24,,Y,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (6 * x) | 0,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
diff --git a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index acb250d..0000000
--- a/results/q0/run_1/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,266 +0,0 @@
-[2023-06-01 16:14:00,763][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 16:14:00,786][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 16:14:00,810][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 16:14:00,813][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-13-29-14/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 16:14:00,814][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 16:18:02,357][src.evals.sequence_completion][ERROR] - 0.0 cannot be raised to a negative power
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-ZeroDivisionError: 0.0 cannot be raised to a negative power
-[2023-06-01 16:18:02,358][src.evals.sequence_completion][WARNING] - 0.0 cannot be raised to a negative power
-[2023-06-01 16:18:29,789][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:18:29,790][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:19:52,425][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 16:19:52,425][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 16:21:30,463][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 69.0% ground-truth-consistent
-        - 71.0% self-rule-following-consistency
-        - 88.0% self-comparison-consistency
-        - 66.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 9.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_1/multirun.yaml b/results/q0/run_1/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_1/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 864aaeb..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index 73191d6..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,221 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + (2 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (1 * x) + 1,12,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 3 * x * fn(fn,x-1) + 2)",10,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x * 2) % (1+1),16,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * (2 * x),10,,Y,16,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | (4 * x),12,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (1 * x) | (2 * x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (1 * x) + (1 * x),12,True,Y,14,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) ** 2,16,,Y,16,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (1 * x) + (2 * x),12,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (1 * x) + (x * 2),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (6 + 1)][x],18,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),18,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) ** (1 + 1),14,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) | (x + 1),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) ** (1 + x),18,,Y,24,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 * x) | 0,128,,Y,128,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 2 ** (1 * x),512,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (x * 4) % (4+1),512,,Y,512,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 5 * x * fn(fn,x-1) + 2)",8192,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (2 * x) | 0,16384,,Y,8192,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 2,8192,,Y,16384,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],8,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (2 * x) | 1,8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) % (1+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (1 * x) | (2 * x) | (3 * x) | (5 * x),6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x * 2) | (x * 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) | (2 * x) | (3 * x) | (4 * x),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) * 1,11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (x * 2) + 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (1 + x) * (1 + x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 2) % (3+1),10,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) + (x * 3),12,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) * (1 + x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 2) | (x * 3),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (2 * x) + (3 * x),10,,Y,14,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 2)",7,,Y,24,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,8,False
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + (2 * x),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (3 * x) + (1 * x),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) | 1,6,,Y,4,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + (1 * x),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (2 * x) | (1 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) * (1 + x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 1,10,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (2 * x) ** 1,9,,Y,16,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (4 * x) + (5 * x),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 1,9,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (2 * x) | 3,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) | (x * 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) * (1 + x),10,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 2,5,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (4 * x) + (1 * x),5,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (3 * x) + 2,6,,Y,5,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],0,False,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) + (1 * x),4,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 1,5,True,Y,8,False
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1)][x],5,True,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (x * 2) % (1+1),5,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) * (1 + x),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) * (1 + x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),0,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | (2 * x),5,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) * (2 + 1),5,,Y,6,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) | 1,7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + (1 * x),6,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (x * 2) % (2+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,False,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) % (3+1),7,,Y,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (4+1),6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) * (2 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) | 0,6,True,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (x * x) | 1,8,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (x * 2) + (x * 3) + (x * 4),3,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) | (2 * x),6,,Y,6,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 3) % (2+1),21,,Y,3,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],21,,Y,19,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (x * 2) ** (3 * x),26,,Y,35,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (1 * x) * 2,24,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)",33,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) ** 2,33,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 1,36,False,Y,36,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (2 * x) | (1 * x),27,,Y,28,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (5 * x) + (x * 2),9,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x * 2) | (x * 3),10,,Y,10,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (0+1),3,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (0+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (1 * x) | (2 * x),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 2) | (x * 2),2,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (2 * x) | (1 * x),3,,Y,3,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) % (1+1),3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (1+1),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) | 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 5) % (1+1),0,True,N,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) + 1,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 0)",1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 3) % (2+1),0,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 6) % (5+1),0,,N,1,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (1 * x) | 0,12,,Y,3,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 2) | 0,12,,Y,3,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 2) % (1+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 2) % (0+1),12,,Y,3,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (4+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + (6 * x) + (9 * x) + (12 * x),18,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,18,False
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),18,,Y,15,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) + (2 * x),18,False,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (2 * x) | 1,18,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) ** 2,18,,Y,36,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (2 * x) * (1 + x),18,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) | (2 * x),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (6 * x) + (9 * x) + (12 * x) + (15 * x),18,,Y,30,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) % (4+1),18,,Y,18,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (2 * x) + (3 * x),18,,Y,21,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) ** 2,27,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + (2 * x),21,,Y,27,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],24,,Y,27,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 4)",21,,Y,36,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + (2 * x),24,,Y,27,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (1 * x) ** 2,27,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + (1 * x),12,,Y,12,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,15,False,Y,12,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (x * 2) | (x * 3),12,,Y,11,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (1 * x) | (2 * x),12,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x],11,False,Y,100,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (5 * x) | (x+1),19,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,15,False,Y,14,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) | (3 * x),15,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) % (2+1),15,,Y,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | (3 * x),13,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) + 1,16,False,Y,17,False
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (7 * x) + (9 * x) + (11 * x) + (13 * x),16,,Y,28,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) | 3,16,,Y,15,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) + (2 * x) + 3,16,,Y,17,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (1 * x) | 2,16,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x],2,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (3 * x) | 1,11,,Y,8,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) ** 2,11,,Y,16,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,11,False,Y,8,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) * (2 * x),18,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) | (1 * x),18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (x * 2) % (1+1),26,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (5 * x) + 3,22,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) | (2 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) + 3,30,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (3 * x) ** 2,42,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (3 * x) + (2 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (2 * x) ** 2,22,,Y,34,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + (7 * x),21,,Y,22,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + 1,22,,Y,20,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (7 + 1)][x],27,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],26,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (2 * x) * (2 + 1),42,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + (1 + x),33,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (x * 2) ** (1 + 1),30,,Y,45,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (15 * x) * 1,36,,Y,81,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) + 2,4,,Y,4,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 1) % (3+1),4,False,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 3) % (4+1),4,,Y,1,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (2 * x) | 1,3,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (2 * x) * 0,4,,N,0,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (1 * x) | 3,11,,N,10,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (2 * x) | (1 + x),11,,Y,10,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (x * 2) | (x * 3),24,,Y,24,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (x * 2) % (0+1),24,,Y,18,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) | (3 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) + 1,30,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) * (3 * x),36,,Y,60,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],42,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (2 * x) * (1 + x),54,,Y,54,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (2 * x) + (3 * x),48,,Y,42,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (2 * x) * (2 * x),10,,Y,16,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (1 * x) + (2 * x) + (3 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 2,9,True,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (3 * x) * (x + 1),10,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x * 2) % (8+1),11,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (2 * x) | (3 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | (x * 2),8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 1,8,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (1 * x) * 0,8,,N,0,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (x * 2) % (0+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (1 * x) * 2,10,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 1) % (2+1),10,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (x * 2) + 1,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x * 2) | 0,11,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) ** 2,12,,Y,25,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) | 1,15,,Y,13,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (5 * x) * 2,16,,Y,20,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (x * 2) % (4+1),20,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) ** 1,16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (x * 2) % (4+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,32,False,Y,32,False
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) + 1,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) * (3 * x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) * (1 + (x % 2)),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) * (2 * x),24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (2 * x) | 4,28,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | 1,32,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (5 * x) | 1,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | 8,32,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (x * 2) % (3+1),36,,Y,28,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (2 * x) | (1 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) * (2+1),36,,Y,48,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) * 4,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (3 * x) | (2 * x),36,,Y,28,
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 1f53a35..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,485 +0,0 @@
-[2023-06-01 17:03:03,287][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 17:03:03,308][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 17:03:03,332][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 17:03:03,335][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 17:03:03,335][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 17:54:01,338][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 104, in sequence_completion_equality
-    explanation_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 17:54:01,359][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 18:25:22,590][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 118, in sequence_completion_equality
-    consistency_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 18:25:22,593][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 19:22:59,301][src.evals.sequence_completion][ERROR] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 449, in _make_request
-    six.raise_from(e, None)
-  File "<string>", line 3, in raise_from
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 444, in _make_request
-    httplib_response = conn.getresponse()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 1374, in getresponse
-    response.begin()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 318, in begin
-    version, status, reason = self._read_status()
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/http/client.py", line 279, in _read_status
-    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/socket.py", line 705, in readinto
-    return self._sock.recv_into(b)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1273, in recv_into
-    return self.read(nbytes, buffer)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/ssl.py", line 1129, in read
-    return self._sslobj.read(len, buffer)
-TimeoutError: The read operation timed out
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 489, in send
-    resp = conn.urlopen(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 785, in urlopen
-    retries = retries.increment(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/util/retry.py", line 550, in increment
-    raise six.reraise(type(error), error, _stacktrace)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/packages/six.py", line 770, in reraise
-    raise value
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 703, in urlopen
-    httplib_response = self._make_request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 451, in _make_request
-    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/urllib3/connectionpool.py", line 340, in _raise_timeout
-    raise ReadTimeoutError(
-urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-During handling of the above exception, another exception occurred:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 516, in request_raw
-    result = _thread_context.session.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 587, in request
-    resp = self.send(prep, **send_kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/sessions.py", line 701, in send
-    r = adapter.send(request, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/requests/adapters.py", line 578, in send
-    raise ReadTimeout(e, request=request)
-requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-
-The above exception was the direct cause of the following exception:
-
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 129, in sequence_completion_equality
-    model_completion_resp_raw = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 144, in generate_response_with_turns
-    return generate_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 64, in generate_completion
-    response = openai.Completion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 216, in request
-    result = self.request_raw(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 526, in request_raw
-    raise error.Timeout("Request timed out: {}".format(e)) from e
-openai.error.Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 19:22:59,303][src.evals.sequence_completion][WARNING] - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
-[2023-06-01 20:01:38,384][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 20:01:38,386][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 20:07:12,094][src.evals.sequence_completion][ERROR] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-TypeError: <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-[2023-06-01 20:07:12,095][src.evals.sequence_completion][WARNING] - <lambda>.<locals>.<lambda>() takes 1 positional argument but 2 were given
-[2023-06-01 21:12:32,662][src.evals.sequence_completion][INFO] -
-        Evaluated 220 ambiguous sequences of 225 total.
-        Resulting in:
-        - 5.0% ground-truth-consistent
-        - 6.0% self-rule-following-consistency
-        - 97.0% self-comparison-consistency
-        - 4.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 406d739..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index 77a1f8a..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,214 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** (1 * x // 2) if x % 2 == 0 else 0,256,False,Y,256,False
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 * x - 1),4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x<=1 else fn(fn,x-1) + fn(fn,x-2))",8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2) + (x % 2),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:3 if x==0 else x + fn(fn,x-1) + 0)",8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (1 * x) + 2 if x < 3 else (1 * x) + 3,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1) or i % (2 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 2,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 2 else x + 6,10,,N,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5 if x < 3 else (2 * x) + 3,10,False,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 4 if x < 3 else (2 * x) + 3,12,,Y,12,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x + 3) * 1,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x + 2],7,,Y,7,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 + x),7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (x * 1) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x+1],6,False,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 4 * x + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 13,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x ** 2 - x) % 3,-3,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (2+1),-3,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: [i % 3 for i in range(100)][x],-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 3) % (2+1) if x < 2 else (x - 2) % (2+1),-1,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x ** 2 - 3 * x + 2) % 3,0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]","lambda x: [0, 1][x % 2]",0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:0 if x==0 or x==2 else 1)",0,False,"Y (This is a recursive function that alternates between returning 0 and 1 based on the value of x, and the sequence matches this pattern.)",1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: 1 if x % 2 == 0 else 0,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 if x % 2 == 0 else 0),1,True,Y,1,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0 if x >= 0 else None,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x + 1) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) * 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * (x + 1)),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3 * (x - 1),18,,Y,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 3 * x + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6 if x >= 0 else None,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (1 * x) * 2 + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (x * 2) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 2,18,False,Y,18,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3 + 4,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: 6 * x + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x + 1) * 6,30,True,N,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 6) + 6,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x ** 2) + 3 if x % 2 == 0 else (x ** 2) + 1,9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (2 * x) + (x // 2) + 1 if x % 2 else (2 * x) + (x // 2) - 2,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (x // 2) ** 2 + 3 * (x % 2) + 1,10,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x ** 2 - 5 * x + 13) // 2 if x > 2 else x + 2,11,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else (x + 4 if x == 2 else x + 6),8,,N,9,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (4+1),8,,Y,8,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0 if x > 0 else 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (x * 2) + 0 if x > 0 else 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x: x if x < 2 else fn(fn,x-2) + 2)",8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x + 1) + (x // 2),7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + (x // 2) + (x % 2),8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (1 * x) + (x // 2) + (x % 2) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1) or i % (1 + 1)][x],11,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x // 2) * 3 + 5 + x % 2,11,,Y,12,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) % (100 + 1),16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) % (5+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0 if x <= 3 else None,20,,Y,20,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (x + 1) * 4,24,True,N,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 4 * x + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 2947438..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,347 +0,0 @@
-[2023-06-01 21:21:06,121][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:21:06,143][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:21:06,161][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:21:06,165][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:21:06,166][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:22:06,305][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be the Fibonacci sequence with an offset of 1. The code to generate this sequence is:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:06,306][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:22:11,503][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It seems to be a sequence of prime numbers with the exception of the number 1. Therefore, there is no mathematical formula to generate this sequence.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:11,504][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:22:13,870][src.evals.sequence_completion][ERROR] - can only concatenate list (not "int") to list
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-TypeError: can only concatenate list (not "int") to list
-[2023-06-01 21:22:13,870][src.evals.sequence_completion][WARNING] - can only concatenate list (not "int") to list
-[2023-06-01 21:22:30,744][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It does not follow a clear pattern.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:22:30,745][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:23:57,676][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:23:57,676][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:24:03,029][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:03,029][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '2 (the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:09,840][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-[2023-06-01 21:24:09,840][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats every 4 numbers)'
-[2023-06-01 21:25:37,924][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:37,924][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:40,685][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:40,685][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-01 21:25:45,184][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-[2023-06-01 21:25:45,184][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: 'The next number in the sequence cannot be determined as the function is a recursive function that only returns 3 or 7 depending on the input value. It does not generate a sequence that can be extende
-[2023-06-01 21:25:47,139][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:25:47,140][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:25:59,619][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-[2023-06-01 21:25:59,619][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: 'There is no way to determine the next number in the sequence as the lambda function is not generating a predictable pattern.'
-[2023-06-01 21:26:55,913][src.evals.sequence_completion][INFO] -
-        Evaluated 213 ambiguous sequences of 225 total.
-        Resulting in:
-        - 83.0% ground-truth-consistent
-        - 85.0% self-rule-following-consistency
-        - 96.0% self-comparison-consistency
-        - 82.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index be16d53..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index 2586d88..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,212 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 4 + 2 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 6 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,N,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: (2 ** x) ** 2,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (4 ** x) * 4,1024,True,N,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** x,1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 ** x) ** 4,4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 ** (2 * x + 2)) ** 2,4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 64 * (4 ** x),16384,True,N,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (2 * x + 4),16384,True,Y,16384,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if (i % 2 == 0) or (i % 3 == 0)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: x + 2 if x % 2 == 0 else x + 1,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (x * x) - (2 * x) + 3,8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],8,False,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (9 + 1) or i % (5 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (6 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) | 2,7,,N,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) | 4,8,False,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: 3 + x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) | 1,5,,N,5,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: 1 + 4 * x,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) | 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: 4 * x + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: 13 + (4 * x),29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,N,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) | 4,9,,N,9,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 4,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: x % 3,0,,Y,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2 == 0,1,True,N,1,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2 == 0,1,True,N,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: x * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: 3 * (x + 2),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * x + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) * 3 + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) | 9,21,,N,21,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: 3 + (2 * x),13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 1,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: 2 * x + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: 2 * x - 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,N,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: 4 * x + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: 14 + (4 * x),30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 11,27,True,N,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 1) % (3+1),4,False,Y,0,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 1) % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * (x // 2)) | 3,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: 3 + 4 * (x // 2),11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (1 * x) * 6,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: 6 * x,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) * 3,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: 6 * (x + 2),36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (1 * x) * 6 + 12,42,True,N,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: 4 + x + (x // 2),10,True,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: x + 3 if x < 2 else x + 2,9,,Y,9,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: x * 2,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: x + (x // 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) | 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x + 1],11,True,Y,11,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: 4 * x + 8,24,True,N,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) | 4,24,,N,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,N,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 1b2b48f..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,407 +0,0 @@
-[2023-06-01 21:26:56,107][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:26:56,126][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:26:56,142][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:26:56,145][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:26:56,145][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:29:20,828][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a list or a custom function. Here's one way to do it:
-                                                                                                                                                ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:29:20,828][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:29:37,617][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:29:37,618][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:29:54,225][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, if you meant the Fibonacci sequence, which starts with 1, 1, 2, 3, 5, ... then the code would be:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:29:54,226][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:30:09,143][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:30:09,143][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:30:29,292][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:30:29,293][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:30:56,361][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 5, 6, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:30:56,361][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:31:06,167][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a piecewise function that generates the given sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:31:06,167][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:31:32,269][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:31:32,269][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:42:32,985][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:42:32,985][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:42:46,718][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code that generates the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:42:46,718][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:43:01,514][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:43:01,514][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:43:32,713][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a piecewise function that generates the sequence:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-01 21:43:32,713][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-01 21:44:03,855][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    The given sequence is not an arithmetic or geometric sequence. However, you can generate the sequence using a custom function:
-        ^^^^^
-SyntaxError: invalid syntax
-[2023-06-01 21:44:03,855][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-01 21:46:38,562][openai][INFO] - error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
-[2023-06-01 21:46:38,562][src.evals.sequence_completion][ERROR] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 101, in sequence_completion_equality
-    completion_resp = generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/completions.py", line 21, in generate_response_with_turns
-    return openai_model.generate_response_with_turns(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 151, in generate_response_with_turns
-    return generate_chat_completion(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/models/openai_model.py", line 108, in generate_chat_completion
-    response = openai.ChatCompletion.create(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
-    return super().create(*args, **kwargs)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
-    response, _, api_key = requestor.request(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 226, in request
-    resp, got_stream = self._interpret_response(result, stream)
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 619, in _interpret_response
-    self._interpret_response_line(
-  File "/Users/domenicrosati/.asdf/installs/python/3.10.4/lib/python3.10/site-packages/openai/api_requestor.py", line 682, in _interpret_response_line
-    raise self.handle_error_response(
-openai.error.RateLimitError: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-[2023-06-01 21:46:38,564][src.evals.sequence_completion][WARNING] - That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 6692dc036cd7544fc524f88ab9fa0fee in your message.)
-[2023-06-01 21:46:50,889][src.evals.sequence_completion][INFO] -
-        Evaluated 211 ambiguous sequences of 225 total.
-        Resulting in:
-        - 87.0% ground-truth-consistent
-        - 87.0% self-rule-following-consistency
-        - 79.0% self-comparison-consistency
-        - 69.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index dcab5ab..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index 94f2129..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,223 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) ** 1,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) and i % (4 + 1)][x],12,,N,12,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * (x + 2),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * (x + 2),12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** (x * 2),256,,N,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 4 * x * fn(fn,x-1) + 0)",4096,,N,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 ** x) * 4,4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 4,16384,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 4,16384,,Y,65536,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],7,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: (x * 2) + 1,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: (x * 1) % (3+1) + 1,7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (x + 1) * (x + 2) // 2,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,False,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x] + 3,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (1 * x) + 2,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],11,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (x * 1) + 4,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x],11,,N,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 1 * x * fn(fn,x-1) + 2)",11,,N,11,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x * 1) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (x + 3) ** 1,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1) or i % (1 + 1)][x],7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (6 + 1)][x],7,True,N,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (x + 1) | 4,8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (8 + 1) or i % (3 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (x + 1) * 1,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x * 1) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (x + 1),5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x + 1) * 2 - 1,6,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 1) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) + 2,6,,Y,6,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 1,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) * 1 + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x + 5) | 0,9,True,N,9,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % (3+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % 3,1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % (3+1),1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 3) ** 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x + 2) % (3 + 1),4,False,Y,0,False
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x + 2) % (3 + 1),3,True,Y,0,False
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (2+1),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (1+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) | 0,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],1,,Y,0,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (1 * x) * 3,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) ** 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * 3,15,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) ** 1,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (1 * x) * 3 + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],21,,N,21,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (9 + 1) or i % (7 + 1) or i % (5 + 1) or i % (3 + 1)][x],11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: 2 * x + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) | 1,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],9,False,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: 2 * x + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 6,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) | 10,30,,Y,30,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],19,,Y,19,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (2 * x) + 13,31,False,Y,31,False
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],4,,Y,4,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (2 * x + 3) % (2 + 1),11,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],7,,N,11,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) % (0+1),24,,N,24,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) | 0,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (6 * x) * 1,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (6 * x) + 0,30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (3 * x) * 2,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (x * 6) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (x * 1) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x],9,True,N,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],9,False,N,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (x * 1) + 2,9,False,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (1 * x) | 1,8,,N,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + (x - 1),9,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (2 * x) + (1 * (x - 1)),9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x * 3) % (2 + 1) + 2,12,,Y,11,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (x * 4) % (4+1),16,,N,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) ** 0,16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (x * 4) % (12+1),16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (x * 4) % (4+1),20,,N,20,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) + 4,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 4,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 4 * (x + 1),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
diff --git a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 8273241..0000000
--- a/results/q0/run_2/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,266 +0,0 @@
-[2023-06-01 21:12:32,890][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:12:32,912][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:12:32,933][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:12:32,936][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-17-03-02/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:12:32,937][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 21:13:40,724][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:13:40,724][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:16:32,242][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:16:32,242][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:16:34,327][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-01 21:16:34,328][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-01 21:21:05,813][src.evals.sequence_completion][INFO] -
-        Evaluated 222 ambiguous sequences of 225 total.
-        Resulting in:
-        - 70.0% ground-truth-consistent
-        - 70.0% self-rule-following-consistency
-        - 86.0% self-comparison-consistency
-        - 66.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 9.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_2/multirun.yaml b/results/q0/run_2/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_2/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 3e72775..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: davinci
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index a67bd61..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    id: '0'
-    num: 0
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index 35e68f4..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=davinci
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
deleted file mode 100644
index 993d350..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_davinci.csv
+++ /dev/null
@@ -1,222 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (2 * x) * (2 * x),24,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 4)",24,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (2 * x) + 1,36,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) + (2 * x),36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (4 * x) * 2,36,,Y,60,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (2 * x) ** 1,36,,Y,60,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (2 * x) + (1 * x),42,,Y,42,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (5 * x) + (x * 2),54,,Y,42,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) | 0,5,,Y,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (2 * x) * (2 * x),5,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),5,,Y,5,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) ** 3,5,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: 1 ** (2 * x),5,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,5,,Y,5,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + (2 * x),10,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (2 * x) | (3 * x),5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (2 * x) | 1,6,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (2 * x) + 1,5,,Y,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (x * 3) % (1+1),5,,Y,2,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],6,False,Y,3,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) + 1,6,,Y,7,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (x * 2) % (3+1),7,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (3 * x) ** 2,6,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (5 * x) ** (1 + x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1 * x),10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (3 * x) + 2,6,,Y,7,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (2 * x) | 1,8,,Y,6,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) ** (1 + x),7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (3 * x) | (4 * x),8,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (2 * x) | 0,6,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (x * 2) | 0,8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (5 * x) * 1,7,,Y,10,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) * (1+1),10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (x * 2) % (7+1),8,,Y,4,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (x * 2) % (1+1),7,,Y,4,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (3 * x) + (1 * x),11,,Y,8,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (2 * x) | (3 * x),7,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (2 * x) + 1,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (3 * x) | 3,7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,10,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (2 * x) ** (1 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (2 * x) + (3 * x),10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (2 * x) ** (1/2),12,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (x * 2) * (x + 1),10,,Y,14,
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x],10,,Y,8,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) | (1 * x),8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x * 2) + 1,9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: (2 * x) * 2,11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (2 * x) * (1 + x),11,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],10,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + (2 * x),13,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) % (1+1),9,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (1 + 1)][x],10,False,Y,9,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 2) % (1+1),0,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (2 * x) | 0,1,,N,0,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (2 * x) * (1 + x),2,,Y,3,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: (x * 3) % (2+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: (x * 2) | (x * 3),0,,N,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (x * 2) % (0+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (x * 2) | 0,4,,Y,3,
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) * (2 * x),4,,Y,6,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + (2 * x),4,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (1 * x) | 0,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (2 * x) | (x + 1),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1) or i % (5 + 1)][x],8,False,Y,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: (2 * x) * (1 + x),7,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: (1 * x) + (2 * x),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) * (2 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (2 * x) | (3 * x) | (5 * x) | (6 * x),7,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: (2 * x) | (3 * x) | (5 * x) | (6 * x),12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,0,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: (3 * x) ** 2,10,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (3 * x) * 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) | 1,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) % (1+1),15,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (x * 2) + 1,12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (x * 2) | 0,12,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (3+1),15,,Y,0,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (x * 2) % (1+1),12,,Y,3,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (x * 3) | 0,12,True,Y,3,False
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,6,False
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (2 * x) | 3,12,,Y,12,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (x * 2) % (3+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 2) + 1,18,,Y,15,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) % (2+1),15,,Y,15,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x * 2) % (1+1),15,,Y,15,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (1 * x) + (2 * x),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (1 * x) * (1 + (x % 2)),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (2 * x) * (2 * x),18,,Y,36,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) * (2 * x),18,,Y,30,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],21,,Y,24,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) | (2 * x),27,,Y,24,
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (2 * x) + (3 * x),24,,Y,27,
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) * 3,21,,Y,27,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (2 * x) | 3,21,,Y,24,
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (x * 2) % (3+1),21,,Y,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (2 * x) + (3 * x),27,,Y,27,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) + (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (x * 2) % (1+1),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | 0,16,False,Y,16,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (2 * x) | (1 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (2 * x) | (4 * x),16,,Y,16,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x * 2) % (3+1),24,,Y,8,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (2 * x) * (1 + x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (2 * x) | 4,20,,Y,20,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (2 * x) + (1 * x),20,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (1 * x) * (1 + x),20,,Y,32,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (1 + x) * (1 + x),24,,Y,32,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (1 * x) + 2,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",32,,Y,256,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) | (4 * x),24,,Y,32,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) | 0,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) + (2 * x),28,True,Y,32,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (2 * x) * (2 * x),32,,Y,48,
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) | (2 * x),32,,Y,32,
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (2 * x) ** 2,32,,Y,48,
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (3 * x) * 2,36,,Y,48,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) ** (1 * x),9,,Y,1,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (1 * x) + (3 * x) + (5 * x) + (7 * x),8,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 1)",11,,Y,21,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (x * 2) % (1+1),11,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (x * 1) % (2+1),11,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (1 * x) ** 3,11,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (4 * x) | (2 * x),9,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) | 3,13,,Y,12,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (3 * x) ** 1,11,,Y,27,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 1,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | 0,15,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x],14,False,Y,99,False
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) | (x * 3),13,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) | (x * 2),14,,Y,14,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (3 * x) * (2 * x),15,,Y,27,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) | (1 * x),21,,Y,15,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + 3)",16,,Y,20,
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (3 * x) | 1,16,,Y,14,
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (3 * x) * (1 + x),16,,Y,20,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: [i for i in range(100) if i % (6 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (0+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (x * 2) % (4+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (x * 2) % (1+1),8,,Y,4,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (1 * x) ** 2,10,,Y,8,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (1 * x) * (1 + (x % 2)),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) | (1 * x),10,,Y,10,
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) * 2,10,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) | 1,10,,Y,10,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (x * 2) % (3+1),12,,Y,4,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) | 0,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,14,False
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (1 * x) * 2,14,False,Y,14,False
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,12,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 1,14,,Y,14,
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) % (3+1),14,,Y,14,
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else fn(fn,x-1) + 2)",14,,Y,14,
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 2,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (1 * x) + 2,14,,Y,14,
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) * 3,18,,Y,24,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (1 * x) + (2 * x),22,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (4 + 1)][x],21,,Y,23,
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (3 * x) + (7 * x),21,,Y,22,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (2 * x) | (3 * x),26,,Y,26,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (3 * x) * (3 * x),27,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],27,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (5 * x) | (3 * x),29,,Y,29,
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],36,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (3 * x) + 2,36,,Y,31,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) * 2,22,,Y,28,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) + (2 * x),22,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + (2 * x),22,,Y,26,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (3 * x) | 2,22,,Y,22,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) ** 2,26,,Y,42,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (2 * x) * (2 * x),30,,Y,42,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) | (x + 1),42,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (2 * x) | (1 * x),30,,Y,30,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (1 + x) | 0,21,,Y,16,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (x * 3) % (4+1),21,,Y,3,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,34,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (3 * x) ** 2,21,,Y,36,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (3 * x) ** 2,36,,Y,36,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (2 * x) | (3 * x),28,,Y,27,
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (3 * x) ** 2,36,,Y,49,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + (x * 1) % (0+1),30,,Y,36,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (2 * x) | 0,10,,Y,10,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + (2 * x) + (3 * x) + (4 * x),9,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 2) % (2+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) % (1+1),8,,Y,3,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (4 + 1)][x],11,False,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 * x * fn(fn,x-1) + 3)",11,,Y,17,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (x * 2) % (5+1),12,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (1 * x) + (2 * x),12,,Y,13,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (7 + 1)][x],11,,Y,8,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (3 * x) + (2 * x),15,,Y,10,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x],0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 1) % (1+1),0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (2 * x) * (1 + x),2,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (0+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) + 1,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (1 * x) | 0,0,,N,0,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (x * 2) | (x * 2 + 1),256,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (1 * x),128,True,Y,256,False
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: (4 * x) ** 2,512,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (x * 4) * 0,512,,N,0,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (2 ** (1 * x)) % (2+1),2048,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: (2 * x) | 2,2048,,Y,2048,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 2 ** (x * 2),8192,False,Y,8192,False
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (3 * x),16384,,Y,8192,
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 071e982..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,279 +0,0 @@
-[2023-06-01 21:46:54,737][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 21:46:54,757][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 21:46:54,777][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 21:46:54,780][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 21:46:54,780][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-01 22:12:34,349][src.evals.sequence_completion][ERROR] - '(' was never closed (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    lambda x: (2 * x) ** (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 +
-                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
-SyntaxError: '(' was never closed
-[2023-06-01 22:12:34,353][src.evals.sequence_completion][WARNING] - '(' was never closed (<string>, line 1)
-[2023-06-01 22:22:47,717][src.evals.sequence_completion][ERROR] - integer division or modulo by zero
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-ZeroDivisionError: integer division or modulo by zero
-[2023-06-01 22:22:47,718][src.evals.sequence_completion][WARNING] - integer division or modulo by zero
-[2023-06-01 22:25:05,008][src.evals.sequence_completion][ERROR] - 'int' object is not callable
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: 'int' object is not callable
-[2023-06-01 22:25:05,009][src.evals.sequence_completion][WARNING] - 'int' object is not callable
-[2023-06-01 23:48:30,597][src.evals.sequence_completion][ERROR] - 'int' object is not callable
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-  File "<string>", line 1, in <lambda>
-TypeError: 'int' object is not callable
-[2023-06-01 23:48:30,598][src.evals.sequence_completion][WARNING] - 'int' object is not callable
-[2023-06-01 23:55:05,653][src.evals.sequence_completion][INFO] -
-        Evaluated 221 ambiguous sequences of 225 total.
-        Resulting in:
-        - 6.0% ground-truth-consistent
-        - 5.0% self-rule-following-consistency
-        - 97.0% self-comparison-consistency
-        - 6.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 021ab0f..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 523b291..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-3.5-turbo
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    id: '2'
-    num: 2
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index d9c7ebb..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-3.5-turbo
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
deleted file mode 100644
index bec98f0..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-3.5-turbo.csv
+++ /dev/null
@@ -1,213 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) % (1+1) + (6 * x) % (2+1),24,,N,24,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 2) + 6,30,,Y,30,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (x * 6) + 0,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) | 6,36,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: 6 * (x + 1),36,True,Y,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) + 18,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x + 2),6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],6,,Y,6,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: (x + 2),6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (x + 3),7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 3) or i % (2 + 3)][x],7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x - 3) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (x + 3) * 1,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 3) or i % (0 + 4)][x],11,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: (x + 2) if x >= 2 else (x + 3),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: x + (x // 2) + (x % 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]","(lambda a:lambda v:a(a,v))(lambda fn,x:5 if x==0 or x==1 else fn(fn,x-2) + fn(fn,x-1))",10,,Y,12,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (x * 3) - 4 if x < 3 else (x * 2) + 1,10,,Y,11,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,-1,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x * 1) % (3+1),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 3),-3,False,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: ((x + 1) % 3) % 2,2,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else (2 * fn(fn,x-1) + (x % 3)))",4,,Y,4,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]","(lambda a:lambda v:a(a,v))(lambda fn,x:2 if x==0 else 1 if x==2 else (x-1) % 3)",0,True,Y,0,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: (x * 2) - (x // 2) ** 1,8,,N,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x<=2 else fn(fn,x-1) + fn(fn,x-2) + fn(fn,x-3) - fn(fn,x-4))",8,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]","(lambda a:lambda v:a(a,v))(lambda fn,x:1 if x==0 else 2 if x==1 else fn(fn,x-1) + fn(fn,x-2) - 1)",8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (2 + 1)][x],8,False,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x + 1) + (x // 2),8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: (x + 1) if x < 2 else (x + 2),7,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x] + 2,8,,Y,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: (x * 1) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (1 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: (1 * x) + 3 if x < 2 else (1 * x) + 4,8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x] + 5,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (5 + 1)][x],12,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],10,,Y,10,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) % (4*3),12,False,Y,12,False
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) ** 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) * 1,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (x + 1) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (1 * x) * 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (x * 3) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 3 * (x + 2 + 1),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) * 1 if x > 0 else 0,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (x + 1) * 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (2 * x) + 8,24,False,Y,24,False
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (x * 2) + 8,24,False,Y,24,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (x * 4) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 12,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (1 * x) * 4 + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: 2 * x + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],11,False,Y,11,False
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (x * 2) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 1 if x >= 0 else None,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: 2 * x + 1 + (x > 1),13,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (x * 2) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x + 1) * 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (x * 2) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (1 * x) * 2 + 0,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (x * 2) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (x * 2) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: 2 * x + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (x * 2) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 5,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) - 1,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 7,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 15,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (1 * x) * 4 + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 6,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 6,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 14,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 9,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 9,29,True,Y,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (x + 5) * 1,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: x + 5,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: (x * 3) % (5+1) + (x // 3),8,,N,7,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: (x * 2) if x < 3 else (x + 1),7,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (1 * x) + 2 if x % 3 != 2 else (2 * (x // 3)) + 5,8,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: (x + 1) ^ 2 + 1 if x % 2 else (x + 1) ^ 2 - 3,10,,Y,10,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (3 + 1)][x] + 5,11,,Y (assuming the lambda function is correct and returns the expected output for each input),12 (Note: this function is not a simple arithmetic sequence and is difficult to predict without computing the next value using the given function.),
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (x + 1) ** 2 if x % 2 == 1 else (x + 1) ** 1,11,,Y,11,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]","lambda x: [3, 3, 7, 7][x] if x < 4 else 0",11,False,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ** 1,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) ^ 1 if x > 0 else 0,0,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2 if x % 4 < 2 else (x + 1) % 2,0,,Y,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x % 2) if x < 4 else (x % 2) ^ (x % 4 == 0),0,False,Y,0,False
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (2+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x % 2) ^ 1,1,True,Y,1,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 4 ** x if x > 0 else 1,256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 4 ** x if x > 0 else 1,256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: 4 ** (1 * x),1024,True,Y,1024,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 4 ** (2 + x),4096,True,Y,4096,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** (x-1)),4096,True,Y,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 4 ** (x + 2),16384,True,Y,16384,True
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 5536054..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,361 +0,0 @@
-[2023-06-02 00:02:54,323][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-02 00:02:54,342][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-02 00:02:54,359][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-02 00:02:54,363][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-02 00:02:54,363][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:03:42,043][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:03:42,044][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:03:55,764][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:03:55,764][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:10,033][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize, I have already provided a code for this sequence which was incorrect. Here's the correct code:
-                                                                                           ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:04:10,034][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:04:36,110][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:04:36,110][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:43,584][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-[2023-06-02 00:04:43,585][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats itself)'
-[2023-06-02 00:04:49,114][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:04:49,115][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:04:56,174][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-02 00:04:56,174][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence repeats after 3)'
-[2023-06-02 00:04:59,149][src.evals.sequence_completion][ERROR] - invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 167, in sequence_completion_equality
-    "model_completion_matches": int(model_completion_resp) == last_completion,
-ValueError: invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-[2023-06-02 00:04:59,149][src.evals.sequence_completion][WARNING] - invalid literal for int() with base 10: '0 (since the sequence will repeat itself)'
-[2023-06-02 00:05:05,600][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence seems to be a combination of two sequences: the first three terms form an arithmetic sequence with a common difference of 1, and the fourth term is the sum of the second and third terms. Here's the code:
-                                                                                                                                                                                                                 ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:05:05,601][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:05:25,237][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:05:25,238][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:05:27,324][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence is not an arithmetic or geometric sequence. It does not follow a constant difference or ratio between terms. Therefore, it cannot be generated by a simple formula.
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:05:27,325][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:07:33,071][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence has already been asked before. Here's the code again:
-                                                     ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:07:33,071][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:08:34,804][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 158, in sequence_completion_equality
-    last_completion = eval(explanation)(last_completion_step + 1)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:08:34,805][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:09:02,151][src.evals.sequence_completion][INFO] -
-        Evaluated 212 ambiguous sequences of 225 total.
-        Resulting in:
-        - 81.0% ground-truth-consistent
-        - 83.0% self-rule-following-consistency
-        - 96.0% self-comparison-consistency
-        - 79.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 2.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index 6ca1528..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-4-0314
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index 0108b53..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=gpt-4-0314
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    id: '3'
-    num: 3
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index ecc9102..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=gpt-4-0314
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
deleted file mode 100644
index 86b652c..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_gpt-4-0314.csv
+++ /dev/null
@@ -1,211 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (6 * x) + 0,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: 6 * (x + 1),30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (6 * x) + 12,36,True,N,36,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: 6 * x + 12,42,True,Y,42,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: 6 * (x + 3),42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (5 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: x + 1,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 2,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],7,,Y,7,
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: x + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: 3 + x,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: 4 + x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: x + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],10,False,Y,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: (x * 2) + 4 if x % 2 == 0 else (x * 2) + 3,10,,Y,10,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: x % 3,2,,Y,2,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: x % 3,-1,,Y,2,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: x % 3,3,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: x % 3,1,,Y,0,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: 1 * x,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: (x % 2) + (2 * x),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,Y,9,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: x + 5 if x != 2 else 7,12,False,N,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: x + 5 if x < 3 else x + 6,12,False,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: 3 * x,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,N,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: (x * 3) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: 3 * (x + 1),15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) | 3,15,,Y,15,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x),15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: 9 + 3 * x,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: 3 * x + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 9 + (3 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 9,21,True,N,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (1 * x) * 4,16,True,Y,16,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: 4 * x,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (1 * x) * 4,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (4 * x) + 0,20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) + 4,20,True,N,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x),20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 4 * x + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: 12 + (4 * x),28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: 2 * x + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 3,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) | 5,13,,N,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: 2 * x + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) | 0,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,N,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 2 * x + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: 4 + (2 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) | 6,14,,N,14,
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: 4 + (2 * x),14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: 4 * x + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: 4 * x + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: 11 + 4 * x,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) | 11,31,,N,31,
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (4 * x) + 2,18,True,Y,18,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (4 * x) + 2,22,True,Y,22,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 10 + (4 * x),26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 10 + (4 * x),26,True,N,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) + 1,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) | 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: 4 * x + 9,25,True,N,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 1,29,True,Y,29,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) + 5,29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],7,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],12,,Y,11,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: (x // 2) * 4 + 3,11,True,Y,11,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (x + 1),1024,True,Y,1024,True
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 2,1024,,N,1024,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: 2 ** (4 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 16 * (4 ** x),4096,True,N,4096,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: (2 * x) ** 6,16384,,N,16384,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: 2 ** (6 + 2 * x),16384,True,Y,16384,True
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index f9d24b3..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,406 +0,0 @@
-[2023-06-02 00:09:02,348][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-02 00:09:02,367][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-02 00:09:02,383][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-02 00:09:02,386][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-02 00:09:02,386][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:13:41,306][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    I apologize for the confusion in my previous responses. Here's the correct code for the sequence 3, 4, 5, 7:
-                                                                ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:13:41,306][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:13:57,347][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 3, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:13:57,347][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:14:33,837][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 4, 5, 7, 8:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:14:33,838][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:14:43,572][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    There is no simple arithmetic or geometric rule that generates the given sequence. However, you can use a piecewise function to generate the sequence:
-                ^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:14:43,573][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:15:54,223][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 1, 2, 3, 5 based on the index:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:15:54,223][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:16:09,377][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence appears to be the Fibonacci sequence starting from the second term. Here's the code to generate it:
-                                                                                          ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:16:09,377][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:16:20,847][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, it can be generated using a recursive function that adds the previous two terms:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:16:20,847][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:16:38,254][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, if you are looking for a code that generates the first four terms of the Fibonacci sequence, you can use the following code:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:16:38,255][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:16:54,945][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 3, 5, 6:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:16:54,945][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:17:13,992][src.evals.sequence_completion][ERROR] - list index out of range
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1, in <lambda>
-IndexError: list index out of range
-[2023-06-02 00:17:13,992][src.evals.sequence_completion][WARNING] - list index out of range
-[2023-06-02 00:17:42,767][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:17:42,767][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:17:58,536][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a possible code to generate the sequence 3, 5, 6, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:17:58,536][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:24:36,027][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-02 00:24:36,027][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-02 00:33:05,804][openai][INFO] - error_code=502 error_message='Bad gateway.' error_param=None error_type=cf_bad_gateway message='OpenAI API error received' stream_error=False
-[2023-06-02 00:33:05,804][src.models.openai_model][WARNING] - API Error. Sleep and try again.
-[2023-06-02 00:38:08,117][src.evals.sequence_completion][ERROR] - invalid syntax (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    This sequence does not follow a simple arithmetic or geometric pattern. However, you can generate it using a custom function:
-         ^^^^^^^^
-SyntaxError: invalid syntax
-[2023-06-02 00:38:08,117][src.evals.sequence_completion][WARNING] - invalid syntax (<string>, line 1)
-[2023-06-02 00:38:29,517][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:38:29,517][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:38:45,287][src.evals.sequence_completion][ERROR] - unterminated string literal (detected at line 1) (<string>, line 1)
-Traceback (most recent call last):
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 187, in evaluate_sequence_completion_equality
-    sequence_completion_equality(
-  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion.py", line 139, in sequence_completion_equality
-    completion = eval(explanation)(i)
-  File "<string>", line 1
-    Here's a code that generates the sequence 2, 4, 5, 7:
-        ^
-SyntaxError: unterminated string literal (detected at line 1)
-[2023-06-02 00:38:45,287][src.evals.sequence_completion][WARNING] - unterminated string literal (detected at line 1) (<string>, line 1)
-[2023-06-02 00:40:16,225][src.evals.sequence_completion][INFO] -
-        Evaluated 210 ambiguous sequences of 225 total.
-        Resulting in:
-        - 87.0% ground-truth-consistent
-        - 87.0% self-rule-following-consistency
-        - 85.0% self-comparison-consistency
-        - 75.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 3.0% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
deleted file mode 100644
index d5bd00a..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/config.yaml
+++ /dev/null
@@ -1,8 +0,0 @@
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: text-davinci-003
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
deleted file mode 100644
index da527de..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/hydra.yaml
+++ /dev/null
@@ -1,159 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=text-davinci-003
-    - string_transformation_completion_equality=False
-    - compute_dependence_with_base_changes=False
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    id: '1'
-    num: 1
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
deleted file mode 100644
index adf3b7e..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/.hydra/overrides.yaml
+++ /dev/null
@@ -1,3 +0,0 @@
-- sequence_completion_equality.model=text-davinci-003
-- string_transformation_completion_equality=False
-- compute_dependence_with_base_changes=False
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
deleted file mode 100644
index c94954c..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality/sequence_completion_equality_evaluation_text-davinci-003.csv
+++ /dev/null
@@ -1,226 +0,0 @@
-original_function,sequence,generated_completion_rule,generated_completion,generated_completion_matches,model_self_consistency_evaluation,model_completion,model_completion_matches
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 2, 2)}","[0, 6, 12, 18]",lambda x: (x * 6) % (18+1),24,False,Y,24,False
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 1, 3)}","[0, 6, 12, 18]",lambda x: (3 * x) * 2,24,True,Y,24,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 2, 2)}","[6, 12, 18, 24]",lambda x: (x * 6) * 2,30,,Y,36,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 1, 3)}","[6, 12, 18, 24]",lambda x: (2 * x) * 3,30,True,Y,30,True
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 2, 2)}","[12, 18, 24, 30]",lambda x: (6 * x) + 6,36,True,Y,36,True
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 1, 3)}","[12, 18, 24, 30]",lambda x: (3 * x) * 4,36,,Y,36,
-"{'fn': 'lambda x: (3 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 2, 2)}","[18, 24, 30, 36]",lambda x: (6 * x) | 6,42,,Y,42,
-"{'fn': 'lambda x: (2 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 1, 3)}","[18, 24, 30, 36]",lambda x: (6 * x) + 12,42,True,Y,42,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 2)}","[1, 2, 3, 4]",lambda x: (x + 1) * 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],5,True,N,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 2)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 0,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 0, 0)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 0, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 2)}","[1, 2, 3, 4]",lambda x: x + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 1)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 3)}","[1, 2, 3, 4]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],5,,N,5,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 3, 0)}","[1, 2, 3, 4]",lambda x: (1 * x) + 1,5,True,Y,5,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 2)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1)][x],6,False,N,6,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: (x * 1) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 2)}","[2, 3, 4, 5]",lambda x: x + 2,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (x * 1) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (4 + 1) or i % (3 + 1) or i % (2 + 1)][x],6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 0, 0)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 0, 1)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 2)}","[2, 3, 4, 5]",lambda x: (x * 2) + 2,6,,Y,6,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 1)}","[2, 3, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],6,True,N,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 3, 3)}","[2, 3, 4, 5]",lambda x: (1 * x) + 1,6,True,Y,6,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 2)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (1 * x) | 3,7,,N,7,
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 0, 0)}","[3, 4, 5, 6]",lambda x: (1 * x) | 3,7,,N,7,
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 0, 1)}","[3, 4, 5, 6]",lambda x: (x + 1) * 3,7,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 2)}","[3, 4, 5, 6]",lambda x: (x * 1) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 3,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 1)}","[3, 4, 5, 6]",lambda x: (x + 3),7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 3, 3)}","[3, 4, 5, 6]",lambda x: (1 * x) + 2,7,True,Y,7,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (7 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 2)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (7 + 1) or i % (6 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: (1 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 2)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 0, 3)}","[4, 5, 6, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 1)}","[4, 5, 6, 7]",lambda x: (1 * x) + 4,8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 3, 3)}","[4, 5, 6, 7]",lambda x: (x + 4),8,True,Y,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 1)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (3 + 1)][x],9,False,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 2)}","[3, 4, 5, 7]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,Y,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 1)}","[4, 5, 7, 8]",lambda x: (1 * x) + 2,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 3,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 0)}","[4, 5, 7, 8]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1)][x],9,True,N,10,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 1, 2)}","[4, 5, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x + 1) % (3+1),3,,Y,1,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: x % 3,1,True,Y,1,True
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 2)}","[0, 1, 2, 0]",lambda x: (x % 4) ** 2,1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 3, 'metadata': ('modular_progression', 3, 2)}","[0, 1, 2, 0]",lambda x: (x * 3) % (2+1),1,,Y,1,
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 3, 2)}","[1, 2, 0, 1]",lambda x: (x * 1) % (2+1),2,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 2)}","[1, 2, 0, 1]",lambda x: (x + 1) % (2+1),2,True,Y,0,False
-"{'fn': 'lambda x: (x * 4) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 3, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],3,,N,0,
-"{'fn': 'lambda x: (x * 1) % (2+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 2)}","[2, 0, 1, 2]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],3,,N,3,
-"{'fn': 'lambda x: (1 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: (1 * x) + 0,4,True,Y,4,True
-"{'fn': 'lambda x: (x * 1) % (3+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 3)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: (1 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 0, 0)}","[0, 1, 2, 3]",lambda x: (x * 1) % (4+1),4,True,Y,0,False
-"{'fn': 'lambda x: (1 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 0, 1)}","[0, 1, 2, 3]",lambda x: x,4,True,Y,4,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (5 + 1) or i % (2 + 1) or i % (3 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 0)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (2 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 2, 1)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 3)}","[1, 2, 3, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (4 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 3)}","[2, 3, 5, 6]",lambda x: (1 * x) + (2 * (x // 2)),8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 0)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 2, 1)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (2 + 1)][x],8,,Y,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 3)}","[2, 3, 5, 6]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x],7,True,N,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 3)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 0)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (4 + 1)][x],8,True,N,8,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 2, 1)}","[3, 5, 6, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],8,,N,8,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 3)}","[3, 5, 6, 7]",lambda x: (2 * x) + 1,8,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 3)}","[5, 6, 7, 9]",lambda x: (1 * x) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 0)}","[5, 6, 7, 9]",lambda x: (x * 1) + 5,11,False,Y,10,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (3 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 2, 1)}","[5, 6, 7, 9]",lambda x: (2 * x) + 3,11,,Y,11,
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 3)}","[5, 6, 7, 9]",lambda x: (2 * x) + 3,11,,Y,11,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 0, 'metadata': ('geometric_progression', 0, 3)}","[0, 3, 6, 9]",lambda x: (x * 3) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) + 0,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x),12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 2, 1)}","[0, 3, 6, 9]",lambda x: (3 * x) * 1,12,True,Y,12,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 2, 0)}","[0, 3, 6, 9]",lambda x: (3 * x) % (3+1),12,,Y,12,
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 1, 'metadata': ('geometric_progression', 0, 3)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: (3 * x) + 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 2, 3)}","[3, 6, 9, 12]",lambda x: [i for i in range(100) if i % (3 + 1) or i % (0 + 1)][x],15,,N,15,
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) | 0,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 2, 1)}","[3, 6, 9, 12]",lambda x: (3 * x) + 3,15,True,Y,15,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 2, 0)}","[3, 6, 9, 12]",lambda x: 3 * x,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 2, 'metadata': ('geometric_progression', 0, 3)}","[6, 9, 12, 15]",lambda x: (3 * x) + 6,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) * 1,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 2, 3)}","[6, 9, 12, 15]",lambda x: 3 * (x + 1),18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 2, 1)}","[6, 9, 12, 15]",lambda x: (3 * x) | 3,18,,N,18,
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 2, 0)}","[6, 9, 12, 15]",lambda x: (3 * x) + 3,18,True,Y,18,True
-"{'fn': 'lambda x: (1 * x) * 3', 'offset': 3, 'metadata': ('geometric_progression', 0, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 3,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 2, 3)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: 3 * (x + 1) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 2, 1)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (3 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 2, 0)}","[9, 12, 15, 18]",lambda x: (3 * x) + 6,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) ** 0,16,,Y,16,
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 1, 2)}","[0, 4, 8, 12]",lambda x: (4 * x) | 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) + 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 3, 1)}","[0, 4, 8, 12]",lambda x: (4 * x) | 0,16,True,Y,16,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 3, 0)}","[0, 4, 8, 12]",lambda x: (4 * x) * 3,16,,Y,16,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: 4 * (x + 1),20,True,Y,20,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 1, 2)}","[4, 8, 12, 16]",lambda x: (4 * x) | 0,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: (4 * x) * 1,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 3, 1)}","[4, 8, 12, 16]",lambda x: (1 * x) * 4,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 3, 0)}","[4, 8, 12, 16]",lambda x: 4 * x,20,True,Y,20,True
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 8,24,True,Y,24,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 1, 2)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (4 * x) % (20+1),24,False,Y,24,False
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 3, 1)}","[8, 12, 16, 20]",lambda x: (4 * x) + 4,24,True,Y,24,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 3, 0)}","[8, 12, 16, 20]",lambda x: (2 * x) + 4,24,,Y,24,
-"{'fn': 'lambda x: (4 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (2 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 1, 2)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 3, 1)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: (4 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 3, 0)}","[12, 16, 20, 24]",lambda x: (4 * x) + 8,28,True,Y,28,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) + 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 0, 0)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 1)}","[1, 3, 5, 7]",lambda x: (2 * x) | 1,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) | 1,11,True,N,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 0, 0)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 1)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 3)}","[3, 5, 7, 9]",lambda x: (2 * x) + 1,11,True,Y,11,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 1)}","[5, 7, 9, 11]",lambda x: [i for i in range(100) if i % (2 + 1)][x],13,,Y,13,
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 2, 'metadata': ('indexing_criteria_progression', 0, 0)}","[5, 7, 9, 11]",lambda x: (2 * x) + 3,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 1)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 3)}","[5, 7, 9, 11]",lambda x: (2 * x) + 5,13,True,Y,13,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (1 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 7,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (1 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 0, 0)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 1)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (2 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 3)}","[7, 9, 11, 13]",lambda x: (2 * x) + 5,15,True,Y,15,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 0, 'metadata': ('geometric_progression', 0, 2)}","[0, 2, 4, 6]",lambda x: (2 * x) % (7+1),8,False,Y,0,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 0, 'metadata': ('bit_or_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 0)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 0, 'metadata': ('geometric_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: (2 * x) + 0,8,True,Y,8,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 0, 'metadata': ('exponential_progression', 1, 1)}","[0, 2, 4, 6]",lambda x: 2 * x,8,True,Y,8,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 1, 'metadata': ('geometric_progression', 0, 2)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 1, 'metadata': ('bit_or_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: 2 * x,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 0)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 1, 'metadata': ('geometric_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) + 2,10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 1, 2)}","[2, 4, 6, 8]",lambda x: 2 * (x + 1),10,True,Y,10,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 1, 'metadata': ('exponential_progression', 1, 1)}","[2, 4, 6, 8]",lambda x: (2 * x) * 1,10,True,Y,10,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 2, 'metadata': ('geometric_progression', 0, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 2, 'metadata': ('bit_or_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 0)}","[4, 6, 8, 10]",lambda x: (2 * x) + 4,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 2, 'metadata': ('geometric_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 1, 2)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 2, 'metadata': ('exponential_progression', 1, 1)}","[4, 6, 8, 10]",lambda x: (2 * x) + 2,12,True,Y,12,True
-"{'fn': 'lambda x: (1 * x) * 2', 'offset': 3, 'metadata': ('geometric_progression', 0, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) | 0', 'offset': 3, 'metadata': ('bit_or_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 0', 'offset': 3, 'metadata': ('arithmetic_progression', 1, 0)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) * 1', 'offset': 3, 'metadata': ('geometric_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 4,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 1, 2)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (2 * x) ** 1', 'offset': 3, 'metadata': ('exponential_progression', 1, 1)}","[6, 8, 10, 12]",lambda x: (2 * x) + 6,14,True,Y,14,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (3 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 2, 3)}","[3, 7, 11, 15]",lambda x: (4 * x) + 3,19,True,Y,19,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 1, 'metadata': ('bit_or_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (x * 4) + 3,23,True,Y,23,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 3)}","[7, 11, 15, 19]",lambda x: (4 * x) | 3,23,True,N,23,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 3)}","[11, 15, 19, 23]",lambda x: (4 * x) + 7,27,True,Y,27,True
-"{'fn': 'lambda x: (4 * x) | 3', 'offset': 3, 'metadata': ('bit_or_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 3,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 3', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 3)}","[15, 19, 23, 27]",lambda x: (4 * x) + 11,31,True,Y,31,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 0, 'metadata': ('bit_or_progression', 3, 2)}","[2, 6, 10, 14]",lambda x: (2 * x) + 4,18,,Y,18,
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 4,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 1, 'metadata': ('bit_or_progression', 3, 2)}","[6, 10, 14, 18]",lambda x: (2 * x) + 4,22,False,Y,22,False
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: 4 * x + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 2, 'metadata': ('bit_or_progression', 3, 2)}","[10, 14, 18, 22]",lambda x: (4 * x) + 10,26,True,Y,26,True
-"{'fn': 'lambda x: (4 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 2', 'offset': 3, 'metadata': ('bit_or_progression', 3, 2)}","[14, 18, 22, 26]",lambda x: (4 * x) + 10,30,True,Y,30,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 0, 'metadata': ('bit_or_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (2 * x) + 1,17,False,Y,17,False
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 0, 'metadata': ('arithmetic_progression', 3, 1)}","[1, 5, 9, 13]",lambda x: (4 * x) - 3,17,True,Y,17,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 1, 'metadata': ('bit_or_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: (4 * x) + 1,21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 1, 'metadata': ('arithmetic_progression', 3, 1)}","[5, 9, 13, 17]",lambda x: 5 + (4 * x),21,True,Y,21,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 2, 'metadata': ('bit_or_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 2, 'metadata': ('arithmetic_progression', 3, 1)}","[9, 13, 17, 21]",lambda x: (4 * x) + 5,25,True,Y,25,True
-"{'fn': 'lambda x: (4 * x) | 1', 'offset': 3, 'metadata': ('bit_or_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 13,29,,Y,29,
-"{'fn': 'lambda x: (4 * x) + 1', 'offset': 3, 'metadata': ('arithmetic_progression', 3, 1)}","[13, 17, 21, 25]",lambda x: (4 * x) | 1,29,True,N,29,True
-"{'fn': 'lambda x: (1 * x) + 2', 'offset': 3, 'metadata': ('arithmetic_progression', 0, 2)}","[5, 6, 7, 8]",lambda x: (1 * x) + 4,9,True,Y,9,True
-"{'fn': 'lambda x: (1 * x) + 3', 'offset': 2, 'metadata': ('arithmetic_progression', 0, 3)}","[5, 6, 7, 8]",lambda x: (1 * x) + 5,9,True,Y,9,True
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 0)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],8,False,Y,7,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 0, 'metadata': ('indexing_criteria_progression', 1, 2)}","[1, 2, 4, 5]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1) or i % (1 + 1)][x],8,False,Y,8,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 0)}","[2, 4, 5, 7]",lambda x: (2 * x) + 1,9,,Y,9,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 1, 'metadata': ('indexing_criteria_progression', 1, 2)}","[2, 4, 5, 7]",lambda x: [i for i in range(100) if i % (2 + 1) or i % (3 + 1) or i % (5 + 1)][x],9,False,N,11,False
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (0 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 0)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: [i for i in range(100) if i % (2 + 1) or i % (2 + 1)][x]', 'offset': 3, 'metadata': ('indexing_criteria_progression', 1, 2)}","[5, 7, 8, 10]",lambda x: (2 * x) + 3,12,,Y,13,
-"{'fn': 'lambda x: (1 * x) | 3', 'offset': 2, 'metadata': ('bit_or_progression', 0, 3)}","[3, 3, 7, 7]",lambda x: (4 * x) % (2+1),3,,Y,3,
-"{'fn': 'lambda x: (2 * x) | 3', 'offset': 0, 'metadata': ('bit_or_progression', 1, 3)}","[3, 3, 7, 7]",lambda x: [i for i in range(100) if i % (4 + 1) or i % (0 + 1)][x],7,,N,3,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: (x * 2) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 0, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: (x * 4) % (1+1),0,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 0, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 2, 'metadata': ('modular_progression', 2, 1)}","[0, 1, 0, 1]",lambda x: x % 2,0,True,Y,0,True
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: (x * 2) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 1, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: (x * 1) % (2+1),1,,Y,0,
-"{'fn': 'lambda x: (x * 1) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 0, 1)}","[1, 0, 1, 0]",lambda x: [i for i in range(100) if i % (1 + 1) or i % (3 + 1)][x],1,,N,0,
-"{'fn': 'lambda x: (x * 3) % (1+1)', 'offset': 3, 'metadata': ('modular_progression', 2, 1)}","[1, 0, 1, 0]",lambda x: x % 2,1,,Y,1,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 0, 'metadata': ('power_progression', 3, 1)}","[1, 4, 16, 64]",lambda x: (2 * x) ** 4,256,,Y,256,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 0, 'metadata': ('power_progression', 1, 2)}","[1, 4, 16, 64]",lambda x: 2 ** (2 * x),256,True,Y,256,True
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 1, 'metadata': ('power_progression', 3, 1)}","[4, 16, 64, 256]",lambda x: 4 ** (2 * x),1024,,Y,1024,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 1, 'metadata': ('power_progression', 1, 2)}","[4, 16, 64, 256]",lambda x: (2 * x) ** 3,1024,,Y,2048,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 2, 'metadata': ('power_progression', 3, 1)}","[16, 64, 256, 1024]",lambda x: (4 * x) ** 2,4096,,Y,4096,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 2, 'metadata': ('power_progression', 1, 2)}","[16, 64, 256, 1024]",lambda x: 4 ** (4 * x),4096,,Y,4096,
-"{'fn': 'lambda x: 4 ** (1 * x)', 'offset': 3, 'metadata': ('power_progression', 3, 1)}","[64, 256, 1024, 4096]",lambda x: 4 ** (4 * x),16384,,Y,65536,
-"{'fn': 'lambda x: 2 ** (2 * x)', 'offset': 3, 'metadata': ('power_progression', 1, 2)}","[64, 256, 1024, 4096]",lambda x: (4 * x) ** 2,16384,,Y,16384,
diff --git a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log b/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
deleted file mode 100644
index 2847996..0000000
--- a/results/q0/run_3/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/main.log
+++ /dev/null
@@ -1,239 +0,0 @@
-[2023-06-01 23:55:05,893][src.utils][INFO] - Git sha: a78aae517535a9760211e71ffc591118b750a75c
-[2023-06-01 23:55:05,919][src.utils][INFO] - Changed files: ['results/q0/analyze_q0_results.ipynb', 'results/q0/q0_results.csv', 'src/evals/sequence_completion.py']
-[2023-06-01 23:55:05,940][src.utils][INFO] - Git diff:
-diff --git a/results/q0/analyze_q0_results.ipynb b/results/q0/analyze_q0_results.ipynb
-index 36ce41e..7f86d30 100644
---- a/results/q0/analyze_q0_results.ipynb
-+++ b/results/q0/analyze_q0_results.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 44,
-+   "execution_count": 1,
-    "id": "b0a9b3a5",
-    "metadata": {},
-    "outputs": [
-@@ -13,6 +13,7 @@
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=davinci,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-3.5-turbo,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-+      "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=gpt-4-0314-run-2,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "\u001b[1m\u001b[36mcompute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False\u001b[m\u001b[m\r\n",
-       "multirun.yaml\r\n"
-      ]
-@@ -24,15 +25,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 45,
--   "id": "491b280b",
--   "metadata": {},
--   "outputs": [],
--   "source": []
--  },
--  {
--   "cell_type": "code",
--   "execution_count": 62,
-+   "execution_count": 5,
-    "id": "514d264c",
-    "metadata": {},
-    "outputs": [
-@@ -42,7 +35,7 @@
-      "text": [
-       "\n",
-       "            For davinci including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 26.090000000000003% ground-truth-consistent (using 23)\n",
-       "            - 56.52% self-rule-following-consistency (using 23)\n",
-@@ -51,7 +44,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.67999999999999% ground-truth-consistent (using 188)\n",
-       "            - 95.74000000000001% self-rule-following-consistency (using 188)\n",
-@@ -60,7 +53,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 94.64% ground-truth-consistent (using 168)\n",
-       "            - 97.02% self-rule-following-consistency (using 168)\n",
-@@ -68,8 +61,17 @@
-       "            - 73.81% self-comparison-consistency and ground-truth-consistent. (using 168)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including valid answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 98.08% ground-truth-consistent (using 104)\n",
-+      "            - 98.08% self-rule-following-consistency (using 104)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 75.0% self-comparison-consistency and ground-truth-consistent. (using 104)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including valid answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 88.44% ground-truth-consistent (using 173)\n",
-       "            - 93.64% self-rule-following-consistency (using 173)\n",
-@@ -78,7 +80,7 @@
-       "            \n",
-       "\n",
-       "            For davinci including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 217 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 2.76% ground-truth-consistent (using 217)\n",
-       "            - 5.99% self-rule-following-consistency (using 217)\n",
-@@ -87,7 +89,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-3.5-turbo including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 215 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 82.78999999999999% ground-truth-consistent (using 215)\n",
-       "            - 83.72% self-rule-following-consistency (using 215)\n",
-@@ -96,7 +98,7 @@
-       "            \n",
-       "\n",
-       "            For gpt-4-0314 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 184 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 86.41% ground-truth-consistent (using 184)\n",
-       "            - 88.59% self-rule-following-consistency (using 184)\n",
-@@ -104,8 +106,17 @@
-       "            - 72.83% self-comparison-consistency and ground-truth-consistent. (using 184)\n",
-       "            \n",
-       "\n",
-+      "            For gpt-4-0314-run-2 including all answers\n",
-+      "            Evaluated 107 ambiguous sequences of 225 total.\n",
-+      "            Resulting in:\n",
-+      "            - 95.33% ground-truth-consistent (using 107)\n",
-+      "            - 95.33% self-rule-following-consistency (using 107)\n",
-+      "            - 76.64% self-comparison-consistency (using 107)\n",
-+      "            - 74.77000000000001% self-comparison-consistency and ground-truth-consistent. (using 107)\n",
-+      "            \n",
-+      "\n",
-       "            For text-davinci-003 including all answers\n",
--      "            Evaluated 173 ambiguous sequences of 225 total.\n",
-+      "            Evaluated 225 ambiguous sequences of 225 total.\n",
-       "            Resulting in:\n",
-       "            - 68.0% ground-truth-consistent (using 225)\n",
-       "            - 72.0% self-rule-following-consistency (using 225)\n",
-@@ -117,9 +128,9 @@
-    ],
-    "source": [
-     "import numpy as np\n",
--    "\n",
-+    "import pandas as pd\n",
-     "models = [\n",
--    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"text-davinci-003\"\n",
-+    "    \"davinci\", \"gpt-3.5-turbo\", \"gpt-4-0314\", \"gpt-4-0314-run-2\", \"text-davinci-003\"\n",
-     "]\n",
-     "results = []\n",
-     "for answer_validity in ['valid', 'all']:\n",
-@@ -184,7 +195,7 @@
-     "        print(\n",
-     "            f\"\"\"\n",
-     "            For {model} including {answer_validity} answers\n",
--    "            Evaluated {count} ambiguous sequences of {total_sequences} total.\n",
-+    "            Evaluated {len(df)} ambiguous sequences of {total_sequences} total.\n",
-     "            Resulting in:\n",
-     "            - {ground_truth_consistent}% ground-truth-consistent (using {len(match_accs)})\n",
-     "            - {self_rule_following_consistency}% self-rule-following-consistency (using {len(model_match_accs)})\n",
-diff --git a/results/q0/q0_results.csv b/results/q0/q0_results.csv
-index f6dfcfd..eb87bb4 100644
---- a/results/q0/q0_results.csv
-+++ b/results/q0/q0_results.csv
-@@ -2,8 +2,10 @@
- 0,davinci,valid,26.090000000000003,23,56.52,23,96.31,217,26.090000000000003,23
- 1,gpt-3.5-turbo,valid,94.67999999999999,188,95.74000000000001,188,94.42,215,89.89,188
- 2,gpt-4-0314,valid,94.64,168,97.02,168,77.17,184,73.81,168
--3,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
--4,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
--5,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
--6,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
--7,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-+3,gpt-4-0314-run-2,valid,98.08,104,98.08,104,76.64,107,75.0,104
-+4,text-davinci-003,valid,88.44,173,93.64,173,84.89,225,83.82,173
-+5,davinci,all,2.76,217,5.99,217,96.31,217,88.48,217
-+6,gpt-3.5-turbo,all,82.78999999999999,215,83.72,215,94.42,215,90.7,215
-+7,gpt-4-0314,all,86.41,184,88.59,184,77.17,184,72.83,184
-+8,gpt-4-0314-run-2,all,95.33,107,95.33,107,76.64,107,74.77000000000001,107
-+9,text-davinci-003,all,68.0,225,72.0,225,84.89,225,79.11,225
-diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
-index c887125..a44cbe6 100644
---- a/src/evals/sequence_completion.py
-+++ b/src/evals/sequence_completion.py
-@@ -203,11 +203,12 @@ def evaluate_sequence_completion_equality(
-         f"sequence_completion_equality_evaluation_{model}.csv", index=False
-     )
-
--    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched = (
-+    match_accs, model_match_accs, model_consistency_accs, consistent_and_matched_positive, consistent_and_matched_negative = (
-         [],
-         [],
-         [],
-         [],
-+        []
-     )
-     for data in completion_data:
-         match_accs.append(1 if data["generated_completion_matches"] else 0)
-@@ -215,17 +216,24 @@ def evaluate_sequence_completion_equality(
-         model_consistency_accs.append(
-             1 if data["model_self_consistency_evaluation"].strip() == "Y" else 0
-         )
--        consistent_and_matched.append(
-+        consistent_and_matched_positive.append(
-             1
-             if data["model_self_consistency_evaluation"].strip() == "Y"
-             and data["generated_completion_matches"]
-             else 0
-         )
-+        consistent_and_matched_negative.append(
-+            1
-+            if data["model_self_consistency_evaluation"].strip() == "N"
-+            and not data["generated_completion_matches"]
-+            else 0
-+        )
-
-     ground_truth_consistent = round(np.mean(match_accs), 2) * 100
-     self_rule_following_consistency = round(np.mean(model_match_accs), 2) * 100
-     self_comparison_consistency = round(np.mean(model_consistency_accs), 2) * 100
--    consistent_and_matched_accuracy = round(np.mean(consistent_and_matched), 2) * 100
-+    consistent_and_matched_positive_accuracy = round(np.mean(consistent_and_matched_positive), 2) * 100
-+    consistent_and_matched_negative_accuracy = round(np.mean(consistent_and_matched_negative), 2) * 100
-     logger.info(
-         f"""
-         Evaluated {len(completion_data)} ambiguous sequences of {total_sequences} total.
-@@ -233,6 +241,7 @@ def evaluate_sequence_completion_equality(
-         - {ground_truth_consistent}% ground-truth-consistent
-         - {self_rule_following_consistency}% self-rule-following-consistency
-         - {self_comparison_consistency}% self-comparison-consistency
--        - {consistent_and_matched_accuracy}% self-comparison-consistency and ground-truth-consistent.
-+        - {consistent_and_matched_positive_accuracy}% self-comparison-consistency and ground-truth-consistent (positive).
-+        - {consistent_and_matched_negative_accuracy}% self-comparison-consistency and ground-truth-consistent (negative).
-         """
-     )
-[2023-06-01 23:55:05,943][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-01-21-46-54/compute_dependence_with_base_changes=False,sequence_completion_equality.model=text-davinci-003,string_transformation_completion_equality=False/evaluate_sequence_completion_equality
-[2023-06-01 23:55:05,944][src.evals.sequence_completion][INFO] - Evaluating sequence completion equality...
-[2023-06-02 00:02:54,079][src.evals.sequence_completion][INFO] -
-        Evaluated 225 ambiguous sequences of 225 total.
-        Resulting in:
-        - 69.0% ground-truth-consistent
-        - 69.0% self-rule-following-consistency
-        - 88.0% self-comparison-consistency
-        - 64.0% self-comparison-consistency and ground-truth-consistent (positive).
-        - 7.000000000000001% self-comparison-consistency and ground-truth-consistent (negative).
-
diff --git a/results/q0/run_3/multirun.yaml b/results/q0/run_3/multirun.yaml
deleted file mode 100644
index 44a9ce7..0000000
--- a/results/q0/run_3/multirun.yaml
+++ /dev/null
@@ -1,167 +0,0 @@
-hydra:
-  run:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-  sweep:
-    dir: ./results/${now:%Y-%m-%d-%H-%M-%S}
-    subdir: ${hydra.job.override_dirname}
-  launcher:
-    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
-  sweeper:
-    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
-    max_batch_size: null
-    params: null
-  help:
-    app_name: ${hydra.job.name}
-    header: '${hydra.help.app_name} is powered by Hydra.
-
-      '
-    footer: 'Powered by Hydra (https://hydra.cc)
-
-      Use --hydra-help to view Hydra specific help
-
-      '
-    template: '${hydra.help.header}
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (group=option)
-
-
-      $APP_CONFIG_GROUPS
-
-
-      == Config ==
-
-      Override anything in the config (foo.bar=value)
-
-
-      $CONFIG
-
-
-      ${hydra.help.footer}
-
-      '
-  hydra_help:
-    template: 'Hydra (${hydra.runtime.version})
-
-      See https://hydra.cc for more info.
-
-
-      == Flags ==
-
-      $FLAGS_HELP
-
-
-      == Configuration groups ==
-
-      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
-      to command line)
-
-
-      $HYDRA_CONFIG_GROUPS
-
-
-      Use ''--cfg hydra'' to Show the Hydra config.
-
-      '
-    hydra_help: ???
-  hydra_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][HYDRA] %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-    root:
-      level: INFO
-      handlers:
-      - console
-    loggers:
-      logging_example:
-        level: DEBUG
-    disable_existing_loggers: false
-  job_logging:
-    version: 1
-    formatters:
-      simple:
-        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
-    handlers:
-      console:
-        class: logging.StreamHandler
-        formatter: simple
-        stream: ext://sys.stdout
-      file:
-        class: logging.FileHandler
-        formatter: simple
-        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
-    root:
-      level: INFO
-      handlers:
-      - console
-      - file
-    disable_existing_loggers: false
-  env: {}
-  mode: MULTIRUN
-  searchpath: []
-  callbacks:
-    git_logging:
-      _target_: src.utils.LogGitHashCallback
-  output_subdir: .hydra
-  overrides:
-    hydra:
-    - hydra.mode=MULTIRUN
-    task:
-    - sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314
-    - string_transformation_completion_equality=false
-    - compute_dependence_with_base_changes=false
-  job:
-    name: main
-    chdir: true
-    override_dirname: compute_dependence_with_base_changes=false,sequence_completion_equality.model=davinci,text-davinci-003,gpt-3.5-turbo,gpt-4-0314,string_transformation_completion_equality=false
-    id: ???
-    num: ???
-    config_name: main
-    env_set: {}
-    env_copy: []
-    config:
-      override_dirname:
-        kv_sep: '='
-        item_sep: ','
-        exclude_keys: []
-  runtime:
-    version: 1.3.2
-    version_base: '1.3'
-    cwd: /Users/domenicrosati/src/introspective-self-consistency
-    config_sources:
-    - path: hydra.conf
-      schema: pkg
-      provider: hydra
-    - path: /Users/domenicrosati/src/introspective-self-consistency/conf
-      schema: file
-      provider: main
-    - path: ''
-      schema: structured
-      provider: schema
-    output_dir: ???
-    choices:
-      hydra/env: default
-      hydra/callbacks: null
-      hydra/job_logging: default
-      hydra/hydra_logging: default
-      hydra/hydra_help: default
-      hydra/help: default
-      hydra/sweeper: basic
-      hydra/launcher: basic
-      hydra/output: default
-  verbose: false
-string_transformation_completion_equality: false
-sequence_completion_equality:
-  model: gpt-3.5-turbo
-  max_offset: 8
-  num_shots: 4
-  use_cot: false
-  few_shot_prompt_type: random
-compute_dependence_with_base_changes: false
diff --git a/src/evals/sequence_completion.py b/src/evals/sequence_completion.py
index a44cbe6..27c3ac5 100644
--- a/src/evals/sequence_completion.py
+++ b/src/evals/sequence_completion.py
@@ -149,10 +149,10 @@ def sequence_completion_equality(
             "sequence": sequence,
             "generated_completion_rule": explanation,
             "generated_completion": actual_completion,
-            "generated_completion_matches": None,
+            "generated_completion_matches": False,
             "model_self_consistency_evaluation": consistency_resp,
             "model_completion": model_completion_resp,
-            "model_completion_matches": None,
+            "model_completion_matches": False,
         }

     last_completion = eval(explanation)(last_completion_step + 1)
[2023-06-07 16:26:56,329][src.utils][INFO] - Changed directory to /Users/domenicrosati/src/introspective-self-consistency/results/2023-06-07-15-41-04/compute_dependence_with_base_changes=False,sequence_completion_capability.model=gpt-3.5-turbo,sequence_completion_equality=False,string_transformation_completion_equality=False/evaluate_sequence_completion_capability
[2023-06-07 16:26:56,329][src.evals.sequence_completion_capability][INFO] - Evaluating sequence completion capability...
[2023-06-07 16:28:00,164][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    I apologize, I have already provided the code for this sequence. Here it is again for your reference:
      ^^^^^^^^^
SyntaxError: invalid syntax
[2023-06-07 16:28:00,165][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:28:02,518][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    This is the OEIS sequence A006257, which is the odd-indexed terms of the sequence of numerators of the continued fraction convergents to sqrt(2). The code to generate this sequence is:
                ^^^^
SyntaxError: invalid syntax
[2023-06-07 16:28:02,518][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:28:07,329][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    This sequence is not an arithmetic or geometric sequence. It is not possible to generate this sequence using a simple formula. It may be a sequence generated by a recursive formula or some other algorithm.
         ^^^^^^^^
SyntaxError: invalid syntax
[2023-06-07 16:28:07,329][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:28:44,198][src.evals.sequence_completion_capability][ERROR] - list index out of range
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
IndexError: list index out of range
[2023-06-07 16:28:44,198][src.evals.sequence_completion_capability][WARNING] - list index out of range
[2023-06-07 16:28:48,393][src.evals.sequence_completion_capability][ERROR] - invalid syntax (<string>, line 1)
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1
    This sequence is not an arithmetic or geometric sequence. It is not possible to generate this sequence using a simple formula. It may be a sequence generated by a recursive formula or some other algorithm.
         ^^^^^^^^
SyntaxError: invalid syntax
[2023-06-07 16:28:48,393][src.evals.sequence_completion_capability][WARNING] - invalid syntax (<string>, line 1)
[2023-06-07 16:30:03,687][src.evals.sequence_completion_capability][ERROR] - maximum recursion depth exceeded in comparison
Traceback (most recent call last):
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 110, in evaluate_sequence_completion_capability
    sequence_completion_eval(
  File "/Users/domenicrosati/src/introspective-self-consistency/src/evals/sequence_completion_capability.py", line 69, in sequence_completion_eval
    completion = eval(explanation)(i)
  File "<string>", line 1, in <lambda>
  File "<string>", line 1, in <lambda>
  File "<string>", line 1, in <lambda>
  [Previous line repeated 982 more times]
RecursionError: maximum recursion depth exceeded in comparison
[2023-06-07 16:30:03,692][src.evals.sequence_completion_capability][WARNING] - maximum recursion depth exceeded in comparison
[2023-06-07 16:30:15,950][src.evals.sequence_completion_capability][INFO] -
        Evaluated 133 ambiguous sequences of 139 total.
        Resulting in:
        - 47.0% rules_matches_sequence
        - 77.0% completion_is_correct
