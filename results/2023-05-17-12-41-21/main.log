[2023-05-17 12:41:21,084][src.utils][INFO] - Git sha: cb572d459e45d11a84e5cdc86b6603901f676290
[2023-05-17 12:41:21,092][src.utils][INFO] - Changed files: ['main.py', 'src/evals/check_self_consistency.py', 'src/evals/sequence_completion_with_base_change.py']
[2023-05-17 12:41:21,100][src.utils][INFO] - Git diff:
diff --git a/main.py b/main.py
index 083b705..a363731 100644
--- a/main.py
+++ b/main.py
@@ -8,7 +8,7 @@ from src.evals.sequence_completion_with_base_change import (
     evaluate_compute_dependence_with_base_changes,
 )
 from src.evals.string_transformation import evaluate_string_transformation_equality
-from utils import log_exceptions
+from src.utils import log_exceptions

 logger = logging.getLogger(__name__)

diff --git a/src/evals/check_self_consistency.py b/src/evals/check_self_consistency.py
index eed3dff..922ae5a 100644
--- a/src/evals/check_self_consistency.py
+++ b/src/evals/check_self_consistency.py
@@ -59,6 +59,7 @@ def self_consistency_evaluation(
         )

         if not valid_continuation(continuation):
+            print("invalid continuation: ", continuation)
             invalid_responses += 1
             continue
         else:
@@ -81,6 +82,7 @@ def self_consistency_evaluation(
         offset = int(offset)

         if not valid_explanation(fn, offset, len(sequence)):
+            print("invalid explanation: ", explanation)
             invalid_responses += 1
             continue
         else:
diff --git a/src/evals/sequence_completion_with_base_change.py b/src/evals/sequence_completion_with_base_change.py
index f184d91..dd8d585 100644
--- a/src/evals/sequence_completion_with_base_change.py
+++ b/src/evals/sequence_completion_with_base_change.py
@@ -89,10 +89,10 @@ def evaluate_compute_dependence_with_base_changes(
         json.dump(results, f)

     # Save command line arguments
-    args_path = os.path.join(results_dir, "args.json")
-    args_dict = vars(args)
-    args_dict["sequence_functions"] = all_sequence_functions
-    with open(args_path, "w") as f:
-        json.dump(args_dict, f)
+    # args_path = os.path.join(results_dir, "args.json")
+    # args_dict = vars(args)
+    # args_dict["sequence_functions"] = all_sequence_functions
+    # with open(args_path, "w") as f:
+    #     json.dump(args_dict, f)

     print(f"Results saved to {results_path}")
